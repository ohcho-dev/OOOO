"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-lottie-player";
exports.ids = ["vendor-chunks/react-lottie-player"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-lottie-player/dist/LottiePlayer.modern.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-lottie-player/dist/LottiePlayer.modern.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var lottie_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lottie-web */ \"(ssr)/./node_modules/lottie-web/build/player/lottie.js\");\n/* harmony import */ var lottie_web__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lottie_web__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var fast_deep_equal_es6_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fast-deep-equal/es6/react */ \"(ssr)/./node_modules/fast-deep-equal/es6/react.js\");\n/* harmony import */ var fast_deep_equal_es6_react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal_es6_react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var rfdc_default__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rfdc/default */ \"(ssr)/./node_modules/rfdc/default.js\");\n/* harmony import */ var rfdc_default__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(rfdc_default__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction createCommonjsModule(fn, module) {\n    return module = {\n        exports: {}\n    }, fn(module, module.exports), module.exports;\n}\n/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var b = \"function\" === typeof Symbol && Symbol.for, c = b ? Symbol.for(\"react.element\") : 60103, d = b ? Symbol.for(\"react.portal\") : 60106, e = b ? Symbol.for(\"react.fragment\") : 60107, f = b ? Symbol.for(\"react.strict_mode\") : 60108, g = b ? Symbol.for(\"react.profiler\") : 60114, h = b ? Symbol.for(\"react.provider\") : 60109, k = b ? Symbol.for(\"react.context\") : 60110, l = b ? Symbol.for(\"react.async_mode\") : 60111, m = b ? Symbol.for(\"react.concurrent_mode\") : 60111, n = b ? Symbol.for(\"react.forward_ref\") : 60112, p = b ? Symbol.for(\"react.suspense\") : 60113, q = b ? Symbol.for(\"react.suspense_list\") : 60120, r = b ? Symbol.for(\"react.memo\") : 60115, t = b ? Symbol.for(\"react.lazy\") : 60116, v = b ? Symbol.for(\"react.block\") : 60121, w = b ? Symbol.for(\"react.fundamental\") : 60117, x = b ? Symbol.for(\"react.responder\") : 60118, y = b ? Symbol.for(\"react.scope\") : 60119;\nfunction z(a) {\n    if (\"object\" === typeof a && null !== a) {\n        var u = a.$$typeof;\n        switch(u){\n            case c:\n                switch(a = a.type, a){\n                    case l:\n                    case m:\n                    case e:\n                    case g:\n                    case f:\n                    case p:\n                        return a;\n                    default:\n                        switch(a = a && a.$$typeof, a){\n                            case k:\n                            case n:\n                            case t:\n                            case r:\n                            case h:\n                                return a;\n                            default:\n                                return u;\n                        }\n                }\n            case d:\n                return u;\n        }\n    }\n}\nfunction A(a) {\n    return z(a) === m;\n}\nvar AsyncMode = l;\nvar ConcurrentMode = m;\nvar ContextConsumer = k;\nvar ContextProvider = h;\nvar Element = c;\nvar ForwardRef = n;\nvar Fragment = e;\nvar Lazy = t;\nvar Memo = r;\nvar Portal = d;\nvar Profiler = g;\nvar StrictMode = f;\nvar Suspense = p;\nvar isAsyncMode = function(a) {\n    return A(a) || z(a) === l;\n};\nvar isConcurrentMode = A;\nvar isContextConsumer = function(a) {\n    return z(a) === k;\n};\nvar isContextProvider = function(a) {\n    return z(a) === h;\n};\nvar isElement = function(a) {\n    return \"object\" === typeof a && null !== a && a.$$typeof === c;\n};\nvar isForwardRef = function(a) {\n    return z(a) === n;\n};\nvar isFragment = function(a) {\n    return z(a) === e;\n};\nvar isLazy = function(a) {\n    return z(a) === t;\n};\nvar isMemo = function(a) {\n    return z(a) === r;\n};\nvar isPortal = function(a) {\n    return z(a) === d;\n};\nvar isProfiler = function(a) {\n    return z(a) === g;\n};\nvar isStrictMode = function(a) {\n    return z(a) === f;\n};\nvar isSuspense = function(a) {\n    return z(a) === p;\n};\nvar isValidElementType = function(a) {\n    return \"string\" === typeof a || \"function\" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || \"object\" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);\n};\nvar typeOf = z;\nvar reactIs_production_min = {\n    AsyncMode: AsyncMode,\n    ConcurrentMode: ConcurrentMode,\n    ContextConsumer: ContextConsumer,\n    ContextProvider: ContextProvider,\n    Element: Element,\n    ForwardRef: ForwardRef,\n    Fragment: Fragment,\n    Lazy: Lazy,\n    Memo: Memo,\n    Portal: Portal,\n    Profiler: Profiler,\n    StrictMode: StrictMode,\n    Suspense: Suspense,\n    isAsyncMode: isAsyncMode,\n    isConcurrentMode: isConcurrentMode,\n    isContextConsumer: isContextConsumer,\n    isContextProvider: isContextProvider,\n    isElement: isElement,\n    isForwardRef: isForwardRef,\n    isFragment: isFragment,\n    isLazy: isLazy,\n    isMemo: isMemo,\n    isPortal: isPortal,\n    isProfiler: isProfiler,\n    isStrictMode: isStrictMode,\n    isSuspense: isSuspense,\n    isValidElementType: isValidElementType,\n    typeOf: typeOf\n};\nvar reactIs_development = createCommonjsModule(function(module, exports) {\n    if (true) {\n        (function() {\n            // The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n            // nor polyfill, then a plain number is used for performance.\n            var hasSymbol = typeof Symbol === \"function\" && Symbol.for;\n            var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for(\"react.element\") : 0xeac7;\n            var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for(\"react.portal\") : 0xeaca;\n            var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for(\"react.fragment\") : 0xeacb;\n            var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for(\"react.strict_mode\") : 0xeacc;\n            var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for(\"react.profiler\") : 0xead2;\n            var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for(\"react.provider\") : 0xeacd;\n            var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for(\"react.context\") : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n            // (unstable) APIs that have been removed. Can we remove the symbols?\n            var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for(\"react.async_mode\") : 0xeacf;\n            var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for(\"react.concurrent_mode\") : 0xeacf;\n            var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for(\"react.forward_ref\") : 0xead0;\n            var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for(\"react.suspense\") : 0xead1;\n            var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for(\"react.suspense_list\") : 0xead8;\n            var REACT_MEMO_TYPE = hasSymbol ? Symbol.for(\"react.memo\") : 0xead3;\n            var REACT_LAZY_TYPE = hasSymbol ? Symbol.for(\"react.lazy\") : 0xead4;\n            var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for(\"react.block\") : 0xead9;\n            var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for(\"react.fundamental\") : 0xead5;\n            var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for(\"react.responder\") : 0xead6;\n            var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for(\"react.scope\") : 0xead7;\n            function isValidElementType(type) {\n                return typeof type === \"string\" || typeof type === \"function\" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n                type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === \"object\" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n            }\n            function typeOf(object) {\n                if (typeof object === \"object\" && object !== null) {\n                    var $$typeof = object.$$typeof;\n                    switch($$typeof){\n                        case REACT_ELEMENT_TYPE:\n                            var type = object.type;\n                            switch(type){\n                                case REACT_ASYNC_MODE_TYPE:\n                                case REACT_CONCURRENT_MODE_TYPE:\n                                case REACT_FRAGMENT_TYPE:\n                                case REACT_PROFILER_TYPE:\n                                case REACT_STRICT_MODE_TYPE:\n                                case REACT_SUSPENSE_TYPE:\n                                    return type;\n                                default:\n                                    var $$typeofType = type && type.$$typeof;\n                                    switch($$typeofType){\n                                        case REACT_CONTEXT_TYPE:\n                                        case REACT_FORWARD_REF_TYPE:\n                                        case REACT_LAZY_TYPE:\n                                        case REACT_MEMO_TYPE:\n                                        case REACT_PROVIDER_TYPE:\n                                            return $$typeofType;\n                                        default:\n                                            return $$typeof;\n                                    }\n                            }\n                        case REACT_PORTAL_TYPE:\n                            return $$typeof;\n                    }\n                }\n                return undefined;\n            } // AsyncMode is deprecated along with isAsyncMode\n            var AsyncMode = REACT_ASYNC_MODE_TYPE;\n            var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\n            var ContextConsumer = REACT_CONTEXT_TYPE;\n            var ContextProvider = REACT_PROVIDER_TYPE;\n            var Element = REACT_ELEMENT_TYPE;\n            var ForwardRef = REACT_FORWARD_REF_TYPE;\n            var Fragment = REACT_FRAGMENT_TYPE;\n            var Lazy = REACT_LAZY_TYPE;\n            var Memo = REACT_MEMO_TYPE;\n            var Portal = REACT_PORTAL_TYPE;\n            var Profiler = REACT_PROFILER_TYPE;\n            var StrictMode = REACT_STRICT_MODE_TYPE;\n            var Suspense = REACT_SUSPENSE_TYPE;\n            var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n            function isAsyncMode(object) {\n                {\n                    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n                        hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n                        console[\"warn\"](\"The ReactIs.isAsyncMode() alias has been deprecated, \" + \"and will be removed in React 17+. Update your code to use \" + \"ReactIs.isConcurrentMode() instead. It has the exact same API.\");\n                    }\n                }\n                return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n            }\n            function isConcurrentMode(object) {\n                return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n            }\n            function isContextConsumer(object) {\n                return typeOf(object) === REACT_CONTEXT_TYPE;\n            }\n            function isContextProvider(object) {\n                return typeOf(object) === REACT_PROVIDER_TYPE;\n            }\n            function isElement(object) {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n            function isForwardRef(object) {\n                return typeOf(object) === REACT_FORWARD_REF_TYPE;\n            }\n            function isFragment(object) {\n                return typeOf(object) === REACT_FRAGMENT_TYPE;\n            }\n            function isLazy(object) {\n                return typeOf(object) === REACT_LAZY_TYPE;\n            }\n            function isMemo(object) {\n                return typeOf(object) === REACT_MEMO_TYPE;\n            }\n            function isPortal(object) {\n                return typeOf(object) === REACT_PORTAL_TYPE;\n            }\n            function isProfiler(object) {\n                return typeOf(object) === REACT_PROFILER_TYPE;\n            }\n            function isStrictMode(object) {\n                return typeOf(object) === REACT_STRICT_MODE_TYPE;\n            }\n            function isSuspense(object) {\n                return typeOf(object) === REACT_SUSPENSE_TYPE;\n            }\n            exports.AsyncMode = AsyncMode;\n            exports.ConcurrentMode = ConcurrentMode;\n            exports.ContextConsumer = ContextConsumer;\n            exports.ContextProvider = ContextProvider;\n            exports.Element = Element;\n            exports.ForwardRef = ForwardRef;\n            exports.Fragment = Fragment;\n            exports.Lazy = Lazy;\n            exports.Memo = Memo;\n            exports.Portal = Portal;\n            exports.Profiler = Profiler;\n            exports.StrictMode = StrictMode;\n            exports.Suspense = Suspense;\n            exports.isAsyncMode = isAsyncMode;\n            exports.isConcurrentMode = isConcurrentMode;\n            exports.isContextConsumer = isContextConsumer;\n            exports.isContextProvider = isContextProvider;\n            exports.isElement = isElement;\n            exports.isForwardRef = isForwardRef;\n            exports.isFragment = isFragment;\n            exports.isLazy = isLazy;\n            exports.isMemo = isMemo;\n            exports.isPortal = isPortal;\n            exports.isProfiler = isProfiler;\n            exports.isStrictMode = isStrictMode;\n            exports.isSuspense = isSuspense;\n            exports.isValidElementType = isValidElementType;\n            exports.typeOf = typeOf;\n        })();\n    }\n});\nvar reactIs = createCommonjsModule(function(module) {\n    if (false) {} else {\n        module.exports = reactIs_development;\n    }\n});\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/ /* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\nfunction toObject(val) {\n    if (val === null || val === undefined) {\n        throw new TypeError(\"Object.assign cannot be called with null or undefined\");\n    }\n    return Object(val);\n}\nfunction shouldUseNative() {\n    try {\n        if (!Object.assign) {\n            return false;\n        }\n        // Detect buggy property enumeration order in older V8 versions.\n        // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n        var test1 = new String(\"abc\"); // eslint-disable-line no-new-wrappers\n        test1[5] = \"de\";\n        if (Object.getOwnPropertyNames(test1)[0] === \"5\") {\n            return false;\n        }\n        // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n        var test2 = {};\n        for(var i = 0; i < 10; i++){\n            test2[\"_\" + String.fromCharCode(i)] = i;\n        }\n        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {\n            return test2[n];\n        });\n        if (order2.join(\"\") !== \"0123456789\") {\n            return false;\n        }\n        // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n        var test3 = {};\n        \"abcdefghijklmnopqrst\".split(\"\").forEach(function(letter) {\n            test3[letter] = letter;\n        });\n        if (Object.keys(Object.assign({}, test3)).join(\"\") !== \"abcdefghijklmnopqrst\") {\n            return false;\n        }\n        return true;\n    } catch (err) {\n        // We don't expect any of the above to throw, but better to be safe.\n        return false;\n    }\n}\nvar objectAssign = shouldUseNative() ? Object.assign : function(target, source) {\n    var from;\n    var to = toObject(target);\n    var symbols;\n    for(var s = 1; s < arguments.length; s++){\n        from = Object(arguments[s]);\n        for(var key in from){\n            if (hasOwnProperty.call(from, key)) {\n                to[key] = from[key];\n            }\n        }\n        if (getOwnPropertySymbols) {\n            symbols = getOwnPropertySymbols(from);\n            for(var i = 0; i < symbols.length; i++){\n                if (propIsEnumerable.call(from, symbols[i])) {\n                    to[symbols[i]] = from[symbols[i]];\n                }\n            }\n        }\n    }\n    return to;\n};\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var ReactPropTypesSecret = \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\";\nvar ReactPropTypesSecret_1 = ReactPropTypesSecret;\nvar has = Function.call.bind(Object.prototype.hasOwnProperty);\nvar printWarning = function() {};\nif (true) {\n    var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;\n    var loggedTypeFailures = {};\n    var has$1 = has;\n    printWarning = function(text) {\n        var message = \"Warning: \" + text;\n        if (typeof console !== \"undefined\") {\n            console.error(message);\n        }\n        try {\n            // --- Welcome to debugging React ---\n            // This error was thrown as a convenience so that you can use this stack\n            // to find the callsite that caused this warning to fire.\n            throw new Error(message);\n        } catch (x) {}\n    };\n}\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n    if (true) {\n        for(var typeSpecName in typeSpecs){\n            if (has$1(typeSpecs, typeSpecName)) {\n                var error;\n                // Prop type validation may throw. In case they do, we don't want to\n                // fail the render phase where it didn't fail before. So we log it.\n                // After these have been cleaned up, we'll let them throw.\n                try {\n                    // This is intentionally an invariant that gets caught. It's the same\n                    // behavior as without this statement except with a better message.\n                    if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                        var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                        err.name = \"Invariant Violation\";\n                        throw err;\n                    }\n                    error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);\n                } catch (ex) {\n                    error = ex;\n                }\n                if (error && !(error instanceof Error)) {\n                    printWarning((componentName || \"React class\") + \": type specification of \" + location + \" `\" + typeSpecName + \"` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a \" + typeof error + \". \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\");\n                }\n                if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n                    // Only monitor this failure once because there tends to be a lot of the\n                    // same error.\n                    loggedTypeFailures[error.message] = true;\n                    var stack = getStack ? getStack() : \"\";\n                    printWarning(\"Failed \" + location + \" type: \" + error.message + (stack != null ? stack : \"\"));\n                }\n            }\n        }\n    }\n}\n/**\n * Resets warning cache when testing.\n *\n * @private\n */ checkPropTypes.resetWarningCache = function() {\n    if (true) {\n        loggedTypeFailures = {};\n    }\n};\nvar checkPropTypes_1 = checkPropTypes;\nvar printWarning$1 = function() {};\nif (true) {\n    printWarning$1 = function(text) {\n        var message = \"Warning: \" + text;\n        if (typeof console !== \"undefined\") {\n            console.error(message);\n        }\n        try {\n            // --- Welcome to debugging React ---\n            // This error was thrown as a convenience so that you can use this stack\n            // to find the callsite that caused this warning to fire.\n            throw new Error(message);\n        } catch (x) {}\n    };\n}\nfunction emptyFunctionThatReturnsNull() {\n    return null;\n}\nvar factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {\n    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === \"function\" && Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = \"@@iterator\"; // Before Symbol spec.\n    /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */ function getIteratorFn(maybeIterable) {\n        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n        if (typeof iteratorFn === \"function\") {\n            return iteratorFn;\n        }\n    }\n    /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */ var ANONYMOUS = \"<<anonymous>>\";\n    // Important!\n    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n    var ReactPropTypes = {\n        array: createPrimitiveTypeChecker(\"array\"),\n        bigint: createPrimitiveTypeChecker(\"bigint\"),\n        bool: createPrimitiveTypeChecker(\"boolean\"),\n        func: createPrimitiveTypeChecker(\"function\"),\n        number: createPrimitiveTypeChecker(\"number\"),\n        object: createPrimitiveTypeChecker(\"object\"),\n        string: createPrimitiveTypeChecker(\"string\"),\n        symbol: createPrimitiveTypeChecker(\"symbol\"),\n        any: createAnyTypeChecker(),\n        arrayOf: createArrayOfTypeChecker,\n        element: createElementTypeChecker(),\n        elementType: createElementTypeTypeChecker(),\n        instanceOf: createInstanceTypeChecker,\n        node: createNodeChecker(),\n        objectOf: createObjectOfTypeChecker,\n        oneOf: createEnumTypeChecker,\n        oneOfType: createUnionTypeChecker,\n        shape: createShapeTypeChecker,\n        exact: createStrictShapeTypeChecker\n    };\n    /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */ /*eslint-disable no-self-compare*/ function is(x, y) {\n        // SameValue algorithm\n        if (x === y) {\n            // Steps 1-5, 7-10\n            // Steps 6.b-6.e: +0 != -0\n            return x !== 0 || 1 / x === 1 / y;\n        } else {\n            // Step 6.a: NaN == NaN\n            return x !== x && y !== y;\n        }\n    }\n    /*eslint-enable no-self-compare*/ /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */ function PropTypeError(message, data) {\n        this.message = message;\n        this.data = data && typeof data === \"object\" ? data : {};\n        this.stack = \"\";\n    }\n    // Make `instanceof Error` still work for returned errors.\n    PropTypeError.prototype = Error.prototype;\n    function createChainableTypeChecker(validate) {\n        if (true) {\n            var manualPropTypeCallCache = {};\n            var manualPropTypeWarningCount = 0;\n        }\n        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n            componentName = componentName || ANONYMOUS;\n            propFullName = propFullName || propName;\n            if (secret !== ReactPropTypesSecret_1) {\n                if (throwOnDirectAccess) {\n                    // New behavior only for users of `prop-types` package\n                    var err = new Error(\"Calling PropTypes validators directly is not supported by the `prop-types` package. \" + \"Use `PropTypes.checkPropTypes()` to call them. \" + \"Read more at http://fb.me/use-check-prop-types\");\n                    err.name = \"Invariant Violation\";\n                    throw err;\n                } else if ( true && typeof console !== \"undefined\") {\n                    // Old behavior for people using React.PropTypes\n                    var cacheKey = componentName + \":\" + propName;\n                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors\n                    manualPropTypeWarningCount < 3) {\n                        printWarning$1(\"You are manually calling a React.PropTypes validation \" + \"function for the `\" + propFullName + \"` prop on `\" + componentName + \"`. This is deprecated \" + \"and will throw in the standalone `prop-types` package. \" + \"You may be seeing this warning due to a third-party PropTypes \" + \"library. See https://fb.me/react-warning-dont-call-proptypes \" + \"for details.\");\n                        manualPropTypeCallCache[cacheKey] = true;\n                        manualPropTypeWarningCount++;\n                    }\n                }\n            }\n            if (props[propName] == null) {\n                if (isRequired) {\n                    if (props[propName] === null) {\n                        return new PropTypeError(\"The \" + location + \" `\" + propFullName + \"` is marked as required \" + (\"in `\" + componentName + \"`, but its value is `null`.\"));\n                    }\n                    return new PropTypeError(\"The \" + location + \" `\" + propFullName + \"` is marked as required in \" + (\"`\" + componentName + \"`, but its value is `undefined`.\"));\n                }\n                return null;\n            } else {\n                return validate(props, propName, componentName, location, propFullName);\n            }\n        }\n        var chainedCheckType = checkType.bind(null, false);\n        chainedCheckType.isRequired = checkType.bind(null, true);\n        return chainedCheckType;\n    }\n    function createPrimitiveTypeChecker(expectedType) {\n        function validate(props, propName, componentName, location, propFullName, secret) {\n            var propValue = props[propName];\n            var propType = getPropType(propValue);\n            if (propType !== expectedType) {\n                // `propValue` being instance of, say, date/regexp, pass the 'object'\n                // check, but we can offer a more precise error message here rather than\n                // 'of type `object`'.\n                var preciseType = getPreciseType(propValue);\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + preciseType + \"` supplied to `\" + componentName + \"`, expected \") + (\"`\" + expectedType + \"`.\"), {\n                    expectedType: expectedType\n                });\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createAnyTypeChecker() {\n        return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n    }\n    function createArrayOfTypeChecker(typeChecker) {\n        function validate(props, propName, componentName, location, propFullName) {\n            if (typeof typeChecker !== \"function\") {\n                return new PropTypeError(\"Property `\" + propFullName + \"` of component `\" + componentName + \"` has invalid PropType notation inside arrayOf.\");\n            }\n            var propValue = props[propName];\n            if (!Array.isArray(propValue)) {\n                var propType = getPropType(propValue);\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected an array.\"));\n            }\n            for(var i = 0; i < propValue.length; i++){\n                var error = typeChecker(propValue, i, componentName, location, propFullName + \"[\" + i + \"]\", ReactPropTypesSecret_1);\n                if (error instanceof Error) {\n                    return error;\n                }\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createElementTypeChecker() {\n        function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n            if (!isValidElement(propValue)) {\n                var propType = getPropType(propValue);\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected a single ReactElement.\"));\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createElementTypeTypeChecker() {\n        function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n            if (!reactIs.isValidElementType(propValue)) {\n                var propType = getPropType(propValue);\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected a single ReactElement type.\"));\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createInstanceTypeChecker(expectedClass) {\n        function validate(props, propName, componentName, location, propFullName) {\n            if (!(props[propName] instanceof expectedClass)) {\n                var expectedClassName = expectedClass.name || ANONYMOUS;\n                var actualClassName = getClassName(props[propName]);\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + actualClassName + \"` supplied to `\" + componentName + \"`, expected \") + (\"instance of `\" + expectedClassName + \"`.\"));\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createEnumTypeChecker(expectedValues) {\n        if (!Array.isArray(expectedValues)) {\n            if (true) {\n                if (arguments.length > 1) {\n                    printWarning$1(\"Invalid arguments supplied to oneOf, expected an array, got \" + arguments.length + \" arguments. \" + \"A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).\");\n                } else {\n                    printWarning$1(\"Invalid argument supplied to oneOf, expected an array.\");\n                }\n            }\n            return emptyFunctionThatReturnsNull;\n        }\n        function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n            for(var i = 0; i < expectedValues.length; i++){\n                if (is(propValue, expectedValues[i])) {\n                    return null;\n                }\n            }\n            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n                var type = getPreciseType(value);\n                if (type === \"symbol\") {\n                    return String(value);\n                }\n                return value;\n            });\n            return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of value `\" + String(propValue) + \"` \" + (\"supplied to `\" + componentName + \"`, expected one of \" + valuesString + \".\"));\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createObjectOfTypeChecker(typeChecker) {\n        function validate(props, propName, componentName, location, propFullName) {\n            if (typeof typeChecker !== \"function\") {\n                return new PropTypeError(\"Property `\" + propFullName + \"` of component `\" + componentName + \"` has invalid PropType notation inside objectOf.\");\n            }\n            var propValue = props[propName];\n            var propType = getPropType(propValue);\n            if (propType !== \"object\") {\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type \" + (\"`\" + propType + \"` supplied to `\" + componentName + \"`, expected an object.\"));\n            }\n            for(var key in propValue){\n                if (has(propValue, key)) {\n                    var error = typeChecker(propValue, key, componentName, location, propFullName + \".\" + key, ReactPropTypesSecret_1);\n                    if (error instanceof Error) {\n                        return error;\n                    }\n                }\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createUnionTypeChecker(arrayOfTypeCheckers) {\n        if (!Array.isArray(arrayOfTypeCheckers)) {\n             true ? printWarning$1(\"Invalid argument supplied to oneOfType, expected an instance of array.\") : 0;\n            return emptyFunctionThatReturnsNull;\n        }\n        for(var i = 0; i < arrayOfTypeCheckers.length; i++){\n            var checker = arrayOfTypeCheckers[i];\n            if (typeof checker !== \"function\") {\n                printWarning$1(\"Invalid argument supplied to oneOfType. Expected an array of check functions, but \" + \"received \" + getPostfixForTypeWarning(checker) + \" at index \" + i + \".\");\n                return emptyFunctionThatReturnsNull;\n            }\n        }\n        function validate(props, propName, componentName, location, propFullName) {\n            var expectedTypes = [];\n            for(var i = 0; i < arrayOfTypeCheckers.length; i++){\n                var checker = arrayOfTypeCheckers[i];\n                var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1);\n                if (checkerResult == null) {\n                    return null;\n                }\n                if (checkerResult.data && has(checkerResult.data, \"expectedType\")) {\n                    expectedTypes.push(checkerResult.data.expectedType);\n                }\n            }\n            var expectedTypesMessage = expectedTypes.length > 0 ? \", expected one of type [\" + expectedTypes.join(\", \") + \"]\" : \"\";\n            return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` supplied to \" + (\"`\" + componentName + \"`\" + expectedTypesMessage + \".\"));\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createNodeChecker() {\n        function validate(props, propName, componentName, location, propFullName) {\n            if (!isNode(props[propName])) {\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` supplied to \" + (\"`\" + componentName + \"`, expected a ReactNode.\"));\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function invalidValidatorError(componentName, location, propFullName, key, type) {\n        return new PropTypeError((componentName || \"React class\") + \": \" + location + \" type `\" + propFullName + \".\" + key + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + type + \"`.\");\n    }\n    function createShapeTypeChecker(shapeTypes) {\n        function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n            var propType = getPropType(propValue);\n            if (propType !== \"object\") {\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type `\" + propType + \"` \" + (\"supplied to `\" + componentName + \"`, expected `object`.\"));\n            }\n            for(var key in shapeTypes){\n                var checker = shapeTypes[key];\n                if (typeof checker !== \"function\") {\n                    return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n                }\n                var error = checker(propValue, key, componentName, location, propFullName + \".\" + key, ReactPropTypesSecret_1);\n                if (error) {\n                    return error;\n                }\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function createStrictShapeTypeChecker(shapeTypes) {\n        function validate(props, propName, componentName, location, propFullName) {\n            var propValue = props[propName];\n            var propType = getPropType(propValue);\n            if (propType !== \"object\") {\n                return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` of type `\" + propType + \"` \" + (\"supplied to `\" + componentName + \"`, expected `object`.\"));\n            }\n            // We need to check all keys in case some are required but missing from props.\n            var allKeys = objectAssign({}, props[propName], shapeTypes);\n            for(var key in allKeys){\n                var checker = shapeTypes[key];\n                if (has(shapeTypes, key) && typeof checker !== \"function\") {\n                    return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));\n                }\n                if (!checker) {\n                    return new PropTypeError(\"Invalid \" + location + \" `\" + propFullName + \"` key `\" + key + \"` supplied to `\" + componentName + \"`.\" + \"\\nBad object: \" + JSON.stringify(props[propName], null, \"  \") + \"\\nValid keys: \" + JSON.stringify(Object.keys(shapeTypes), null, \"  \"));\n                }\n                var error = checker(propValue, key, componentName, location, propFullName + \".\" + key, ReactPropTypesSecret_1);\n                if (error) {\n                    return error;\n                }\n            }\n            return null;\n        }\n        return createChainableTypeChecker(validate);\n    }\n    function isNode(propValue) {\n        switch(typeof propValue){\n            case \"number\":\n            case \"string\":\n            case \"undefined\":\n                return true;\n            case \"boolean\":\n                return !propValue;\n            case \"object\":\n                if (Array.isArray(propValue)) {\n                    return propValue.every(isNode);\n                }\n                if (propValue === null || isValidElement(propValue)) {\n                    return true;\n                }\n                var iteratorFn = getIteratorFn(propValue);\n                if (iteratorFn) {\n                    var iterator = iteratorFn.call(propValue);\n                    var step;\n                    if (iteratorFn !== propValue.entries) {\n                        while(!(step = iterator.next()).done){\n                            if (!isNode(step.value)) {\n                                return false;\n                            }\n                        }\n                    } else {\n                        // Iterator will provide entry [k,v] tuples rather than values.\n                        while(!(step = iterator.next()).done){\n                            var entry = step.value;\n                            if (entry) {\n                                if (!isNode(entry[1])) {\n                                    return false;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    return false;\n                }\n                return true;\n            default:\n                return false;\n        }\n    }\n    function isSymbol(propType, propValue) {\n        // Native Symbol.\n        if (propType === \"symbol\") {\n            return true;\n        }\n        // falsy value can't be a Symbol\n        if (!propValue) {\n            return false;\n        }\n        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n        if (propValue[\"@@toStringTag\"] === \"Symbol\") {\n            return true;\n        }\n        // Fallback for non-spec compliant Symbols which are polyfilled.\n        if (typeof Symbol === \"function\" && propValue instanceof Symbol) {\n            return true;\n        }\n        return false;\n    }\n    // Equivalent of `typeof` but with special handling for array and regexp.\n    function getPropType(propValue) {\n        var propType = typeof propValue;\n        if (Array.isArray(propValue)) {\n            return \"array\";\n        }\n        if (propValue instanceof RegExp) {\n            // Old webkits (at least until Android 4.0) return 'function' rather than\n            // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n            // passes PropTypes.object.\n            return \"object\";\n        }\n        if (isSymbol(propType, propValue)) {\n            return \"symbol\";\n        }\n        return propType;\n    }\n    // This handles more types than `getPropType`. Only used for error messages.\n    // See `createPrimitiveTypeChecker`.\n    function getPreciseType(propValue) {\n        if (typeof propValue === \"undefined\" || propValue === null) {\n            return \"\" + propValue;\n        }\n        var propType = getPropType(propValue);\n        if (propType === \"object\") {\n            if (propValue instanceof Date) {\n                return \"date\";\n            } else if (propValue instanceof RegExp) {\n                return \"regexp\";\n            }\n        }\n        return propType;\n    }\n    // Returns a string that is postfixed to a warning about an invalid type.\n    // For example, \"undefined\" or \"of type array\"\n    function getPostfixForTypeWarning(value) {\n        var type = getPreciseType(value);\n        switch(type){\n            case \"array\":\n            case \"object\":\n                return \"an \" + type;\n            case \"boolean\":\n            case \"date\":\n            case \"regexp\":\n                return \"a \" + type;\n            default:\n                return type;\n        }\n    }\n    // Returns class name of the object, if any.\n    function getClassName(propValue) {\n        if (!propValue.constructor || !propValue.constructor.name) {\n            return ANONYMOUS;\n        }\n        return propValue.constructor.name;\n    }\n    ReactPropTypes.checkPropTypes = checkPropTypes_1;\n    ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;\n    ReactPropTypes.PropTypes = ReactPropTypes;\n    return ReactPropTypes;\n};\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\nvar factoryWithThrowingShims = function() {\n    function shim(props, propName, componentName, location, propFullName, secret) {\n        if (secret === ReactPropTypesSecret_1) {\n            // It is still safe when called from React.\n            return;\n        }\n        var err = new Error(\"Calling PropTypes validators directly is not supported by the `prop-types` package. \" + \"Use PropTypes.checkPropTypes() to call them. \" + \"Read more at http://fb.me/use-check-prop-types\");\n        err.name = \"Invariant Violation\";\n        throw err;\n    }\n    shim.isRequired = shim;\n    function getShim() {\n        return shim;\n    } // Important!\n    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n    var ReactPropTypes = {\n        array: shim,\n        bigint: shim,\n        bool: shim,\n        func: shim,\n        number: shim,\n        object: shim,\n        string: shim,\n        symbol: shim,\n        any: shim,\n        arrayOf: getShim,\n        element: shim,\n        elementType: shim,\n        instanceOf: getShim,\n        node: shim,\n        objectOf: getShim,\n        oneOf: getShim,\n        oneOfType: getShim,\n        shape: getShim,\n        exact: getShim,\n        checkPropTypes: emptyFunctionWithReset,\n        resetWarningCache: emptyFunction\n    };\n    ReactPropTypes.PropTypes = ReactPropTypes;\n    return ReactPropTypes;\n};\nvar propTypes = createCommonjsModule(function(module) {\n    /**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ if (true) {\n        var ReactIs = reactIs;\n        // By explicitly using `prop-types` you are opting into new development behavior.\n        // http://fb.me/prop-types-in-prod\n        var throwOnDirectAccess = true;\n        module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);\n    } else {}\n});\nvar propTypes$1 = {\n    animationData: propTypes.object,\n    path: propTypes.string,\n    play: propTypes.bool,\n    goTo: propTypes.number,\n    speed: propTypes.number,\n    direction: propTypes.number,\n    loop: propTypes.oneOfType([\n        propTypes.number,\n        propTypes.bool\n    ]),\n    useSubframes: propTypes.bool,\n    segments: propTypes.oneOfType([\n        propTypes.arrayOf(propTypes.number),\n        propTypes.bool\n    ]),\n    rendererSettings: propTypes.object,\n    renderer: propTypes.string,\n    audioFactory: propTypes.func,\n    onComplete: propTypes.func,\n    onLoopComplete: propTypes.func,\n    onEnterFrame: propTypes.func,\n    onSegmentStart: propTypes.func\n};\nvar emptyObject = {};\nvar noOp = function noOp() {};\nvar makeLottiePlayer = function makeLottiePlayer(_ref) {\n    var loadAnimation = _ref.loadAnimation;\n    var Lottie = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.memo)(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(params, forwardedRef) {\n        var _params$animationData = params.animationData, animationData = _params$animationData === void 0 ? null : _params$animationData, _params$path = params.path, path = _params$path === void 0 ? null : _params$path, _params$play = params.play, play = _params$play === void 0 ? null : _params$play, _params$speed = params.speed, speed = _params$speed === void 0 ? 1 : _params$speed, _params$direction = params.direction, direction = _params$direction === void 0 ? 1 : _params$direction, _params$segments = params.segments, segmentsIn = _params$segments === void 0 ? null : _params$segments, _params$goTo = params.goTo, goTo = _params$goTo === void 0 ? null : _params$goTo, _params$useSubframes = params.useSubframes, useSubframes = _params$useSubframes === void 0 ? true : _params$useSubframes, _params$renderer = params.renderer, renderer = _params$renderer === void 0 ? \"svg\" : _params$renderer, _params$loop = params.loop, loop = _params$loop === void 0 ? true : _params$loop, _params$rendererSetti = params.rendererSettings, rendererSettingsIn = _params$rendererSetti === void 0 ? emptyObject : _params$rendererSetti, _params$audioFactory = params.audioFactory, audioFactory = _params$audioFactory === void 0 ? null : _params$audioFactory, _params$onLoad = params.onLoad, onLoad = _params$onLoad === void 0 ? noOp : _params$onLoad, _params$onComplete = params.onComplete, onComplete = _params$onComplete === void 0 ? noOp : _params$onComplete, _params$onLoopComplet = params.onLoopComplete, onLoopComplete = _params$onLoopComplet === void 0 ? noOp : _params$onLoopComplet, _params$onEnterFrame = params.onEnterFrame, onEnterFrame = _params$onEnterFrame === void 0 ? noOp : _params$onEnterFrame, _params$onSegmentStar = params.onSegmentStart, onSegmentStart = _params$onSegmentStar === void 0 ? noOp : _params$onSegmentStar, props = _objectWithoutPropertiesLoose(params, [\n            \"animationData\",\n            \"path\",\n            \"play\",\n            \"speed\",\n            \"direction\",\n            \"segments\",\n            \"goTo\",\n            \"useSubframes\",\n            \"renderer\",\n            \"loop\",\n            \"rendererSettings\",\n            \"audioFactory\",\n            \"onLoad\",\n            \"onComplete\",\n            \"onLoopComplete\",\n            \"onEnterFrame\",\n            \"onSegmentStart\"\n        ]);\n        var animElementRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n        var animRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n        var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false), ready = _useState[0], setReady = _useState[1];\n        var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(segmentsIn), segments = _useState2[0], setSegments = _useState2[1];\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            if (!fast_deep_equal_es6_react__WEBPACK_IMPORTED_MODULE_2___default()(segments, segmentsIn)) setSegments(segmentsIn);\n        }, [\n            segmentsIn,\n            segments\n        ]);\n        var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(rendererSettingsIn), rendererSettings = _useState3[0], setRendererSettings = _useState3[1];\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            if (!fast_deep_equal_es6_react__WEBPACK_IMPORTED_MODULE_2___default()(rendererSettings, rendererSettingsIn)) setRendererSettings(rendererSettingsIn);\n        }, [\n            rendererSettingsIn,\n            rendererSettings\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            return function() {\n                return animRef.current.removeEventListener(\"complete\", onComplete);\n            };\n        }, [\n            onComplete\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            return function() {\n                return animRef.current.removeEventListener(\"loopComplete\", onLoopComplete);\n            };\n        }, [\n            onLoopComplete\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            return function() {\n                return animRef.current.removeEventListener(\"enterFrame\", onEnterFrame);\n            };\n        }, [\n            onEnterFrame\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            return function() {\n                return animRef.current.removeEventListener(\"segmentStart\", onSegmentStart);\n            };\n        }, [\n            onSegmentStart\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            return function() {\n                return animRef.current.removeEventListener(\"DOMLoaded\", onLoad);\n            };\n        }, [\n            onLoad\n        ]);\n        var setLottieRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function(newRef) {\n            animRef.current = newRef;\n            if (forwardedRef) forwardedRef.current = newRef;\n        }, []);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            function parseAnimationData() {\n                if (animationData == null || typeof animationData !== \"object\") return animationData;\n                if (typeof animationData[\"default\"] === \"object\") {\n                    return rfdc_default__WEBPACK_IMPORTED_MODULE_3___default()(animationData[\"default\"]);\n                }\n                return rfdc_default__WEBPACK_IMPORTED_MODULE_3___default()(animationData);\n            }\n            var lottie = loadAnimation({\n                animationData: parseAnimationData(),\n                path: path,\n                container: animElementRef.current,\n                renderer: renderer,\n                loop: false,\n                autoplay: false,\n                rendererSettings: rendererSettings,\n                audioFactory: audioFactory\n            });\n            setLottieRefs(lottie);\n            var onDomLoaded = function onDomLoaded() {\n                return setReady(true);\n            };\n            animRef.current.addEventListener(\"DOMLoaded\", onDomLoaded);\n            return function() {\n                animRef.current.removeEventListener(\"DOMLoaded\", onDomLoaded);\n                setReady(false);\n                animRef.current.destroy();\n                setLottieRefs(undefined);\n            };\n        }, [\n            loop,\n            renderer,\n            rendererSettings,\n            animationData,\n            path,\n            audioFactory,\n            setLottieRefs\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            animRef.current.addEventListener(\"DOMLoaded\", onLoad);\n        }, [\n            onLoad\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            animRef.current.addEventListener(\"complete\", onComplete);\n        }, [\n            onComplete\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            animRef.current.addEventListener(\"loopComplete\", onLoopComplete);\n        }, [\n            onLoopComplete\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            animRef.current.addEventListener(\"enterFrame\", onEnterFrame);\n        }, [\n            onEnterFrame\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            animRef.current.addEventListener(\"segmentStart\", onSegmentStart);\n        }, [\n            onSegmentStart\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            if (!ready) return;\n            animRef.current.loop = loop;\n        }, [\n            ready,\n            loop\n        ]);\n        var wasPlayingSegmentsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            if (!ready) return;\n            function playReverse(lastFrame) {\n                animRef.current.goToAndPlay(lastFrame, true);\n                animRef.current.setDirection(direction);\n            }\n            if (play === true) {\n                var force = true;\n                if (segments) {\n                    animRef.current.playSegments(segments, force);\n                    wasPlayingSegmentsRef.current = true;\n                    if (direction === -1) {\n                        var lastFrame = segments[1];\n                        playReverse(lastFrame);\n                    }\n                } else {\n                    if (wasPlayingSegmentsRef.current) animRef.current.resetSegments(force);\n                    wasPlayingSegmentsRef.current = false;\n                    if (direction === -1) {\n                        var _lastFrame = animRef.current.getDuration(true);\n                        playReverse(_lastFrame);\n                    } else {\n                        animRef.current.play();\n                    }\n                }\n            } else if (play === false) {\n                animRef.current.pause();\n            }\n        }, [\n            play,\n            segments,\n            ready,\n            direction\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            if (!ready) return;\n            if (Number.isNaN(speed)) return;\n            animRef.current.setSpeed(speed);\n        }, [\n            speed,\n            ready\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            if (!ready) return;\n            animRef.current.setDirection(direction);\n        }, [\n            direction,\n            ready\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            if (!ready) return;\n            if (goTo == null) return;\n            var isFrame = true;\n            if (play) animRef.current.goToAndPlay(goTo, isFrame);\n            else animRef.current.goToAndStop(goTo, isFrame);\n        }, [\n            goTo,\n            play,\n            ready\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n            if (animRef.current.setSubframe) animRef.current.setSubframe(useSubframes);\n        }, [\n            useSubframes\n        ]);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", _extends({}, props, {\n            ref: animElementRef\n        }));\n    }));\n    Lottie.propTypes = propTypes$1;\n    return Lottie;\n};\nvar LottiePlayer = makeLottiePlayer((lottie_web__WEBPACK_IMPORTED_MODULE_0___default()));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LottiePlayer); //# sourceMappingURL=LottiePlayer.modern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-lottie-player/dist/LottiePlayer.modern.js\n");

/***/ })

};
;