/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lottie-web";
exports.ids = ["vendor-chunks/lottie-web"];
exports.modules = {

/***/ "(ssr)/./node_modules/lottie-web/build/player/lottie.js":
/*!********************************************************!*\
  !*** ./node_modules/lottie-web/build/player/lottie.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("typeof navigator !== \"undefined\" && function(global1, factory1) {\n     true ? module.exports = factory1() : 0;\n}(this, function() {\n    \"use strict\";\n    var svgNS = \"http://www.w3.org/2000/svg\";\n    var locationHref = \"\";\n    var _useWebWorker = false;\n    var initialDefaultFrame = -999999;\n    var setWebWorker = function setWebWorker1(flag1) {\n        _useWebWorker = !!flag1;\n    };\n    var getWebWorker = function getWebWorker1() {\n        return _useWebWorker;\n    };\n    var setLocationHref = function setLocationHref1(value3) {\n        locationHref = value3;\n    };\n    var getLocationHref = function getLocationHref1() {\n        return locationHref;\n    };\n    function createTag(type1) {\n        // return {appendChild:function(){},setAttribute:function(){},style:{}}\n        return document.createElement(type1);\n    }\n    function extendPrototype(sources1, destination1) {\n        var i3;\n        var len1 = sources1.length;\n        var sourcePrototype1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            sourcePrototype1 = sources1[i3].prototype;\n            for(var attr3 in sourcePrototype1){\n                if (Object.prototype.hasOwnProperty.call(sourcePrototype1, attr3)) destination1.prototype[attr3] = sourcePrototype1[attr3];\n            }\n        }\n    }\n    function getDescriptor(object1, prop1) {\n        return Object.getOwnPropertyDescriptor(object1, prop1);\n    }\n    function createProxyFunction(prototype1) {\n        function ProxyFunction1() {}\n        ProxyFunction1.prototype = prototype1;\n        return ProxyFunction1;\n    }\n    // import Howl from '../../3rd_party/howler';\n    var audioControllerFactory = function() {\n        function AudioController1(audioFactory1) {\n            this.audios = [];\n            this.audioFactory = audioFactory1;\n            this._volume = 1;\n            this._isMuted = false;\n        }\n        AudioController1.prototype = {\n            addAudio: function addAudio1(audio1) {\n                this.audios.push(audio1);\n            },\n            pause: function pause1() {\n                var i3;\n                var len1 = this.audios.length;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    this.audios[i3].pause();\n                }\n            },\n            resume: function resume1() {\n                var i3;\n                var len1 = this.audios.length;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    this.audios[i3].resume();\n                }\n            },\n            setRate: function setRate1(rateValue1) {\n                var i3;\n                var len1 = this.audios.length;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    this.audios[i3].setRate(rateValue1);\n                }\n            },\n            createAudio: function createAudio1(assetPath1) {\n                if (this.audioFactory) {\n                    return this.audioFactory(assetPath1);\n                }\n                if (window.Howl) {\n                    return new window.Howl({\n                        src: [\n                            assetPath1\n                        ]\n                    });\n                }\n                return {\n                    isPlaying: false,\n                    play: function play1() {\n                        this.isPlaying = true;\n                    },\n                    seek: function seek1() {\n                        this.isPlaying = false;\n                    },\n                    playing: function playing1() {},\n                    rate: function rate1() {},\n                    setVolume: function setVolume1() {}\n                };\n            },\n            setAudioFactory: function setAudioFactory1(audioFactory1) {\n                this.audioFactory = audioFactory1;\n            },\n            setVolume: function setVolume1(value3) {\n                this._volume = value3;\n                this._updateVolume();\n            },\n            mute: function mute1() {\n                this._isMuted = true;\n                this._updateVolume();\n            },\n            unmute: function unmute1() {\n                this._isMuted = false;\n                this._updateVolume();\n            },\n            getVolume: function getVolume1() {\n                return this._volume;\n            },\n            _updateVolume: function _updateVolume1() {\n                var i3;\n                var len1 = this.audios.length;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    this.audios[i3].volume(this._volume * (this._isMuted ? 0 : 1));\n                }\n            }\n        };\n        return function() {\n            return new AudioController1();\n        };\n    }();\n    var createTypedArray = function() {\n        function createRegularArray1(type1, len1) {\n            var i3 = 0;\n            var arr3 = [];\n            var value3;\n            switch(type1){\n                case \"int16\":\n                case \"uint8c\":\n                    value3 = 1;\n                    break;\n                default:\n                    value3 = 1.1;\n                    break;\n            }\n            for(i3 = 0; i3 < len1; i3 += 1){\n                arr3.push(value3);\n            }\n            return arr3;\n        }\n        function createTypedArrayFactory1(type1, len1) {\n            if (type1 === \"float32\") {\n                return new Float32Array(len1);\n            }\n            if (type1 === \"int16\") {\n                return new Int16Array(len1);\n            }\n            if (type1 === \"uint8c\") {\n                return new Uint8ClampedArray(len1);\n            }\n            return createRegularArray1(type1, len1);\n        }\n        if (typeof Uint8ClampedArray === \"function\" && typeof Float32Array === \"function\") {\n            return createTypedArrayFactory1;\n        }\n        return createRegularArray1;\n    }();\n    function createSizedArray(len1) {\n        return Array.apply(null, {\n            length: len1\n        });\n    }\n    function _typeof$6(obj1) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof$6 = function _typeof1(obj1) {\n                return typeof obj1;\n            };\n        } else {\n            _typeof$6 = function _typeof1(obj1) {\n                return obj1 && typeof Symbol === \"function\" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? \"symbol\" : typeof obj1;\n            };\n        }\n        return _typeof$6(obj1);\n    }\n    var subframeEnabled = true;\n    var expressionsPlugin = null;\n    var expressionsInterfaces = null;\n    var idPrefix$1 = \"\";\n    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    var _shouldRoundValues = false;\n    var bmPow = Math.pow;\n    var bmSqrt = Math.sqrt;\n    var bmFloor = Math.floor;\n    var bmMax = Math.max;\n    var bmMin = Math.min;\n    var BMMath = {};\n    (function() {\n        var propertyNames1 = [\n            \"abs\",\n            \"acos\",\n            \"acosh\",\n            \"asin\",\n            \"asinh\",\n            \"atan\",\n            \"atanh\",\n            \"atan2\",\n            \"ceil\",\n            \"cbrt\",\n            \"expm1\",\n            \"clz32\",\n            \"cos\",\n            \"cosh\",\n            \"exp\",\n            \"floor\",\n            \"fround\",\n            \"hypot\",\n            \"imul\",\n            \"log\",\n            \"log1p\",\n            \"log2\",\n            \"log10\",\n            \"max\",\n            \"min\",\n            \"pow\",\n            \"random\",\n            \"round\",\n            \"sign\",\n            \"sin\",\n            \"sinh\",\n            \"sqrt\",\n            \"tan\",\n            \"tanh\",\n            \"trunc\",\n            \"E\",\n            \"LN10\",\n            \"LN2\",\n            \"LOG10E\",\n            \"LOG2E\",\n            \"PI\",\n            \"SQRT1_2\",\n            \"SQRT2\"\n        ];\n        var i3;\n        var len1 = propertyNames1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            BMMath[propertyNames1[i3]] = Math[propertyNames1[i3]];\n        }\n    })();\n    function ProjectInterface$1() {\n        return {};\n    }\n    BMMath.random = Math.random;\n    BMMath.abs = function(val3) {\n        var tOfVal1 = _typeof$6(val3);\n        if (tOfVal1 === \"object\" && val3.length) {\n            var absArr1 = createSizedArray(val3.length);\n            var i3;\n            var len1 = val3.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                absArr1[i3] = Math.abs(val3[i3]);\n            }\n            return absArr1;\n        }\n        return Math.abs(val3);\n    };\n    var defaultCurveSegments = 150;\n    var degToRads = Math.PI / 180;\n    var roundCorner = 0.5519;\n    function roundValues(flag1) {\n        _shouldRoundValues = !!flag1;\n    }\n    function bmRnd(value3) {\n        if (_shouldRoundValues) {\n            return Math.round(value3);\n        }\n        return value3;\n    }\n    function styleDiv(element1) {\n        element1.style.position = \"absolute\";\n        element1.style.top = 0;\n        element1.style.left = 0;\n        element1.style.display = \"block\";\n        element1.style.transformOrigin = \"0 0\";\n        element1.style.webkitTransformOrigin = \"0 0\";\n        element1.style.backfaceVisibility = \"visible\";\n        element1.style.webkitBackfaceVisibility = \"visible\";\n        element1.style.transformStyle = \"preserve-3d\";\n        element1.style.webkitTransformStyle = \"preserve-3d\";\n        element1.style.mozTransformStyle = \"preserve-3d\";\n    }\n    function BMEnterFrameEvent(type1, currentTime1, totalTime1, frameMultiplier1) {\n        this.type = type1;\n        this.currentTime = currentTime1;\n        this.totalTime = totalTime1;\n        this.direction = frameMultiplier1 < 0 ? -1 : 1;\n    }\n    function BMCompleteEvent(type1, frameMultiplier1) {\n        this.type = type1;\n        this.direction = frameMultiplier1 < 0 ? -1 : 1;\n    }\n    function BMCompleteLoopEvent(type1, totalLoops1, currentLoop1, frameMultiplier1) {\n        this.type = type1;\n        this.currentLoop = currentLoop1;\n        this.totalLoops = totalLoops1;\n        this.direction = frameMultiplier1 < 0 ? -1 : 1;\n    }\n    function BMSegmentStartEvent(type1, firstFrame1, totalFrames1) {\n        this.type = type1;\n        this.firstFrame = firstFrame1;\n        this.totalFrames = totalFrames1;\n    }\n    function BMDestroyEvent(type1, target1) {\n        this.type = type1;\n        this.target = target1;\n    }\n    function BMRenderFrameErrorEvent(nativeError1, currentTime1) {\n        this.type = \"renderFrameError\";\n        this.nativeError = nativeError1;\n        this.currentTime = currentTime1;\n    }\n    function BMConfigErrorEvent(nativeError1) {\n        this.type = \"configError\";\n        this.nativeError = nativeError1;\n    }\n    function BMAnimationConfigErrorEvent(type1, nativeError1) {\n        this.type = type1;\n        this.nativeError = nativeError1;\n    }\n    var createElementID = function() {\n        var _count1 = 0;\n        return function createID1() {\n            _count1 += 1;\n            return idPrefix$1 + \"__lottie_element_\" + _count1;\n        };\n    }();\n    function HSVtoRGB(h3, s4, v5) {\n        var r1;\n        var g3;\n        var b3;\n        var i3;\n        var f3;\n        var p6;\n        var q1;\n        var t3;\n        i3 = Math.floor(h3 * 6);\n        f3 = h3 * 6 - i3;\n        p6 = v5 * (1 - s4);\n        q1 = v5 * (1 - f3 * s4);\n        t3 = v5 * (1 - (1 - f3) * s4);\n        switch(i3 % 6){\n            case 0:\n                r1 = v5;\n                g3 = t3;\n                b3 = p6;\n                break;\n            case 1:\n                r1 = q1;\n                g3 = v5;\n                b3 = p6;\n                break;\n            case 2:\n                r1 = p6;\n                g3 = v5;\n                b3 = t3;\n                break;\n            case 3:\n                r1 = p6;\n                g3 = q1;\n                b3 = v5;\n                break;\n            case 4:\n                r1 = t3;\n                g3 = p6;\n                b3 = v5;\n                break;\n            case 5:\n                r1 = v5;\n                g3 = p6;\n                b3 = q1;\n                break;\n            default:\n                break;\n        }\n        return [\n            r1,\n            g3,\n            b3\n        ];\n    }\n    function RGBtoHSV(r1, g3, b3) {\n        var max1 = Math.max(r1, g3, b3);\n        var min1 = Math.min(r1, g3, b3);\n        var d3 = max1 - min1;\n        var h3;\n        var s4 = max1 === 0 ? 0 : d3 / max1;\n        var v5 = max1 / 255;\n        switch(max1){\n            case min1:\n                h3 = 0;\n                break;\n            case r1:\n                h3 = g3 - b3 + d3 * (g3 < b3 ? 6 : 0);\n                h3 /= 6 * d3;\n                break;\n            case g3:\n                h3 = b3 - r1 + d3 * 2;\n                h3 /= 6 * d3;\n                break;\n            case b3:\n                h3 = r1 - g3 + d3 * 4;\n                h3 /= 6 * d3;\n                break;\n            default:\n                break;\n        }\n        return [\n            h3,\n            s4,\n            v5\n        ];\n    }\n    function addSaturationToRGB(color4, offset1) {\n        var hsv1 = RGBtoHSV(color4[0] * 255, color4[1] * 255, color4[2] * 255);\n        hsv1[1] += offset1;\n        if (hsv1[1] > 1) {\n            hsv1[1] = 1;\n        } else if (hsv1[1] <= 0) {\n            hsv1[1] = 0;\n        }\n        return HSVtoRGB(hsv1[0], hsv1[1], hsv1[2]);\n    }\n    function addBrightnessToRGB(color4, offset1) {\n        var hsv1 = RGBtoHSV(color4[0] * 255, color4[1] * 255, color4[2] * 255);\n        hsv1[2] += offset1;\n        if (hsv1[2] > 1) {\n            hsv1[2] = 1;\n        } else if (hsv1[2] < 0) {\n            hsv1[2] = 0;\n        }\n        return HSVtoRGB(hsv1[0], hsv1[1], hsv1[2]);\n    }\n    function addHueToRGB(color4, offset1) {\n        var hsv1 = RGBtoHSV(color4[0] * 255, color4[1] * 255, color4[2] * 255);\n        hsv1[0] += offset1 / 360;\n        if (hsv1[0] > 1) {\n            hsv1[0] -= 1;\n        } else if (hsv1[0] < 0) {\n            hsv1[0] += 1;\n        }\n        return HSVtoRGB(hsv1[0], hsv1[1], hsv1[2]);\n    }\n    var rgbToHex = function() {\n        var colorMap1 = [];\n        var i3;\n        var hex1;\n        for(i3 = 0; i3 < 256; i3 += 1){\n            hex1 = i3.toString(16);\n            colorMap1[i3] = hex1.length === 1 ? \"0\" + hex1 : hex1;\n        }\n        return function(r1, g3, b3) {\n            if (r1 < 0) {\n                r1 = 0;\n            }\n            if (g3 < 0) {\n                g3 = 0;\n            }\n            if (b3 < 0) {\n                b3 = 0;\n            }\n            return \"#\" + colorMap1[r1] + colorMap1[g3] + colorMap1[b3];\n        };\n    }();\n    var setSubframeEnabled = function setSubframeEnabled1(flag1) {\n        subframeEnabled = !!flag1;\n    };\n    var getSubframeEnabled = function getSubframeEnabled1() {\n        return subframeEnabled;\n    };\n    var setExpressionsPlugin = function setExpressionsPlugin1(value3) {\n        expressionsPlugin = value3;\n    };\n    var getExpressionsPlugin = function getExpressionsPlugin1() {\n        return expressionsPlugin;\n    };\n    var setExpressionInterfaces = function setExpressionInterfaces1(value3) {\n        expressionsInterfaces = value3;\n    };\n    var getExpressionInterfaces = function getExpressionInterfaces1() {\n        return expressionsInterfaces;\n    };\n    var setDefaultCurveSegments = function setDefaultCurveSegments1(value3) {\n        defaultCurveSegments = value3;\n    };\n    var getDefaultCurveSegments = function getDefaultCurveSegments1() {\n        return defaultCurveSegments;\n    };\n    var setIdPrefix = function setIdPrefix1(value3) {\n        idPrefix$1 = value3;\n    };\n    var getIdPrefix = function getIdPrefix1() {\n        return idPrefix$1;\n    };\n    function createNS(type1) {\n        // return {appendChild:function(){},setAttribute:function(){},style:{}}\n        return document.createElementNS(svgNS, type1);\n    }\n    function _typeof$5(obj1) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof$5 = function _typeof1(obj1) {\n                return typeof obj1;\n            };\n        } else {\n            _typeof$5 = function _typeof1(obj1) {\n                return obj1 && typeof Symbol === \"function\" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? \"symbol\" : typeof obj1;\n            };\n        }\n        return _typeof$5(obj1);\n    }\n    var dataManager = function() {\n        var _counterId1 = 1;\n        var processes1 = [];\n        var workerFn1;\n        var workerInstance1;\n        var workerProxy1 = {\n            onmessage: function onmessage1() {},\n            postMessage: function postMessage1(path1) {\n                workerFn1({\n                    data: path1\n                });\n            }\n        };\n        var _workerSelf1 = {\n            postMessage: function postMessage1(data1) {\n                workerProxy1.onmessage({\n                    data: data1\n                });\n            }\n        };\n        function createWorker1(fn1) {\n            if (window.Worker && window.Blob && getWebWorker()) {\n                var blob1 = new Blob([\n                    \"var _workerSelf = self; self.onmessage = \",\n                    fn1.toString()\n                ], {\n                    type: \"text/javascript\"\n                }); // var blob = new Blob(['self.onmessage = ', fn.toString()], { type: 'text/javascript' });\n                var url1 = URL.createObjectURL(blob1);\n                return new Worker(url1);\n            }\n            workerFn1 = fn1;\n            return workerProxy1;\n        }\n        function setupWorker1() {\n            if (!workerInstance1) {\n                workerInstance1 = createWorker1(function workerStart1(e3) {\n                    function dataFunctionManager1() {\n                        function completeLayers1(layers1, comps1) {\n                            var layerData1;\n                            var i3;\n                            var len1 = layers1.length;\n                            var j3;\n                            var jLen1;\n                            var k3;\n                            var kLen1;\n                            for(i3 = 0; i3 < len1; i3 += 1){\n                                layerData1 = layers1[i3];\n                                if (\"ks\" in layerData1 && !layerData1.completed) {\n                                    layerData1.completed = true;\n                                    if (layerData1.hasMask) {\n                                        var maskProps1 = layerData1.masksProperties;\n                                        jLen1 = maskProps1.length;\n                                        for(j3 = 0; j3 < jLen1; j3 += 1){\n                                            if (maskProps1[j3].pt.k.i) {\n                                                convertPathsToAbsoluteValues1(maskProps1[j3].pt.k);\n                                            } else {\n                                                kLen1 = maskProps1[j3].pt.k.length;\n                                                for(k3 = 0; k3 < kLen1; k3 += 1){\n                                                    if (maskProps1[j3].pt.k[k3].s) {\n                                                        convertPathsToAbsoluteValues1(maskProps1[j3].pt.k[k3].s[0]);\n                                                    }\n                                                    if (maskProps1[j3].pt.k[k3].e) {\n                                                        convertPathsToAbsoluteValues1(maskProps1[j3].pt.k[k3].e[0]);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if (layerData1.ty === 0) {\n                                        layerData1.layers = findCompLayers1(layerData1.refId, comps1);\n                                        completeLayers1(layerData1.layers, comps1);\n                                    } else if (layerData1.ty === 4) {\n                                        completeShapes1(layerData1.shapes);\n                                    } else if (layerData1.ty === 5) {\n                                        completeText1(layerData1);\n                                    }\n                                }\n                            }\n                        }\n                        function completeChars1(chars1, assets1) {\n                            if (chars1) {\n                                var i3 = 0;\n                                var len1 = chars1.length;\n                                for(i3 = 0; i3 < len1; i3 += 1){\n                                    if (chars1[i3].t === 1) {\n                                        // var compData = findComp(chars[i].data.refId, assets);\n                                        chars1[i3].data.layers = findCompLayers1(chars1[i3].data.refId, assets1); // chars[i].data.ip = 0;\n                                        // chars[i].data.op = 99999;\n                                        // chars[i].data.st = 0;\n                                        // chars[i].data.sr = 1;\n                                        // chars[i].w = compData.w;\n                                        // chars[i].data.ks = {\n                                        //   a: { k: [0, 0, 0], a: 0 },\n                                        //   p: { k: [0, -compData.h, 0], a: 0 },\n                                        //   r: { k: 0, a: 0 },\n                                        //   s: { k: [100, 100], a: 0 },\n                                        //   o: { k: 100, a: 0 },\n                                        // };\n                                        completeLayers1(chars1[i3].data.layers, assets1);\n                                    }\n                                }\n                            }\n                        }\n                        function findComp1(id1, comps1) {\n                            var i3 = 0;\n                            var len1 = comps1.length;\n                            while(i3 < len1){\n                                if (comps1[i3].id === id1) {\n                                    return comps1[i3];\n                                }\n                                i3 += 1;\n                            }\n                            return null;\n                        }\n                        function findCompLayers1(id1, comps1) {\n                            var comp1 = findComp1(id1, comps1);\n                            if (comp1) {\n                                if (!comp1.layers.__used) {\n                                    comp1.layers.__used = true;\n                                    return comp1.layers;\n                                }\n                                return JSON.parse(JSON.stringify(comp1.layers));\n                            }\n                            return null;\n                        }\n                        function completeShapes1(arr3) {\n                            var i3;\n                            var len1 = arr3.length;\n                            var j3;\n                            var jLen1;\n                            for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n                                if (arr3[i3].ty === \"sh\") {\n                                    if (arr3[i3].ks.k.i) {\n                                        convertPathsToAbsoluteValues1(arr3[i3].ks.k);\n                                    } else {\n                                        jLen1 = arr3[i3].ks.k.length;\n                                        for(j3 = 0; j3 < jLen1; j3 += 1){\n                                            if (arr3[i3].ks.k[j3].s) {\n                                                convertPathsToAbsoluteValues1(arr3[i3].ks.k[j3].s[0]);\n                                            }\n                                            if (arr3[i3].ks.k[j3].e) {\n                                                convertPathsToAbsoluteValues1(arr3[i3].ks.k[j3].e[0]);\n                                            }\n                                        }\n                                    }\n                                } else if (arr3[i3].ty === \"gr\") {\n                                    completeShapes1(arr3[i3].it);\n                                }\n                            }\n                        }\n                        function convertPathsToAbsoluteValues1(path1) {\n                            var i3;\n                            var len1 = path1.i.length;\n                            for(i3 = 0; i3 < len1; i3 += 1){\n                                path1.i[i3][0] += path1.v[i3][0];\n                                path1.i[i3][1] += path1.v[i3][1];\n                                path1.o[i3][0] += path1.v[i3][0];\n                                path1.o[i3][1] += path1.v[i3][1];\n                            }\n                        }\n                        function checkVersion1(minimum1, animVersionString1) {\n                            var animVersion1 = animVersionString1 ? animVersionString1.split(\".\") : [\n                                100,\n                                100,\n                                100\n                            ];\n                            if (minimum1[0] > animVersion1[0]) {\n                                return true;\n                            }\n                            if (animVersion1[0] > minimum1[0]) {\n                                return false;\n                            }\n                            if (minimum1[1] > animVersion1[1]) {\n                                return true;\n                            }\n                            if (animVersion1[1] > minimum1[1]) {\n                                return false;\n                            }\n                            if (minimum1[2] > animVersion1[2]) {\n                                return true;\n                            }\n                            if (animVersion1[2] > minimum1[2]) {\n                                return false;\n                            }\n                            return null;\n                        }\n                        var checkText1 = function() {\n                            var minimumVersion1 = [\n                                4,\n                                4,\n                                14\n                            ];\n                            function updateTextLayer1(textLayer1) {\n                                var documentData1 = textLayer1.t.d;\n                                textLayer1.t.d = {\n                                    k: [\n                                        {\n                                            s: documentData1,\n                                            t: 0\n                                        }\n                                    ]\n                                };\n                            }\n                            function iterateLayers1(layers1) {\n                                var i3;\n                                var len1 = layers1.length;\n                                for(i3 = 0; i3 < len1; i3 += 1){\n                                    if (layers1[i3].ty === 5) {\n                                        updateTextLayer1(layers1[i3]);\n                                    }\n                                }\n                            }\n                            return function(animationData1) {\n                                if (checkVersion1(minimumVersion1, animationData1.v)) {\n                                    iterateLayers1(animationData1.layers);\n                                    if (animationData1.assets) {\n                                        var i3;\n                                        var len1 = animationData1.assets.length;\n                                        for(i3 = 0; i3 < len1; i3 += 1){\n                                            if (animationData1.assets[i3].layers) {\n                                                iterateLayers1(animationData1.assets[i3].layers);\n                                            }\n                                        }\n                                    }\n                                }\n                            };\n                        }();\n                        var checkChars1 = function() {\n                            var minimumVersion1 = [\n                                4,\n                                7,\n                                99\n                            ];\n                            return function(animationData1) {\n                                if (animationData1.chars && !checkVersion1(minimumVersion1, animationData1.v)) {\n                                    var i3;\n                                    var len1 = animationData1.chars.length;\n                                    for(i3 = 0; i3 < len1; i3 += 1){\n                                        var charData1 = animationData1.chars[i3];\n                                        if (charData1.data && charData1.data.shapes) {\n                                            completeShapes1(charData1.data.shapes);\n                                            charData1.data.ip = 0;\n                                            charData1.data.op = 99999;\n                                            charData1.data.st = 0;\n                                            charData1.data.sr = 1;\n                                            charData1.data.ks = {\n                                                p: {\n                                                    k: [\n                                                        0,\n                                                        0\n                                                    ],\n                                                    a: 0\n                                                },\n                                                s: {\n                                                    k: [\n                                                        100,\n                                                        100\n                                                    ],\n                                                    a: 0\n                                                },\n                                                a: {\n                                                    k: [\n                                                        0,\n                                                        0\n                                                    ],\n                                                    a: 0\n                                                },\n                                                r: {\n                                                    k: 0,\n                                                    a: 0\n                                                },\n                                                o: {\n                                                    k: 100,\n                                                    a: 0\n                                                }\n                                            };\n                                            if (!animationData1.chars[i3].t) {\n                                                charData1.data.shapes.push({\n                                                    ty: \"no\"\n                                                });\n                                                charData1.data.shapes[0].it.push({\n                                                    p: {\n                                                        k: [\n                                                            0,\n                                                            0\n                                                        ],\n                                                        a: 0\n                                                    },\n                                                    s: {\n                                                        k: [\n                                                            100,\n                                                            100\n                                                        ],\n                                                        a: 0\n                                                    },\n                                                    a: {\n                                                        k: [\n                                                            0,\n                                                            0\n                                                        ],\n                                                        a: 0\n                                                    },\n                                                    r: {\n                                                        k: 0,\n                                                        a: 0\n                                                    },\n                                                    o: {\n                                                        k: 100,\n                                                        a: 0\n                                                    },\n                                                    sk: {\n                                                        k: 0,\n                                                        a: 0\n                                                    },\n                                                    sa: {\n                                                        k: 0,\n                                                        a: 0\n                                                    },\n                                                    ty: \"tr\"\n                                                });\n                                            }\n                                        }\n                                    }\n                                }\n                            };\n                        }();\n                        var checkPathProperties1 = function() {\n                            var minimumVersion1 = [\n                                5,\n                                7,\n                                15\n                            ];\n                            function updateTextLayer1(textLayer1) {\n                                var pathData1 = textLayer1.t.p;\n                                if (typeof pathData1.a === \"number\") {\n                                    pathData1.a = {\n                                        a: 0,\n                                        k: pathData1.a\n                                    };\n                                }\n                                if (typeof pathData1.p === \"number\") {\n                                    pathData1.p = {\n                                        a: 0,\n                                        k: pathData1.p\n                                    };\n                                }\n                                if (typeof pathData1.r === \"number\") {\n                                    pathData1.r = {\n                                        a: 0,\n                                        k: pathData1.r\n                                    };\n                                }\n                            }\n                            function iterateLayers1(layers1) {\n                                var i3;\n                                var len1 = layers1.length;\n                                for(i3 = 0; i3 < len1; i3 += 1){\n                                    if (layers1[i3].ty === 5) {\n                                        updateTextLayer1(layers1[i3]);\n                                    }\n                                }\n                            }\n                            return function(animationData1) {\n                                if (checkVersion1(minimumVersion1, animationData1.v)) {\n                                    iterateLayers1(animationData1.layers);\n                                    if (animationData1.assets) {\n                                        var i3;\n                                        var len1 = animationData1.assets.length;\n                                        for(i3 = 0; i3 < len1; i3 += 1){\n                                            if (animationData1.assets[i3].layers) {\n                                                iterateLayers1(animationData1.assets[i3].layers);\n                                            }\n                                        }\n                                    }\n                                }\n                            };\n                        }();\n                        var checkColors1 = function() {\n                            var minimumVersion1 = [\n                                4,\n                                1,\n                                9\n                            ];\n                            function iterateShapes1(shapes1) {\n                                var i3;\n                                var len1 = shapes1.length;\n                                var j3;\n                                var jLen1;\n                                for(i3 = 0; i3 < len1; i3 += 1){\n                                    if (shapes1[i3].ty === \"gr\") {\n                                        iterateShapes1(shapes1[i3].it);\n                                    } else if (shapes1[i3].ty === \"fl\" || shapes1[i3].ty === \"st\") {\n                                        if (shapes1[i3].c.k && shapes1[i3].c.k[0].i) {\n                                            jLen1 = shapes1[i3].c.k.length;\n                                            for(j3 = 0; j3 < jLen1; j3 += 1){\n                                                if (shapes1[i3].c.k[j3].s) {\n                                                    shapes1[i3].c.k[j3].s[0] /= 255;\n                                                    shapes1[i3].c.k[j3].s[1] /= 255;\n                                                    shapes1[i3].c.k[j3].s[2] /= 255;\n                                                    shapes1[i3].c.k[j3].s[3] /= 255;\n                                                }\n                                                if (shapes1[i3].c.k[j3].e) {\n                                                    shapes1[i3].c.k[j3].e[0] /= 255;\n                                                    shapes1[i3].c.k[j3].e[1] /= 255;\n                                                    shapes1[i3].c.k[j3].e[2] /= 255;\n                                                    shapes1[i3].c.k[j3].e[3] /= 255;\n                                                }\n                                            }\n                                        } else {\n                                            shapes1[i3].c.k[0] /= 255;\n                                            shapes1[i3].c.k[1] /= 255;\n                                            shapes1[i3].c.k[2] /= 255;\n                                            shapes1[i3].c.k[3] /= 255;\n                                        }\n                                    }\n                                }\n                            }\n                            function iterateLayers1(layers1) {\n                                var i3;\n                                var len1 = layers1.length;\n                                for(i3 = 0; i3 < len1; i3 += 1){\n                                    if (layers1[i3].ty === 4) {\n                                        iterateShapes1(layers1[i3].shapes);\n                                    }\n                                }\n                            }\n                            return function(animationData1) {\n                                if (checkVersion1(minimumVersion1, animationData1.v)) {\n                                    iterateLayers1(animationData1.layers);\n                                    if (animationData1.assets) {\n                                        var i3;\n                                        var len1 = animationData1.assets.length;\n                                        for(i3 = 0; i3 < len1; i3 += 1){\n                                            if (animationData1.assets[i3].layers) {\n                                                iterateLayers1(animationData1.assets[i3].layers);\n                                            }\n                                        }\n                                    }\n                                }\n                            };\n                        }();\n                        var checkShapes1 = function() {\n                            var minimumVersion1 = [\n                                4,\n                                4,\n                                18\n                            ];\n                            function completeClosingShapes1(arr3) {\n                                var i3;\n                                var len1 = arr3.length;\n                                var j3;\n                                var jLen1;\n                                for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n                                    if (arr3[i3].ty === \"sh\") {\n                                        if (arr3[i3].ks.k.i) {\n                                            arr3[i3].ks.k.c = arr3[i3].closed;\n                                        } else {\n                                            jLen1 = arr3[i3].ks.k.length;\n                                            for(j3 = 0; j3 < jLen1; j3 += 1){\n                                                if (arr3[i3].ks.k[j3].s) {\n                                                    arr3[i3].ks.k[j3].s[0].c = arr3[i3].closed;\n                                                }\n                                                if (arr3[i3].ks.k[j3].e) {\n                                                    arr3[i3].ks.k[j3].e[0].c = arr3[i3].closed;\n                                                }\n                                            }\n                                        }\n                                    } else if (arr3[i3].ty === \"gr\") {\n                                        completeClosingShapes1(arr3[i3].it);\n                                    }\n                                }\n                            }\n                            function iterateLayers1(layers1) {\n                                var layerData1;\n                                var i3;\n                                var len1 = layers1.length;\n                                var j3;\n                                var jLen1;\n                                var k3;\n                                var kLen1;\n                                for(i3 = 0; i3 < len1; i3 += 1){\n                                    layerData1 = layers1[i3];\n                                    if (layerData1.hasMask) {\n                                        var maskProps1 = layerData1.masksProperties;\n                                        jLen1 = maskProps1.length;\n                                        for(j3 = 0; j3 < jLen1; j3 += 1){\n                                            if (maskProps1[j3].pt.k.i) {\n                                                maskProps1[j3].pt.k.c = maskProps1[j3].cl;\n                                            } else {\n                                                kLen1 = maskProps1[j3].pt.k.length;\n                                                for(k3 = 0; k3 < kLen1; k3 += 1){\n                                                    if (maskProps1[j3].pt.k[k3].s) {\n                                                        maskProps1[j3].pt.k[k3].s[0].c = maskProps1[j3].cl;\n                                                    }\n                                                    if (maskProps1[j3].pt.k[k3].e) {\n                                                        maskProps1[j3].pt.k[k3].e[0].c = maskProps1[j3].cl;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if (layerData1.ty === 4) {\n                                        completeClosingShapes1(layerData1.shapes);\n                                    }\n                                }\n                            }\n                            return function(animationData1) {\n                                if (checkVersion1(minimumVersion1, animationData1.v)) {\n                                    iterateLayers1(animationData1.layers);\n                                    if (animationData1.assets) {\n                                        var i3;\n                                        var len1 = animationData1.assets.length;\n                                        for(i3 = 0; i3 < len1; i3 += 1){\n                                            if (animationData1.assets[i3].layers) {\n                                                iterateLayers1(animationData1.assets[i3].layers);\n                                            }\n                                        }\n                                    }\n                                }\n                            };\n                        }();\n                        function completeData1(animationData1) {\n                            if (animationData1.__complete) {\n                                return;\n                            }\n                            checkColors1(animationData1);\n                            checkText1(animationData1);\n                            checkChars1(animationData1);\n                            checkPathProperties1(animationData1);\n                            checkShapes1(animationData1);\n                            completeLayers1(animationData1.layers, animationData1.assets);\n                            completeChars1(animationData1.chars, animationData1.assets);\n                            animationData1.__complete = true;\n                        }\n                        function completeText1(data1) {\n                            if (data1.t.a.length === 0 && !(\"m\" in data1.t.p)) {}\n                        }\n                        var moduleOb1 = {};\n                        moduleOb1.completeData = completeData1;\n                        moduleOb1.checkColors = checkColors1;\n                        moduleOb1.checkChars = checkChars1;\n                        moduleOb1.checkPathProperties = checkPathProperties1;\n                        moduleOb1.checkShapes = checkShapes1;\n                        moduleOb1.completeLayers = completeLayers1;\n                        return moduleOb1;\n                    }\n                    if (!_workerSelf1.dataManager) {\n                        _workerSelf1.dataManager = dataFunctionManager1();\n                    }\n                    if (!_workerSelf1.assetLoader) {\n                        _workerSelf1.assetLoader = function() {\n                            function formatResponse1(xhr1) {\n                                // using typeof doubles the time of execution of this method,\n                                // so if available, it's better to use the header to validate the type\n                                var contentTypeHeader1 = xhr1.getResponseHeader(\"content-type\");\n                                if (contentTypeHeader1 && xhr1.responseType === \"json\" && contentTypeHeader1.indexOf(\"json\") !== -1) {\n                                    return xhr1.response;\n                                }\n                                if (xhr1.response && _typeof$5(xhr1.response) === \"object\") {\n                                    return xhr1.response;\n                                }\n                                if (xhr1.response && typeof xhr1.response === \"string\") {\n                                    return JSON.parse(xhr1.response);\n                                }\n                                if (xhr1.responseText) {\n                                    return JSON.parse(xhr1.responseText);\n                                }\n                                return null;\n                            }\n                            function loadAsset1(path1, fullPath1, callback1, errorCallback1) {\n                                var response1;\n                                var xhr1 = new XMLHttpRequest(); // set responseType after calling open or IE will break.\n                                try {\n                                    // This crashes on Android WebView prior to KitKat\n                                    xhr1.responseType = \"json\";\n                                } catch (err1) {} // eslint-disable-line no-empty\n                                xhr1.onreadystatechange = function() {\n                                    if (xhr1.readyState === 4) {\n                                        if (xhr1.status === 200) {\n                                            response1 = formatResponse1(xhr1);\n                                            callback1(response1);\n                                        } else {\n                                            try {\n                                                response1 = formatResponse1(xhr1);\n                                                callback1(response1);\n                                            } catch (err1) {\n                                                if (errorCallback1) {\n                                                    errorCallback1(err1);\n                                                }\n                                            }\n                                        }\n                                    }\n                                };\n                                try {\n                                    // Hack to workaround banner validation\n                                    xhr1.open([\n                                        \"G\",\n                                        \"E\",\n                                        \"T\"\n                                    ].join(\"\"), path1, true);\n                                } catch (error1) {\n                                    // Hack to workaround banner validation\n                                    xhr1.open([\n                                        \"G\",\n                                        \"E\",\n                                        \"T\"\n                                    ].join(\"\"), fullPath1 + \"/\" + path1, true);\n                                }\n                                xhr1.send();\n                            }\n                            return {\n                                load: loadAsset1\n                            };\n                        }();\n                    }\n                    if (e3.data.type === \"loadAnimation\") {\n                        _workerSelf1.assetLoader.load(e3.data.path, e3.data.fullPath, function(data1) {\n                            _workerSelf1.dataManager.completeData(data1);\n                            _workerSelf1.postMessage({\n                                id: e3.data.id,\n                                payload: data1,\n                                status: \"success\"\n                            });\n                        }, function() {\n                            _workerSelf1.postMessage({\n                                id: e3.data.id,\n                                status: \"error\"\n                            });\n                        });\n                    } else if (e3.data.type === \"complete\") {\n                        var animation1 = e3.data.animation;\n                        _workerSelf1.dataManager.completeData(animation1);\n                        _workerSelf1.postMessage({\n                            id: e3.data.id,\n                            payload: animation1,\n                            status: \"success\"\n                        });\n                    } else if (e3.data.type === \"loadData\") {\n                        _workerSelf1.assetLoader.load(e3.data.path, e3.data.fullPath, function(data1) {\n                            _workerSelf1.postMessage({\n                                id: e3.data.id,\n                                payload: data1,\n                                status: \"success\"\n                            });\n                        }, function() {\n                            _workerSelf1.postMessage({\n                                id: e3.data.id,\n                                status: \"error\"\n                            });\n                        });\n                    }\n                });\n                workerInstance1.onmessage = function(event1) {\n                    var data1 = event1.data;\n                    var id1 = data1.id;\n                    var process1 = processes1[id1];\n                    processes1[id1] = null;\n                    if (data1.status === \"success\") {\n                        process1.onComplete(data1.payload);\n                    } else if (process1.onError) {\n                        process1.onError();\n                    }\n                };\n            }\n        }\n        function createProcess1(onComplete1, onError1) {\n            _counterId1 += 1;\n            var id1 = \"processId_\" + _counterId1;\n            processes1[id1] = {\n                onComplete: onComplete1,\n                onError: onError1\n            };\n            return id1;\n        }\n        function loadAnimation1(path1, onComplete1, onError1) {\n            setupWorker1();\n            var processId1 = createProcess1(onComplete1, onError1);\n            workerInstance1.postMessage({\n                type: \"loadAnimation\",\n                path: path1,\n                fullPath: window.location.origin + window.location.pathname,\n                id: processId1\n            });\n        }\n        function loadData1(path1, onComplete1, onError1) {\n            setupWorker1();\n            var processId1 = createProcess1(onComplete1, onError1);\n            workerInstance1.postMessage({\n                type: \"loadData\",\n                path: path1,\n                fullPath: window.location.origin + window.location.pathname,\n                id: processId1\n            });\n        }\n        function completeAnimation1(anim1, onComplete1, onError1) {\n            setupWorker1();\n            var processId1 = createProcess1(onComplete1, onError1);\n            workerInstance1.postMessage({\n                type: \"complete\",\n                animation: anim1,\n                id: processId1\n            });\n        }\n        return {\n            loadAnimation: loadAnimation1,\n            loadData: loadData1,\n            completeAnimation: completeAnimation1\n        };\n    }();\n    var ImagePreloader = function() {\n        var proxyImage1 = function() {\n            var canvas1 = createTag(\"canvas\");\n            canvas1.width = 1;\n            canvas1.height = 1;\n            var ctx1 = canvas1.getContext(\"2d\");\n            ctx1.fillStyle = \"rgba(0,0,0,0)\";\n            ctx1.fillRect(0, 0, 1, 1);\n            return canvas1;\n        }();\n        function imageLoaded1() {\n            this.loadedAssets += 1;\n            if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {\n                if (this.imagesLoadedCb) {\n                    this.imagesLoadedCb(null);\n                }\n            }\n        }\n        function footageLoaded1() {\n            this.loadedFootagesCount += 1;\n            if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {\n                if (this.imagesLoadedCb) {\n                    this.imagesLoadedCb(null);\n                }\n            }\n        }\n        function getAssetsPath1(assetData1, assetsPath1, originalPath1) {\n            var path1 = \"\";\n            if (assetData1.e) {\n                path1 = assetData1.p;\n            } else if (assetsPath1) {\n                var imagePath1 = assetData1.p;\n                if (imagePath1.indexOf(\"images/\") !== -1) {\n                    imagePath1 = imagePath1.split(\"/\")[1];\n                }\n                path1 = assetsPath1 + imagePath1;\n            } else {\n                path1 = originalPath1;\n                path1 += assetData1.u ? assetData1.u : \"\";\n                path1 += assetData1.p;\n            }\n            return path1;\n        }\n        function testImageLoaded1(img1) {\n            var _count1 = 0;\n            var intervalId1 = setInterval((function() {\n                var box1 = img1.getBBox();\n                if (box1.width || _count1 > 500) {\n                    this._imageLoaded();\n                    clearInterval(intervalId1);\n                }\n                _count1 += 1;\n            }).bind(this), 50);\n        }\n        function createImageData1(assetData1) {\n            var path1 = getAssetsPath1(assetData1, this.assetsPath, this.path);\n            var img1 = createNS(\"image\");\n            if (isSafari) {\n                this.testImageLoaded(img1);\n            } else {\n                img1.addEventListener(\"load\", this._imageLoaded, false);\n            }\n            img1.addEventListener(\"error\", (function() {\n                ob1.img = proxyImage1;\n                this._imageLoaded();\n            }).bind(this), false);\n            img1.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", path1);\n            if (this._elementHelper.append) {\n                this._elementHelper.append(img1);\n            } else {\n                this._elementHelper.appendChild(img1);\n            }\n            var ob1 = {\n                img: img1,\n                assetData: assetData1\n            };\n            return ob1;\n        }\n        function createImgData1(assetData1) {\n            var path1 = getAssetsPath1(assetData1, this.assetsPath, this.path);\n            var img1 = createTag(\"img\");\n            img1.crossOrigin = \"anonymous\";\n            img1.addEventListener(\"load\", this._imageLoaded, false);\n            img1.addEventListener(\"error\", (function() {\n                ob1.img = proxyImage1;\n                this._imageLoaded();\n            }).bind(this), false);\n            img1.src = path1;\n            var ob1 = {\n                img: img1,\n                assetData: assetData1\n            };\n            return ob1;\n        }\n        function createFootageData1(data1) {\n            var ob1 = {\n                assetData: data1\n            };\n            var path1 = getAssetsPath1(data1, this.assetsPath, this.path);\n            dataManager.loadData(path1, (function(footageData1) {\n                ob1.img = footageData1;\n                this._footageLoaded();\n            }).bind(this), (function() {\n                ob1.img = {};\n                this._footageLoaded();\n            }).bind(this));\n            return ob1;\n        }\n        function loadAssets1(assets1, cb1) {\n            this.imagesLoadedCb = cb1;\n            var i3;\n            var len1 = assets1.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                if (!assets1[i3].layers) {\n                    if (!assets1[i3].t || assets1[i3].t === \"seq\") {\n                        this.totalImages += 1;\n                        this.images.push(this._createImageData(assets1[i3]));\n                    } else if (assets1[i3].t === 3) {\n                        this.totalFootages += 1;\n                        this.images.push(this.createFootageData(assets1[i3]));\n                    }\n                }\n            }\n        }\n        function setPath1(path1) {\n            this.path = path1 || \"\";\n        }\n        function setAssetsPath1(path1) {\n            this.assetsPath = path1 || \"\";\n        }\n        function getAsset1(assetData1) {\n            var i3 = 0;\n            var len1 = this.images.length;\n            while(i3 < len1){\n                if (this.images[i3].assetData === assetData1) {\n                    return this.images[i3].img;\n                }\n                i3 += 1;\n            }\n            return null;\n        }\n        function destroy1() {\n            this.imagesLoadedCb = null;\n            this.images.length = 0;\n        }\n        function loadedImages1() {\n            return this.totalImages === this.loadedAssets;\n        }\n        function loadedFootages1() {\n            return this.totalFootages === this.loadedFootagesCount;\n        }\n        function setCacheType1(type1, elementHelper1) {\n            if (type1 === \"svg\") {\n                this._elementHelper = elementHelper1;\n                this._createImageData = this.createImageData.bind(this);\n            } else {\n                this._createImageData = this.createImgData.bind(this);\n            }\n        }\n        function ImagePreloaderFactory1() {\n            this._imageLoaded = imageLoaded1.bind(this);\n            this._footageLoaded = footageLoaded1.bind(this);\n            this.testImageLoaded = testImageLoaded1.bind(this);\n            this.createFootageData = createFootageData1.bind(this);\n            this.assetsPath = \"\";\n            this.path = \"\";\n            this.totalImages = 0;\n            this.totalFootages = 0;\n            this.loadedAssets = 0;\n            this.loadedFootagesCount = 0;\n            this.imagesLoadedCb = null;\n            this.images = [];\n        }\n        ImagePreloaderFactory1.prototype = {\n            loadAssets: loadAssets1,\n            setAssetsPath: setAssetsPath1,\n            setPath: setPath1,\n            loadedImages: loadedImages1,\n            loadedFootages: loadedFootages1,\n            destroy: destroy1,\n            getAsset: getAsset1,\n            createImgData: createImgData1,\n            createImageData: createImageData1,\n            imageLoaded: imageLoaded1,\n            footageLoaded: footageLoaded1,\n            setCacheType: setCacheType1\n        };\n        return ImagePreloaderFactory1;\n    }();\n    function BaseEvent() {}\n    BaseEvent.prototype = {\n        triggerEvent: function triggerEvent1(eventName1, args1) {\n            if (this._cbs[eventName1]) {\n                var callbacks1 = this._cbs[eventName1];\n                for(var i3 = 0; i3 < callbacks1.length; i3 += 1){\n                    callbacks1[i3](args1);\n                }\n            }\n        },\n        addEventListener: function addEventListener1(eventName1, callback1) {\n            if (!this._cbs[eventName1]) {\n                this._cbs[eventName1] = [];\n            }\n            this._cbs[eventName1].push(callback1);\n            return (function() {\n                this.removeEventListener(eventName1, callback1);\n            }).bind(this);\n        },\n        removeEventListener: function removeEventListener1(eventName1, callback1) {\n            if (!callback1) {\n                this._cbs[eventName1] = null;\n            } else if (this._cbs[eventName1]) {\n                var i3 = 0;\n                var len1 = this._cbs[eventName1].length;\n                while(i3 < len1){\n                    if (this._cbs[eventName1][i3] === callback1) {\n                        this._cbs[eventName1].splice(i3, 1);\n                        i3 -= 1;\n                        len1 -= 1;\n                    }\n                    i3 += 1;\n                }\n                if (!this._cbs[eventName1].length) {\n                    this._cbs[eventName1] = null;\n                }\n            }\n        }\n    };\n    var markerParser = function() {\n        function parsePayloadLines1(payload1) {\n            var lines1 = payload1.split(\"\\r\\n\");\n            var keys1 = {};\n            var line1;\n            var keysCount1 = 0;\n            for(var i3 = 0; i3 < lines1.length; i3 += 1){\n                line1 = lines1[i3].split(\":\");\n                if (line1.length === 2) {\n                    keys1[line1[0]] = line1[1].trim();\n                    keysCount1 += 1;\n                }\n            }\n            if (keysCount1 === 0) {\n                throw new Error();\n            }\n            return keys1;\n        }\n        return function(_markers1) {\n            var markers1 = [];\n            for(var i3 = 0; i3 < _markers1.length; i3 += 1){\n                var _marker1 = _markers1[i3];\n                var markerData1 = {\n                    time: _marker1.tm,\n                    duration: _marker1.dr\n                };\n                try {\n                    markerData1.payload = JSON.parse(_markers1[i3].cm);\n                } catch (_1) {\n                    try {\n                        markerData1.payload = parsePayloadLines1(_markers1[i3].cm);\n                    } catch (__1) {\n                        markerData1.payload = {\n                            name: _markers1[i3].cm\n                        };\n                    }\n                }\n                markers1.push(markerData1);\n            }\n            return markers1;\n        };\n    }();\n    var ProjectInterface = function() {\n        function registerComposition1(comp1) {\n            this.compositions.push(comp1);\n        }\n        return function() {\n            function _thisProjectFunction1(name1) {\n                var i3 = 0;\n                var len1 = this.compositions.length;\n                while(i3 < len1){\n                    if (this.compositions[i3].data && this.compositions[i3].data.nm === name1) {\n                        if (this.compositions[i3].prepareFrame && this.compositions[i3].data.xt) {\n                            this.compositions[i3].prepareFrame(this.currentFrame);\n                        }\n                        return this.compositions[i3].compInterface;\n                    }\n                    i3 += 1;\n                }\n                return null;\n            }\n            _thisProjectFunction1.compositions = [];\n            _thisProjectFunction1.currentFrame = 0;\n            _thisProjectFunction1.registerComposition = registerComposition1;\n            return _thisProjectFunction1;\n        };\n    }();\n    var renderers = {};\n    var registerRenderer = function registerRenderer1(key1, value3) {\n        renderers[key1] = value3;\n    };\n    function getRenderer(key1) {\n        return renderers[key1];\n    }\n    function getRegisteredRenderer() {\n        // Returns canvas by default for compatibility\n        if (renderers.canvas) {\n            return \"canvas\";\n        } // Returns any renderer that is registered\n        for(var key1 in renderers){\n            if (renderers[key1]) {\n                return key1;\n            }\n        }\n        return \"\";\n    }\n    function _typeof$4(obj1) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof$4 = function _typeof1(obj1) {\n                return typeof obj1;\n            };\n        } else {\n            _typeof$4 = function _typeof1(obj1) {\n                return obj1 && typeof Symbol === \"function\" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? \"symbol\" : typeof obj1;\n            };\n        }\n        return _typeof$4(obj1);\n    }\n    var AnimationItem = function AnimationItem1() {\n        this._cbs = [];\n        this.name = \"\";\n        this.path = \"\";\n        this.isLoaded = false;\n        this.currentFrame = 0;\n        this.currentRawFrame = 0;\n        this.firstFrame = 0;\n        this.totalFrames = 0;\n        this.frameRate = 0;\n        this.frameMult = 0;\n        this.playSpeed = 1;\n        this.playDirection = 1;\n        this.playCount = 0;\n        this.animationData = {};\n        this.assets = [];\n        this.isPaused = true;\n        this.autoplay = false;\n        this.loop = true;\n        this.renderer = null;\n        this.animationID = createElementID();\n        this.assetsPath = \"\";\n        this.timeCompleted = 0;\n        this.segmentPos = 0;\n        this.isSubframeEnabled = getSubframeEnabled();\n        this.segments = [];\n        this._idle = true;\n        this._completedLoop = false;\n        this.projectInterface = ProjectInterface();\n        this.imagePreloader = new ImagePreloader();\n        this.audioController = audioControllerFactory();\n        this.markers = [];\n        this.configAnimation = this.configAnimation.bind(this);\n        this.onSetupError = this.onSetupError.bind(this);\n        this.onSegmentComplete = this.onSegmentComplete.bind(this);\n        this.drawnFrameEvent = new BMEnterFrameEvent(\"drawnFrame\", 0, 0, 0);\n        this.expressionsPlugin = getExpressionsPlugin();\n    };\n    extendPrototype([\n        BaseEvent\n    ], AnimationItem);\n    AnimationItem.prototype.setParams = function(params1) {\n        if (params1.wrapper || params1.container) {\n            this.wrapper = params1.wrapper || params1.container;\n        }\n        var animType1 = \"svg\";\n        if (params1.animType) {\n            animType1 = params1.animType;\n        } else if (params1.renderer) {\n            animType1 = params1.renderer;\n        }\n        var RendererClass1 = getRenderer(animType1);\n        this.renderer = new RendererClass1(this, params1.rendererSettings);\n        this.imagePreloader.setCacheType(animType1, this.renderer.globalData.defs);\n        this.renderer.setProjectInterface(this.projectInterface);\n        this.animType = animType1;\n        if (params1.loop === \"\" || params1.loop === null || params1.loop === undefined || params1.loop === true) {\n            this.loop = true;\n        } else if (params1.loop === false) {\n            this.loop = false;\n        } else {\n            this.loop = parseInt(params1.loop, 10);\n        }\n        this.autoplay = \"autoplay\" in params1 ? params1.autoplay : true;\n        this.name = params1.name ? params1.name : \"\";\n        this.autoloadSegments = Object.prototype.hasOwnProperty.call(params1, \"autoloadSegments\") ? params1.autoloadSegments : true;\n        this.assetsPath = params1.assetsPath;\n        this.initialSegment = params1.initialSegment;\n        if (params1.audioFactory) {\n            this.audioController.setAudioFactory(params1.audioFactory);\n        }\n        if (params1.animationData) {\n            this.setupAnimation(params1.animationData);\n        } else if (params1.path) {\n            if (params1.path.lastIndexOf(\"\\\\\") !== -1) {\n                this.path = params1.path.substr(0, params1.path.lastIndexOf(\"\\\\\") + 1);\n            } else {\n                this.path = params1.path.substr(0, params1.path.lastIndexOf(\"/\") + 1);\n            }\n            this.fileName = params1.path.substr(params1.path.lastIndexOf(\"/\") + 1);\n            this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf(\".json\"));\n            dataManager.loadAnimation(params1.path, this.configAnimation, this.onSetupError);\n        }\n    };\n    AnimationItem.prototype.onSetupError = function() {\n        this.trigger(\"data_failed\");\n    };\n    AnimationItem.prototype.setupAnimation = function(data1) {\n        dataManager.completeAnimation(data1, this.configAnimation);\n    };\n    AnimationItem.prototype.setData = function(wrapper1, animationData1) {\n        if (animationData1) {\n            if (_typeof$4(animationData1) !== \"object\") {\n                animationData1 = JSON.parse(animationData1);\n            }\n        }\n        var params1 = {\n            wrapper: wrapper1,\n            animationData: animationData1\n        };\n        var wrapperAttributes1 = wrapper1.attributes;\n        params1.path = wrapperAttributes1.getNamedItem(\"data-animation-path\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"data-animation-path\").value : wrapperAttributes1.getNamedItem(\"data-bm-path\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"data-bm-path\").value : wrapperAttributes1.getNamedItem(\"bm-path\") ? wrapperAttributes1.getNamedItem(\"bm-path\").value : \"\";\n        params1.animType = wrapperAttributes1.getNamedItem(\"data-anim-type\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"data-anim-type\").value : wrapperAttributes1.getNamedItem(\"data-bm-type\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"data-bm-type\").value : wrapperAttributes1.getNamedItem(\"bm-type\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"bm-type\").value : wrapperAttributes1.getNamedItem(\"data-bm-renderer\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"data-bm-renderer\").value : wrapperAttributes1.getNamedItem(\"bm-renderer\") ? wrapperAttributes1.getNamedItem(\"bm-renderer\").value : getRegisteredRenderer() || \"canvas\";\n        var loop1 = wrapperAttributes1.getNamedItem(\"data-anim-loop\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"data-anim-loop\").value : wrapperAttributes1.getNamedItem(\"data-bm-loop\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"data-bm-loop\").value : wrapperAttributes1.getNamedItem(\"bm-loop\") ? wrapperAttributes1.getNamedItem(\"bm-loop\").value : \"\";\n        if (loop1 === \"false\") {\n            params1.loop = false;\n        } else if (loop1 === \"true\") {\n            params1.loop = true;\n        } else if (loop1 !== \"\") {\n            params1.loop = parseInt(loop1, 10);\n        }\n        var autoplay1 = wrapperAttributes1.getNamedItem(\"data-anim-autoplay\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"data-anim-autoplay\").value : wrapperAttributes1.getNamedItem(\"data-bm-autoplay\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"data-bm-autoplay\").value : wrapperAttributes1.getNamedItem(\"bm-autoplay\") ? wrapperAttributes1.getNamedItem(\"bm-autoplay\").value : true;\n        params1.autoplay = autoplay1 !== \"false\";\n        params1.name = wrapperAttributes1.getNamedItem(\"data-name\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"data-name\").value : wrapperAttributes1.getNamedItem(\"data-bm-name\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"data-bm-name\").value : wrapperAttributes1.getNamedItem(\"bm-name\") ? wrapperAttributes1.getNamedItem(\"bm-name\").value : \"\";\n        var prerender1 = wrapperAttributes1.getNamedItem(\"data-anim-prerender\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"data-anim-prerender\").value : wrapperAttributes1.getNamedItem(\"data-bm-prerender\") // eslint-disable-line no-nested-ternary\n         ? wrapperAttributes1.getNamedItem(\"data-bm-prerender\").value : wrapperAttributes1.getNamedItem(\"bm-prerender\") ? wrapperAttributes1.getNamedItem(\"bm-prerender\").value : \"\";\n        if (prerender1 === \"false\") {\n            params1.prerender = false;\n        }\n        if (!params1.path) {\n            this.trigger(\"destroy\");\n        } else {\n            this.setParams(params1);\n        }\n    };\n    AnimationItem.prototype.includeLayers = function(data1) {\n        if (data1.op > this.animationData.op) {\n            this.animationData.op = data1.op;\n            this.totalFrames = Math.floor(data1.op - this.animationData.ip);\n        }\n        var layers1 = this.animationData.layers;\n        var i3;\n        var len1 = layers1.length;\n        var newLayers1 = data1.layers;\n        var j3;\n        var jLen1 = newLayers1.length;\n        for(j3 = 0; j3 < jLen1; j3 += 1){\n            i3 = 0;\n            while(i3 < len1){\n                if (layers1[i3].id === newLayers1[j3].id) {\n                    layers1[i3] = newLayers1[j3];\n                    break;\n                }\n                i3 += 1;\n            }\n        }\n        if (data1.chars || data1.fonts) {\n            this.renderer.globalData.fontManager.addChars(data1.chars);\n            this.renderer.globalData.fontManager.addFonts(data1.fonts, this.renderer.globalData.defs);\n        }\n        if (data1.assets) {\n            len1 = data1.assets.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                this.animationData.assets.push(data1.assets[i3]);\n            }\n        }\n        this.animationData.__complete = false;\n        dataManager.completeAnimation(this.animationData, this.onSegmentComplete);\n    };\n    AnimationItem.prototype.onSegmentComplete = function(data1) {\n        this.animationData = data1;\n        var expressionsPlugin1 = getExpressionsPlugin();\n        if (expressionsPlugin1) {\n            expressionsPlugin1.initExpressions(this);\n        }\n        this.loadNextSegment();\n    };\n    AnimationItem.prototype.loadNextSegment = function() {\n        var segments1 = this.animationData.segments;\n        if (!segments1 || segments1.length === 0 || !this.autoloadSegments) {\n            this.trigger(\"data_ready\");\n            this.timeCompleted = this.totalFrames;\n            return;\n        }\n        var segment1 = segments1.shift();\n        this.timeCompleted = segment1.time * this.frameRate;\n        var segmentPath1 = this.path + this.fileName + \"_\" + this.segmentPos + \".json\";\n        this.segmentPos += 1;\n        dataManager.loadData(segmentPath1, this.includeLayers.bind(this), (function() {\n            this.trigger(\"data_failed\");\n        }).bind(this));\n    };\n    AnimationItem.prototype.loadSegments = function() {\n        var segments1 = this.animationData.segments;\n        if (!segments1) {\n            this.timeCompleted = this.totalFrames;\n        }\n        this.loadNextSegment();\n    };\n    AnimationItem.prototype.imagesLoaded = function() {\n        this.trigger(\"loaded_images\");\n        this.checkLoaded();\n    };\n    AnimationItem.prototype.preloadImages = function() {\n        this.imagePreloader.setAssetsPath(this.assetsPath);\n        this.imagePreloader.setPath(this.path);\n        this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));\n    };\n    AnimationItem.prototype.configAnimation = function(animData1) {\n        if (!this.renderer) {\n            return;\n        }\n        try {\n            this.animationData = animData1;\n            if (this.initialSegment) {\n                this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]);\n                this.firstFrame = Math.round(this.initialSegment[0]);\n            } else {\n                this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);\n                this.firstFrame = Math.round(this.animationData.ip);\n            }\n            this.renderer.configAnimation(animData1);\n            if (!animData1.assets) {\n                animData1.assets = [];\n            }\n            this.assets = this.animationData.assets;\n            this.frameRate = this.animationData.fr;\n            this.frameMult = this.animationData.fr / 1000;\n            this.renderer.searchExtraCompositions(animData1.assets);\n            this.markers = markerParser(animData1.markers || []);\n            this.trigger(\"config_ready\");\n            this.preloadImages();\n            this.loadSegments();\n            this.updaFrameModifier();\n            this.waitForFontsLoaded();\n            if (this.isPaused) {\n                this.audioController.pause();\n            }\n        } catch (error1) {\n            this.triggerConfigError(error1);\n        }\n    };\n    AnimationItem.prototype.waitForFontsLoaded = function() {\n        if (!this.renderer) {\n            return;\n        }\n        if (this.renderer.globalData.fontManager.isLoaded) {\n            this.checkLoaded();\n        } else {\n            setTimeout(this.waitForFontsLoaded.bind(this), 20);\n        }\n    };\n    AnimationItem.prototype.checkLoaded = function() {\n        if (!this.isLoaded && this.renderer.globalData.fontManager.isLoaded && (this.imagePreloader.loadedImages() || this.renderer.rendererType !== \"canvas\") && this.imagePreloader.loadedFootages()) {\n            this.isLoaded = true;\n            var expressionsPlugin1 = getExpressionsPlugin();\n            if (expressionsPlugin1) {\n                expressionsPlugin1.initExpressions(this);\n            }\n            this.renderer.initItems();\n            setTimeout((function() {\n                this.trigger(\"DOMLoaded\");\n            }).bind(this), 0);\n            this.gotoFrame();\n            if (this.autoplay) {\n                this.play();\n            }\n        }\n    };\n    AnimationItem.prototype.resize = function(width1, height1) {\n        // Adding this validation for backwards compatibility in case an event object was being passed down\n        var _width1 = typeof width1 === \"number\" ? width1 : undefined;\n        var _height1 = typeof height1 === \"number\" ? height1 : undefined;\n        this.renderer.updateContainerSize(_width1, _height1);\n    };\n    AnimationItem.prototype.setSubframe = function(flag1) {\n        this.isSubframeEnabled = !!flag1;\n    };\n    AnimationItem.prototype.gotoFrame = function() {\n        this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame; // eslint-disable-line no-bitwise\n        if (this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted) {\n            this.currentFrame = this.timeCompleted;\n        }\n        this.trigger(\"enterFrame\");\n        this.renderFrame();\n        this.trigger(\"drawnFrame\");\n    };\n    AnimationItem.prototype.renderFrame = function() {\n        if (this.isLoaded === false || !this.renderer) {\n            return;\n        }\n        try {\n            if (this.expressionsPlugin) {\n                this.expressionsPlugin.resetFrame();\n            }\n            this.renderer.renderFrame(this.currentFrame + this.firstFrame);\n        } catch (error1) {\n            this.triggerRenderFrameError(error1);\n        }\n    };\n    AnimationItem.prototype.play = function(name1) {\n        if (name1 && this.name !== name1) {\n            return;\n        }\n        if (this.isPaused === true) {\n            this.isPaused = false;\n            this.trigger(\"_play\");\n            this.audioController.resume();\n            if (this._idle) {\n                this._idle = false;\n                this.trigger(\"_active\");\n            }\n        }\n    };\n    AnimationItem.prototype.pause = function(name1) {\n        if (name1 && this.name !== name1) {\n            return;\n        }\n        if (this.isPaused === false) {\n            this.isPaused = true;\n            this.trigger(\"_pause\");\n            this._idle = true;\n            this.trigger(\"_idle\");\n            this.audioController.pause();\n        }\n    };\n    AnimationItem.prototype.togglePause = function(name1) {\n        if (name1 && this.name !== name1) {\n            return;\n        }\n        if (this.isPaused === true) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    };\n    AnimationItem.prototype.stop = function(name1) {\n        if (name1 && this.name !== name1) {\n            return;\n        }\n        this.pause();\n        this.playCount = 0;\n        this._completedLoop = false;\n        this.setCurrentRawFrameValue(0);\n    };\n    AnimationItem.prototype.getMarkerData = function(markerName1) {\n        var marker1;\n        for(var i3 = 0; i3 < this.markers.length; i3 += 1){\n            marker1 = this.markers[i3];\n            if (marker1.payload && marker1.payload.name === markerName1) {\n                return marker1;\n            }\n        }\n        return null;\n    };\n    AnimationItem.prototype.goToAndStop = function(value3, isFrame1, name1) {\n        if (name1 && this.name !== name1) {\n            return;\n        }\n        var numValue1 = Number(value3);\n        if (isNaN(numValue1)) {\n            var marker1 = this.getMarkerData(value3);\n            if (marker1) {\n                this.goToAndStop(marker1.time, true);\n            }\n        } else if (isFrame1) {\n            this.setCurrentRawFrameValue(value3);\n        } else {\n            this.setCurrentRawFrameValue(value3 * this.frameModifier);\n        }\n        this.pause();\n    };\n    AnimationItem.prototype.goToAndPlay = function(value3, isFrame1, name1) {\n        if (name1 && this.name !== name1) {\n            return;\n        }\n        var numValue1 = Number(value3);\n        if (isNaN(numValue1)) {\n            var marker1 = this.getMarkerData(value3);\n            if (marker1) {\n                if (!marker1.duration) {\n                    this.goToAndStop(marker1.time, true);\n                } else {\n                    this.playSegments([\n                        marker1.time,\n                        marker1.time + marker1.duration\n                    ], true);\n                }\n            }\n        } else {\n            this.goToAndStop(numValue1, isFrame1, name1);\n        }\n        this.play();\n    };\n    AnimationItem.prototype.advanceTime = function(value3) {\n        if (this.isPaused === true || this.isLoaded === false) {\n            return;\n        }\n        var nextValue1 = this.currentRawFrame + value3 * this.frameModifier;\n        var _isComplete1 = false; // Checking if nextValue > totalFrames - 1 for addressing non looping and looping animations.\n        // If animation won't loop, it should stop at totalFrames - 1. If it will loop it should complete the last frame and then loop.\n        if (nextValue1 >= this.totalFrames - 1 && this.frameModifier > 0) {\n            if (!this.loop || this.playCount === this.loop) {\n                if (!this.checkSegments(nextValue1 > this.totalFrames ? nextValue1 % this.totalFrames : 0)) {\n                    _isComplete1 = true;\n                    nextValue1 = this.totalFrames - 1;\n                }\n            } else if (nextValue1 >= this.totalFrames) {\n                this.playCount += 1;\n                if (!this.checkSegments(nextValue1 % this.totalFrames)) {\n                    this.setCurrentRawFrameValue(nextValue1 % this.totalFrames);\n                    this._completedLoop = true;\n                    this.trigger(\"loopComplete\");\n                }\n            } else {\n                this.setCurrentRawFrameValue(nextValue1);\n            }\n        } else if (nextValue1 < 0) {\n            if (!this.checkSegments(nextValue1 % this.totalFrames)) {\n                if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {\n                    // eslint-disable-line no-plusplus\n                    this.setCurrentRawFrameValue(this.totalFrames + nextValue1 % this.totalFrames);\n                    if (!this._completedLoop) {\n                        this._completedLoop = true;\n                    } else {\n                        this.trigger(\"loopComplete\");\n                    }\n                } else {\n                    _isComplete1 = true;\n                    nextValue1 = 0;\n                }\n            }\n        } else {\n            this.setCurrentRawFrameValue(nextValue1);\n        }\n        if (_isComplete1) {\n            this.setCurrentRawFrameValue(nextValue1);\n            this.pause();\n            this.trigger(\"complete\");\n        }\n    };\n    AnimationItem.prototype.adjustSegment = function(arr3, offset1) {\n        this.playCount = 0;\n        if (arr3[1] < arr3[0]) {\n            if (this.frameModifier > 0) {\n                if (this.playSpeed < 0) {\n                    this.setSpeed(-this.playSpeed);\n                } else {\n                    this.setDirection(-1);\n                }\n            }\n            this.totalFrames = arr3[0] - arr3[1];\n            this.timeCompleted = this.totalFrames;\n            this.firstFrame = arr3[1];\n            this.setCurrentRawFrameValue(this.totalFrames - 0.001 - offset1);\n        } else if (arr3[1] > arr3[0]) {\n            if (this.frameModifier < 0) {\n                if (this.playSpeed < 0) {\n                    this.setSpeed(-this.playSpeed);\n                } else {\n                    this.setDirection(1);\n                }\n            }\n            this.totalFrames = arr3[1] - arr3[0];\n            this.timeCompleted = this.totalFrames;\n            this.firstFrame = arr3[0];\n            this.setCurrentRawFrameValue(0.001 + offset1);\n        }\n        this.trigger(\"segmentStart\");\n    };\n    AnimationItem.prototype.setSegment = function(init1, end3) {\n        var pendingFrame1 = -1;\n        if (this.isPaused) {\n            if (this.currentRawFrame + this.firstFrame < init1) {\n                pendingFrame1 = init1;\n            } else if (this.currentRawFrame + this.firstFrame > end3) {\n                pendingFrame1 = end3 - init1;\n            }\n        }\n        this.firstFrame = init1;\n        this.totalFrames = end3 - init1;\n        this.timeCompleted = this.totalFrames;\n        if (pendingFrame1 !== -1) {\n            this.goToAndStop(pendingFrame1, true);\n        }\n    };\n    AnimationItem.prototype.playSegments = function(arr3, forceFlag1) {\n        if (forceFlag1) {\n            this.segments.length = 0;\n        }\n        if (_typeof$4(arr3[0]) === \"object\") {\n            var i3;\n            var len1 = arr3.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                this.segments.push(arr3[i3]);\n            }\n        } else {\n            this.segments.push(arr3);\n        }\n        if (this.segments.length && forceFlag1) {\n            this.adjustSegment(this.segments.shift(), 0);\n        }\n        if (this.isPaused) {\n            this.play();\n        }\n    };\n    AnimationItem.prototype.resetSegments = function(forceFlag1) {\n        this.segments.length = 0;\n        this.segments.push([\n            this.animationData.ip,\n            this.animationData.op\n        ]);\n        if (forceFlag1) {\n            this.checkSegments(0);\n        }\n    };\n    AnimationItem.prototype.checkSegments = function(offset1) {\n        if (this.segments.length) {\n            this.adjustSegment(this.segments.shift(), offset1);\n            return true;\n        }\n        return false;\n    };\n    AnimationItem.prototype.destroy = function(name1) {\n        if (name1 && this.name !== name1 || !this.renderer) {\n            return;\n        }\n        this.renderer.destroy();\n        this.imagePreloader.destroy();\n        this.trigger(\"destroy\");\n        this._cbs = null;\n        this.onEnterFrame = null;\n        this.onLoopComplete = null;\n        this.onComplete = null;\n        this.onSegmentStart = null;\n        this.onDestroy = null;\n        this.renderer = null;\n        this.expressionsPlugin = null;\n        this.imagePreloader = null;\n        this.projectInterface = null;\n    };\n    AnimationItem.prototype.setCurrentRawFrameValue = function(value3) {\n        this.currentRawFrame = value3;\n        this.gotoFrame();\n    };\n    AnimationItem.prototype.setSpeed = function(val3) {\n        this.playSpeed = val3;\n        this.updaFrameModifier();\n    };\n    AnimationItem.prototype.setDirection = function(val3) {\n        this.playDirection = val3 < 0 ? -1 : 1;\n        this.updaFrameModifier();\n    };\n    AnimationItem.prototype.setLoop = function(isLooping1) {\n        this.loop = isLooping1;\n    };\n    AnimationItem.prototype.setVolume = function(val3, name1) {\n        if (name1 && this.name !== name1) {\n            return;\n        }\n        this.audioController.setVolume(val3);\n    };\n    AnimationItem.prototype.getVolume = function() {\n        return this.audioController.getVolume();\n    };\n    AnimationItem.prototype.mute = function(name1) {\n        if (name1 && this.name !== name1) {\n            return;\n        }\n        this.audioController.mute();\n    };\n    AnimationItem.prototype.unmute = function(name1) {\n        if (name1 && this.name !== name1) {\n            return;\n        }\n        this.audioController.unmute();\n    };\n    AnimationItem.prototype.updaFrameModifier = function() {\n        this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;\n        this.audioController.setRate(this.playSpeed * this.playDirection);\n    };\n    AnimationItem.prototype.getPath = function() {\n        return this.path;\n    };\n    AnimationItem.prototype.getAssetsPath = function(assetData1) {\n        var path1 = \"\";\n        if (assetData1.e) {\n            path1 = assetData1.p;\n        } else if (this.assetsPath) {\n            var imagePath1 = assetData1.p;\n            if (imagePath1.indexOf(\"images/\") !== -1) {\n                imagePath1 = imagePath1.split(\"/\")[1];\n            }\n            path1 = this.assetsPath + imagePath1;\n        } else {\n            path1 = this.path;\n            path1 += assetData1.u ? assetData1.u : \"\";\n            path1 += assetData1.p;\n        }\n        return path1;\n    };\n    AnimationItem.prototype.getAssetData = function(id1) {\n        var i3 = 0;\n        var len1 = this.assets.length;\n        while(i3 < len1){\n            if (id1 === this.assets[i3].id) {\n                return this.assets[i3];\n            }\n            i3 += 1;\n        }\n        return null;\n    };\n    AnimationItem.prototype.hide = function() {\n        this.renderer.hide();\n    };\n    AnimationItem.prototype.show = function() {\n        this.renderer.show();\n    };\n    AnimationItem.prototype.getDuration = function(isFrame1) {\n        return isFrame1 ? this.totalFrames : this.totalFrames / this.frameRate;\n    };\n    AnimationItem.prototype.updateDocumentData = function(path1, documentData1, index1) {\n        try {\n            var element1 = this.renderer.getElementByPath(path1);\n            element1.updateDocumentData(documentData1, index1);\n        } catch (error1) {}\n    };\n    AnimationItem.prototype.trigger = function(name1) {\n        if (this._cbs && this._cbs[name1]) {\n            switch(name1){\n                case \"enterFrame\":\n                    this.triggerEvent(name1, new BMEnterFrameEvent(name1, this.currentFrame, this.totalFrames, this.frameModifier));\n                    break;\n                case \"drawnFrame\":\n                    this.drawnFrameEvent.currentTime = this.currentFrame;\n                    this.drawnFrameEvent.totalTime = this.totalFrames;\n                    this.drawnFrameEvent.direction = this.frameModifier;\n                    this.triggerEvent(name1, this.drawnFrameEvent);\n                    break;\n                case \"loopComplete\":\n                    this.triggerEvent(name1, new BMCompleteLoopEvent(name1, this.loop, this.playCount, this.frameMult));\n                    break;\n                case \"complete\":\n                    this.triggerEvent(name1, new BMCompleteEvent(name1, this.frameMult));\n                    break;\n                case \"segmentStart\":\n                    this.triggerEvent(name1, new BMSegmentStartEvent(name1, this.firstFrame, this.totalFrames));\n                    break;\n                case \"destroy\":\n                    this.triggerEvent(name1, new BMDestroyEvent(name1, this));\n                    break;\n                default:\n                    this.triggerEvent(name1);\n            }\n        }\n        if (name1 === \"enterFrame\" && this.onEnterFrame) {\n            this.onEnterFrame.call(this, new BMEnterFrameEvent(name1, this.currentFrame, this.totalFrames, this.frameMult));\n        }\n        if (name1 === \"loopComplete\" && this.onLoopComplete) {\n            this.onLoopComplete.call(this, new BMCompleteLoopEvent(name1, this.loop, this.playCount, this.frameMult));\n        }\n        if (name1 === \"complete\" && this.onComplete) {\n            this.onComplete.call(this, new BMCompleteEvent(name1, this.frameMult));\n        }\n        if (name1 === \"segmentStart\" && this.onSegmentStart) {\n            this.onSegmentStart.call(this, new BMSegmentStartEvent(name1, this.firstFrame, this.totalFrames));\n        }\n        if (name1 === \"destroy\" && this.onDestroy) {\n            this.onDestroy.call(this, new BMDestroyEvent(name1, this));\n        }\n    };\n    AnimationItem.prototype.triggerRenderFrameError = function(nativeError1) {\n        var error1 = new BMRenderFrameErrorEvent(nativeError1, this.currentFrame);\n        this.triggerEvent(\"error\", error1);\n        if (this.onError) {\n            this.onError.call(this, error1);\n        }\n    };\n    AnimationItem.prototype.triggerConfigError = function(nativeError1) {\n        var error1 = new BMConfigErrorEvent(nativeError1, this.currentFrame);\n        this.triggerEvent(\"error\", error1);\n        if (this.onError) {\n            this.onError.call(this, error1);\n        }\n    };\n    var animationManager = function() {\n        var moduleOb1 = {};\n        var registeredAnimations1 = [];\n        var initTime1 = 0;\n        var len1 = 0;\n        var playingAnimationsNum1 = 0;\n        var _stopped1 = true;\n        var _isFrozen1 = false;\n        function removeElement1(ev1) {\n            var i3 = 0;\n            var animItem1 = ev1.target;\n            while(i3 < len1){\n                if (registeredAnimations1[i3].animation === animItem1) {\n                    registeredAnimations1.splice(i3, 1);\n                    i3 -= 1;\n                    len1 -= 1;\n                    if (!animItem1.isPaused) {\n                        subtractPlayingCount1();\n                    }\n                }\n                i3 += 1;\n            }\n        }\n        function registerAnimation1(element1, animationData1) {\n            if (!element1) {\n                return null;\n            }\n            var i3 = 0;\n            while(i3 < len1){\n                if (registeredAnimations1[i3].elem === element1 && registeredAnimations1[i3].elem !== null) {\n                    return registeredAnimations1[i3].animation;\n                }\n                i3 += 1;\n            }\n            var animItem1 = new AnimationItem();\n            setupAnimation1(animItem1, element1);\n            animItem1.setData(element1, animationData1);\n            return animItem1;\n        }\n        function getRegisteredAnimations1() {\n            var i3;\n            var lenAnims1 = registeredAnimations1.length;\n            var animations1 = [];\n            for(i3 = 0; i3 < lenAnims1; i3 += 1){\n                animations1.push(registeredAnimations1[i3].animation);\n            }\n            return animations1;\n        }\n        function addPlayingCount1() {\n            playingAnimationsNum1 += 1;\n            activate1();\n        }\n        function subtractPlayingCount1() {\n            playingAnimationsNum1 -= 1;\n        }\n        function setupAnimation1(animItem1, element1) {\n            animItem1.addEventListener(\"destroy\", removeElement1);\n            animItem1.addEventListener(\"_active\", addPlayingCount1);\n            animItem1.addEventListener(\"_idle\", subtractPlayingCount1);\n            registeredAnimations1.push({\n                elem: element1,\n                animation: animItem1\n            });\n            len1 += 1;\n        }\n        function loadAnimation1(params1) {\n            var animItem1 = new AnimationItem();\n            setupAnimation1(animItem1, null);\n            animItem1.setParams(params1);\n            return animItem1;\n        }\n        function setSpeed1(val3, animation1) {\n            var i3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                registeredAnimations1[i3].animation.setSpeed(val3, animation1);\n            }\n        }\n        function setDirection1(val3, animation1) {\n            var i3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                registeredAnimations1[i3].animation.setDirection(val3, animation1);\n            }\n        }\n        function play1(animation1) {\n            var i3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                registeredAnimations1[i3].animation.play(animation1);\n            }\n        }\n        function resume1(nowTime1) {\n            var elapsedTime1 = nowTime1 - initTime1;\n            var i3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                registeredAnimations1[i3].animation.advanceTime(elapsedTime1);\n            }\n            initTime1 = nowTime1;\n            if (playingAnimationsNum1 && !_isFrozen1) {\n                window.requestAnimationFrame(resume1);\n            } else {\n                _stopped1 = true;\n            }\n        }\n        function first1(nowTime1) {\n            initTime1 = nowTime1;\n            window.requestAnimationFrame(resume1);\n        }\n        function pause1(animation1) {\n            var i3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                registeredAnimations1[i3].animation.pause(animation1);\n            }\n        }\n        function goToAndStop1(value3, isFrame1, animation1) {\n            var i3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                registeredAnimations1[i3].animation.goToAndStop(value3, isFrame1, animation1);\n            }\n        }\n        function stop1(animation1) {\n            var i3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                registeredAnimations1[i3].animation.stop(animation1);\n            }\n        }\n        function togglePause1(animation1) {\n            var i3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                registeredAnimations1[i3].animation.togglePause(animation1);\n            }\n        }\n        function destroy1(animation1) {\n            var i3;\n            for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n                registeredAnimations1[i3].animation.destroy(animation1);\n            }\n        }\n        function searchAnimations1(animationData1, standalone1, renderer1) {\n            var animElements1 = [].concat([].slice.call(document.getElementsByClassName(\"lottie\")), [].slice.call(document.getElementsByClassName(\"bodymovin\")));\n            var i3;\n            var lenAnims1 = animElements1.length;\n            for(i3 = 0; i3 < lenAnims1; i3 += 1){\n                if (renderer1) {\n                    animElements1[i3].setAttribute(\"data-bm-type\", renderer1);\n                }\n                registerAnimation1(animElements1[i3], animationData1);\n            }\n            if (standalone1 && lenAnims1 === 0) {\n                if (!renderer1) {\n                    renderer1 = \"svg\";\n                }\n                var body1 = document.getElementsByTagName(\"body\")[0];\n                body1.innerText = \"\";\n                var div1 = createTag(\"div\");\n                div1.style.width = \"100%\";\n                div1.style.height = \"100%\";\n                div1.setAttribute(\"data-bm-type\", renderer1);\n                body1.appendChild(div1);\n                registerAnimation1(div1, animationData1);\n            }\n        }\n        function resize1() {\n            var i3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                registeredAnimations1[i3].animation.resize();\n            }\n        }\n        function activate1() {\n            if (!_isFrozen1 && playingAnimationsNum1) {\n                if (_stopped1) {\n                    window.requestAnimationFrame(first1);\n                    _stopped1 = false;\n                }\n            }\n        }\n        function freeze1() {\n            _isFrozen1 = true;\n        }\n        function unfreeze1() {\n            _isFrozen1 = false;\n            activate1();\n        }\n        function setVolume1(val3, animation1) {\n            var i3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                registeredAnimations1[i3].animation.setVolume(val3, animation1);\n            }\n        }\n        function mute1(animation1) {\n            var i3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                registeredAnimations1[i3].animation.mute(animation1);\n            }\n        }\n        function unmute1(animation1) {\n            var i3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                registeredAnimations1[i3].animation.unmute(animation1);\n            }\n        }\n        moduleOb1.registerAnimation = registerAnimation1;\n        moduleOb1.loadAnimation = loadAnimation1;\n        moduleOb1.setSpeed = setSpeed1;\n        moduleOb1.setDirection = setDirection1;\n        moduleOb1.play = play1;\n        moduleOb1.pause = pause1;\n        moduleOb1.stop = stop1;\n        moduleOb1.togglePause = togglePause1;\n        moduleOb1.searchAnimations = searchAnimations1;\n        moduleOb1.resize = resize1; // moduleOb.start = start;\n        moduleOb1.goToAndStop = goToAndStop1;\n        moduleOb1.destroy = destroy1;\n        moduleOb1.freeze = freeze1;\n        moduleOb1.unfreeze = unfreeze1;\n        moduleOb1.setVolume = setVolume1;\n        moduleOb1.mute = mute1;\n        moduleOb1.unmute = unmute1;\n        moduleOb1.getRegisteredAnimations = getRegisteredAnimations1;\n        return moduleOb1;\n    }();\n    /* eslint-disable */ var BezierFactory = function() {\n        /**\r\n       * BezierEasing - use bezier curve for transition easing function\r\n       * by Gaëtan Renaudeau 2014 - 2015 – MIT License\r\n       *\r\n       * Credits: is based on Firefox's nsSMILKeySpline.cpp\r\n       * Usage:\r\n       * var spline = BezierEasing([ 0.25, 0.1, 0.25, 1.0 ])\r\n       * spline.get(x) => returns the easing value | x must be in [0, 1] range\r\n       *\r\n       */ var ob1 = {};\n        ob1.getBezierEasing = getBezierEasing1;\n        var beziers1 = {};\n        function getBezierEasing1(a3, b3, c4, d3, nm1) {\n            var str1 = nm1 || (\"bez_\" + a3 + \"_\" + b3 + \"_\" + c4 + \"_\" + d3).replace(/\\./g, \"p\");\n            if (beziers1[str1]) {\n                return beziers1[str1];\n            }\n            var bezEasing1 = new BezierEasing1([\n                a3,\n                b3,\n                c4,\n                d3\n            ]);\n            beziers1[str1] = bezEasing1;\n            return bezEasing1;\n        } // These values are established by empiricism with tests (tradeoff: performance VS precision)\n        var NEWTON_ITERATIONS1 = 4;\n        var NEWTON_MIN_SLOPE1 = 0.001;\n        var SUBDIVISION_PRECISION1 = 0.0000001;\n        var SUBDIVISION_MAX_ITERATIONS1 = 10;\n        var kSplineTableSize1 = 11;\n        var kSampleStepSize1 = 1.0 / (kSplineTableSize1 - 1.0);\n        var float32ArraySupported1 = typeof Float32Array === \"function\";\n        function A1(aA11, aA21) {\n            return 1.0 - 3.0 * aA21 + 3.0 * aA11;\n        }\n        function B1(aA11, aA21) {\n            return 3.0 * aA21 - 6.0 * aA11;\n        }\n        function C1(aA11) {\n            return 3.0 * aA11;\n        } // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n        function calcBezier1(aT1, aA11, aA21) {\n            return ((A1(aA11, aA21) * aT1 + B1(aA11, aA21)) * aT1 + C1(aA11)) * aT1;\n        } // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n        function getSlope1(aT1, aA11, aA21) {\n            return 3.0 * A1(aA11, aA21) * aT1 * aT1 + 2.0 * B1(aA11, aA21) * aT1 + C1(aA11);\n        }\n        function binarySubdivide1(aX1, aA3, aB1, mX11, mX21) {\n            var currentX1, currentT1, i3 = 0;\n            do {\n                currentT1 = aA3 + (aB1 - aA3) / 2.0;\n                currentX1 = calcBezier1(currentT1, mX11, mX21) - aX1;\n                if (currentX1 > 0.0) {\n                    aB1 = currentT1;\n                } else {\n                    aA3 = currentT1;\n                }\n            }while (Math.abs(currentX1) > SUBDIVISION_PRECISION1 && ++i3 < SUBDIVISION_MAX_ITERATIONS1);\n            return currentT1;\n        }\n        function newtonRaphsonIterate1(aX1, aGuessT1, mX11, mX21) {\n            for(var i3 = 0; i3 < NEWTON_ITERATIONS1; ++i3){\n                var currentSlope1 = getSlope1(aGuessT1, mX11, mX21);\n                if (currentSlope1 === 0.0) return aGuessT1;\n                var currentX1 = calcBezier1(aGuessT1, mX11, mX21) - aX1;\n                aGuessT1 -= currentX1 / currentSlope1;\n            }\n            return aGuessT1;\n        }\n        /**\r\n       * points is an array of [ mX1, mY1, mX2, mY2 ]\r\n       */ function BezierEasing1(points1) {\n            this._p = points1;\n            this._mSampleValues = float32ArraySupported1 ? new Float32Array(kSplineTableSize1) : new Array(kSplineTableSize1);\n            this._precomputed = false;\n            this.get = this.get.bind(this);\n        }\n        BezierEasing1.prototype = {\n            get: function get1(x4) {\n                var mX11 = this._p[0], mY11 = this._p[1], mX21 = this._p[2], mY21 = this._p[3];\n                if (!this._precomputed) this._precompute();\n                if (mX11 === mY11 && mX21 === mY21) return x4; // linear\n                // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n                if (x4 === 0) return 0;\n                if (x4 === 1) return 1;\n                return calcBezier1(this._getTForX(x4), mY11, mY21);\n            },\n            // Private part\n            _precompute: function _precompute1() {\n                var mX11 = this._p[0], mY11 = this._p[1], mX21 = this._p[2], mY21 = this._p[3];\n                this._precomputed = true;\n                if (mX11 !== mY11 || mX21 !== mY21) {\n                    this._calcSampleValues();\n                }\n            },\n            _calcSampleValues: function _calcSampleValues1() {\n                var mX11 = this._p[0], mX21 = this._p[2];\n                for(var i3 = 0; i3 < kSplineTableSize1; ++i3){\n                    this._mSampleValues[i3] = calcBezier1(i3 * kSampleStepSize1, mX11, mX21);\n                }\n            },\n            /**\r\n           * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.\r\n           */ _getTForX: function _getTForX1(aX1) {\n                var mX11 = this._p[0], mX21 = this._p[2], mSampleValues1 = this._mSampleValues;\n                var intervalStart1 = 0.0;\n                var currentSample1 = 1;\n                var lastSample1 = kSplineTableSize1 - 1;\n                for(; currentSample1 !== lastSample1 && mSampleValues1[currentSample1] <= aX1; ++currentSample1){\n                    intervalStart1 += kSampleStepSize1;\n                }\n                --currentSample1; // Interpolate to provide an initial guess for t\n                var dist4 = (aX1 - mSampleValues1[currentSample1]) / (mSampleValues1[currentSample1 + 1] - mSampleValues1[currentSample1]);\n                var guessForT1 = intervalStart1 + dist4 * kSampleStepSize1;\n                var initialSlope1 = getSlope1(guessForT1, mX11, mX21);\n                if (initialSlope1 >= NEWTON_MIN_SLOPE1) {\n                    return newtonRaphsonIterate1(aX1, guessForT1, mX11, mX21);\n                }\n                if (initialSlope1 === 0.0) {\n                    return guessForT1;\n                }\n                return binarySubdivide1(aX1, intervalStart1, intervalStart1 + kSampleStepSize1, mX11, mX21);\n            }\n        };\n        return ob1;\n    }();\n    var pooling = function() {\n        function _double1(arr3) {\n            return arr3.concat(createSizedArray(arr3.length));\n        }\n        return {\n            \"double\": _double1\n        };\n    }();\n    var poolFactory = function() {\n        return function(initialLength1, _create1, _release1) {\n            var _length1 = 0;\n            var _maxLength1 = initialLength1;\n            var pool1 = createSizedArray(_maxLength1);\n            var ob1 = {\n                newElement: newElement1,\n                release: release1\n            };\n            function newElement1() {\n                var element1;\n                if (_length1) {\n                    _length1 -= 1;\n                    element1 = pool1[_length1];\n                } else {\n                    element1 = _create1();\n                }\n                return element1;\n            }\n            function release1(element1) {\n                if (_length1 === _maxLength1) {\n                    pool1 = pooling[\"double\"](pool1);\n                    _maxLength1 *= 2;\n                }\n                if (_release1) {\n                    _release1(element1);\n                }\n                pool1[_length1] = element1;\n                _length1 += 1;\n            }\n            return ob1;\n        };\n    }();\n    var bezierLengthPool = function() {\n        function create1() {\n            return {\n                addedLength: 0,\n                percents: createTypedArray(\"float32\", getDefaultCurveSegments()),\n                lengths: createTypedArray(\"float32\", getDefaultCurveSegments())\n            };\n        }\n        return poolFactory(8, create1);\n    }();\n    var segmentsLengthPool = function() {\n        function create1() {\n            return {\n                lengths: [],\n                totalLength: 0\n            };\n        }\n        function release1(element1) {\n            var i3;\n            var len1 = element1.lengths.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                bezierLengthPool.release(element1.lengths[i3]);\n            }\n            element1.lengths.length = 0;\n        }\n        return poolFactory(8, create1, release1);\n    }();\n    function bezFunction() {\n        var math1 = Math;\n        function pointOnLine2D1(x11, y11, x21, y21, x31, y31) {\n            var det11 = x11 * y21 + y11 * x31 + x21 * y31 - x31 * y21 - y31 * x11 - x21 * y11;\n            return det11 > -0.001 && det11 < 0.001;\n        }\n        function pointOnLine3D1(x11, y11, z11, x21, y21, z21, x31, y31, z31) {\n            if (z11 === 0 && z21 === 0 && z31 === 0) {\n                return pointOnLine2D1(x11, y11, x21, y21, x31, y31);\n            }\n            var dist11 = math1.sqrt(math1.pow(x21 - x11, 2) + math1.pow(y21 - y11, 2) + math1.pow(z21 - z11, 2));\n            var dist21 = math1.sqrt(math1.pow(x31 - x11, 2) + math1.pow(y31 - y11, 2) + math1.pow(z31 - z11, 2));\n            var dist31 = math1.sqrt(math1.pow(x31 - x21, 2) + math1.pow(y31 - y21, 2) + math1.pow(z31 - z21, 2));\n            var diffDist1;\n            if (dist11 > dist21) {\n                if (dist11 > dist31) {\n                    diffDist1 = dist11 - dist21 - dist31;\n                } else {\n                    diffDist1 = dist31 - dist21 - dist11;\n                }\n            } else if (dist31 > dist21) {\n                diffDist1 = dist31 - dist21 - dist11;\n            } else {\n                diffDist1 = dist21 - dist11 - dist31;\n            }\n            return diffDist1 > -0.0001 && diffDist1 < 0.0001;\n        }\n        var getBezierLength1 = function() {\n            return function(pt11, pt21, pt31, pt41) {\n                var curveSegments1 = getDefaultCurveSegments();\n                var k3;\n                var i3;\n                var len1;\n                var ptCoord1;\n                var perc1;\n                var addedLength1 = 0;\n                var ptDistance1;\n                var point1 = [];\n                var lastPoint1 = [];\n                var lengthData1 = bezierLengthPool.newElement();\n                len1 = pt31.length;\n                for(k3 = 0; k3 < curveSegments1; k3 += 1){\n                    perc1 = k3 / (curveSegments1 - 1);\n                    ptDistance1 = 0;\n                    for(i3 = 0; i3 < len1; i3 += 1){\n                        ptCoord1 = bmPow(1 - perc1, 3) * pt11[i3] + 3 * bmPow(1 - perc1, 2) * perc1 * pt31[i3] + 3 * (1 - perc1) * bmPow(perc1, 2) * pt41[i3] + bmPow(perc1, 3) * pt21[i3];\n                        point1[i3] = ptCoord1;\n                        if (lastPoint1[i3] !== null) {\n                            ptDistance1 += bmPow(point1[i3] - lastPoint1[i3], 2);\n                        }\n                        lastPoint1[i3] = point1[i3];\n                    }\n                    if (ptDistance1) {\n                        ptDistance1 = bmSqrt(ptDistance1);\n                        addedLength1 += ptDistance1;\n                    }\n                    lengthData1.percents[k3] = perc1;\n                    lengthData1.lengths[k3] = addedLength1;\n                }\n                lengthData1.addedLength = addedLength1;\n                return lengthData1;\n            };\n        }();\n        function getSegmentsLength1(shapeData1) {\n            var segmentsLength1 = segmentsLengthPool.newElement();\n            var closed1 = shapeData1.c;\n            var pathV1 = shapeData1.v;\n            var pathO1 = shapeData1.o;\n            var pathI1 = shapeData1.i;\n            var i3;\n            var len1 = shapeData1._length;\n            var lengths1 = segmentsLength1.lengths;\n            var totalLength1 = 0;\n            for(i3 = 0; i3 < len1 - 1; i3 += 1){\n                lengths1[i3] = getBezierLength1(pathV1[i3], pathV1[i3 + 1], pathO1[i3], pathI1[i3 + 1]);\n                totalLength1 += lengths1[i3].addedLength;\n            }\n            if (closed1 && len1) {\n                lengths1[i3] = getBezierLength1(pathV1[i3], pathV1[0], pathO1[i3], pathI1[0]);\n                totalLength1 += lengths1[i3].addedLength;\n            }\n            segmentsLength1.totalLength = totalLength1;\n            return segmentsLength1;\n        }\n        function BezierData1(length1) {\n            this.segmentLength = 0;\n            this.points = new Array(length1);\n        }\n        function PointData1(partial1, point1) {\n            this.partialLength = partial1;\n            this.point = point1;\n        }\n        var buildBezierData1 = function() {\n            var storedData1 = {};\n            return function(pt11, pt21, pt31, pt41) {\n                var bezierName1 = (pt11[0] + \"_\" + pt11[1] + \"_\" + pt21[0] + \"_\" + pt21[1] + \"_\" + pt31[0] + \"_\" + pt31[1] + \"_\" + pt41[0] + \"_\" + pt41[1]).replace(/\\./g, \"p\");\n                if (!storedData1[bezierName1]) {\n                    var curveSegments1 = getDefaultCurveSegments();\n                    var k3;\n                    var i3;\n                    var len1;\n                    var ptCoord1;\n                    var perc1;\n                    var addedLength1 = 0;\n                    var ptDistance1;\n                    var point1;\n                    var lastPoint1 = null;\n                    if (pt11.length === 2 && (pt11[0] !== pt21[0] || pt11[1] !== pt21[1]) && pointOnLine2D1(pt11[0], pt11[1], pt21[0], pt21[1], pt11[0] + pt31[0], pt11[1] + pt31[1]) && pointOnLine2D1(pt11[0], pt11[1], pt21[0], pt21[1], pt21[0] + pt41[0], pt21[1] + pt41[1])) {\n                        curveSegments1 = 2;\n                    }\n                    var bezierData1 = new BezierData1(curveSegments1);\n                    len1 = pt31.length;\n                    for(k3 = 0; k3 < curveSegments1; k3 += 1){\n                        point1 = createSizedArray(len1);\n                        perc1 = k3 / (curveSegments1 - 1);\n                        ptDistance1 = 0;\n                        for(i3 = 0; i3 < len1; i3 += 1){\n                            ptCoord1 = bmPow(1 - perc1, 3) * pt11[i3] + 3 * bmPow(1 - perc1, 2) * perc1 * (pt11[i3] + pt31[i3]) + 3 * (1 - perc1) * bmPow(perc1, 2) * (pt21[i3] + pt41[i3]) + bmPow(perc1, 3) * pt21[i3];\n                            point1[i3] = ptCoord1;\n                            if (lastPoint1 !== null) {\n                                ptDistance1 += bmPow(point1[i3] - lastPoint1[i3], 2);\n                            }\n                        }\n                        ptDistance1 = bmSqrt(ptDistance1);\n                        addedLength1 += ptDistance1;\n                        bezierData1.points[k3] = new PointData1(ptDistance1, point1);\n                        lastPoint1 = point1;\n                    }\n                    bezierData1.segmentLength = addedLength1;\n                    storedData1[bezierName1] = bezierData1;\n                }\n                return storedData1[bezierName1];\n            };\n        }();\n        function getDistancePerc1(perc1, bezierData1) {\n            var percents1 = bezierData1.percents;\n            var lengths1 = bezierData1.lengths;\n            var len1 = percents1.length;\n            var initPos1 = bmFloor((len1 - 1) * perc1);\n            var lengthPos1 = perc1 * bezierData1.addedLength;\n            var lPerc1 = 0;\n            if (initPos1 === len1 - 1 || initPos1 === 0 || lengthPos1 === lengths1[initPos1]) {\n                return percents1[initPos1];\n            }\n            var dir1 = lengths1[initPos1] > lengthPos1 ? -1 : 1;\n            var flag1 = true;\n            while(flag1){\n                if (lengths1[initPos1] <= lengthPos1 && lengths1[initPos1 + 1] > lengthPos1) {\n                    lPerc1 = (lengthPos1 - lengths1[initPos1]) / (lengths1[initPos1 + 1] - lengths1[initPos1]);\n                    flag1 = false;\n                } else {\n                    initPos1 += dir1;\n                }\n                if (initPos1 < 0 || initPos1 >= len1 - 1) {\n                    // FIX for TypedArrays that don't store floating point values with enough accuracy\n                    if (initPos1 === len1 - 1) {\n                        return percents1[initPos1];\n                    }\n                    flag1 = false;\n                }\n            }\n            return percents1[initPos1] + (percents1[initPos1 + 1] - percents1[initPos1]) * lPerc1;\n        }\n        function getPointInSegment1(pt11, pt21, pt31, pt41, percent1, bezierData1) {\n            var t11 = getDistancePerc1(percent1, bezierData1);\n            var u11 = 1 - t11;\n            var ptX1 = math1.round((u11 * u11 * u11 * pt11[0] + (t11 * u11 * u11 + u11 * t11 * u11 + u11 * u11 * t11) * pt31[0] + (t11 * t11 * u11 + u11 * t11 * t11 + t11 * u11 * t11) * pt41[0] + t11 * t11 * t11 * pt21[0]) * 1000) / 1000;\n            var ptY1 = math1.round((u11 * u11 * u11 * pt11[1] + (t11 * u11 * u11 + u11 * t11 * u11 + u11 * u11 * t11) * pt31[1] + (t11 * t11 * u11 + u11 * t11 * t11 + t11 * u11 * t11) * pt41[1] + t11 * t11 * t11 * pt21[1]) * 1000) / 1000;\n            return [\n                ptX1,\n                ptY1\n            ];\n        }\n        var bezierSegmentPoints1 = createTypedArray(\"float32\", 8);\n        function getNewSegment1(pt11, pt21, pt31, pt41, startPerc1, endPerc1, bezierData1) {\n            if (startPerc1 < 0) {\n                startPerc1 = 0;\n            } else if (startPerc1 > 1) {\n                startPerc1 = 1;\n            }\n            var t01 = getDistancePerc1(startPerc1, bezierData1);\n            endPerc1 = endPerc1 > 1 ? 1 : endPerc1;\n            var t11 = getDistancePerc1(endPerc1, bezierData1);\n            var i3;\n            var len1 = pt11.length;\n            var u01 = 1 - t01;\n            var u11 = 1 - t11;\n            var u0u0u01 = u01 * u01 * u01;\n            var t0u0u0_31 = t01 * u01 * u01 * 3; // eslint-disable-line camelcase\n            var t0t0u0_31 = t01 * t01 * u01 * 3; // eslint-disable-line camelcase\n            var t0t0t01 = t01 * t01 * t01; //\n            var u0u0u11 = u01 * u01 * u11;\n            var t0u0u1_31 = t01 * u01 * u11 + u01 * t01 * u11 + u01 * u01 * t11; // eslint-disable-line camelcase\n            var t0t0u1_31 = t01 * t01 * u11 + u01 * t01 * t11 + t01 * u01 * t11; // eslint-disable-line camelcase\n            var t0t0t11 = t01 * t01 * t11; //\n            var u0u1u11 = u01 * u11 * u11;\n            var t0u1u1_31 = t01 * u11 * u11 + u01 * t11 * u11 + u01 * u11 * t11; // eslint-disable-line camelcase\n            var t0t1u1_31 = t01 * t11 * u11 + u01 * t11 * t11 + t01 * u11 * t11; // eslint-disable-line camelcase\n            var t0t1t11 = t01 * t11 * t11; //\n            var u1u1u11 = u11 * u11 * u11;\n            var t1u1u1_31 = t11 * u11 * u11 + u11 * t11 * u11 + u11 * u11 * t11; // eslint-disable-line camelcase\n            var t1t1u1_31 = t11 * t11 * u11 + u11 * t11 * t11 + t11 * u11 * t11; // eslint-disable-line camelcase\n            var t1t1t11 = t11 * t11 * t11;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                bezierSegmentPoints1[i3 * 4] = math1.round((u0u0u01 * pt11[i3] + t0u0u0_31 * pt31[i3] + t0t0u0_31 * pt41[i3] + t0t0t01 * pt21[i3]) * 1000) / 1000; // eslint-disable-line camelcase\n                bezierSegmentPoints1[i3 * 4 + 1] = math1.round((u0u0u11 * pt11[i3] + t0u0u1_31 * pt31[i3] + t0t0u1_31 * pt41[i3] + t0t0t11 * pt21[i3]) * 1000) / 1000; // eslint-disable-line camelcase\n                bezierSegmentPoints1[i3 * 4 + 2] = math1.round((u0u1u11 * pt11[i3] + t0u1u1_31 * pt31[i3] + t0t1u1_31 * pt41[i3] + t0t1t11 * pt21[i3]) * 1000) / 1000; // eslint-disable-line camelcase\n                bezierSegmentPoints1[i3 * 4 + 3] = math1.round((u1u1u11 * pt11[i3] + t1u1u1_31 * pt31[i3] + t1t1u1_31 * pt41[i3] + t1t1t11 * pt21[i3]) * 1000) / 1000; // eslint-disable-line camelcase\n            }\n            return bezierSegmentPoints1;\n        }\n        return {\n            getSegmentsLength: getSegmentsLength1,\n            getNewSegment: getNewSegment1,\n            getPointInSegment: getPointInSegment1,\n            buildBezierData: buildBezierData1,\n            pointOnLine2D: pointOnLine2D1,\n            pointOnLine3D: pointOnLine3D1\n        };\n    }\n    var bez = bezFunction();\n    var initFrame = initialDefaultFrame;\n    var mathAbs = Math.abs;\n    function interpolateValue(frameNum1, caching1) {\n        var offsetTime1 = this.offsetTime;\n        var newValue1;\n        if (this.propType === \"multidimensional\") {\n            newValue1 = createTypedArray(\"float32\", this.pv.length);\n        }\n        var iterationIndex1 = caching1.lastIndex;\n        var i3 = iterationIndex1;\n        var len1 = this.keyframes.length - 1;\n        var flag1 = true;\n        var keyData1;\n        var nextKeyData1;\n        var keyframeMetadata1;\n        while(flag1){\n            keyData1 = this.keyframes[i3];\n            nextKeyData1 = this.keyframes[i3 + 1];\n            if (i3 === len1 - 1 && frameNum1 >= nextKeyData1.t - offsetTime1) {\n                if (keyData1.h) {\n                    keyData1 = nextKeyData1;\n                }\n                iterationIndex1 = 0;\n                break;\n            }\n            if (nextKeyData1.t - offsetTime1 > frameNum1) {\n                iterationIndex1 = i3;\n                break;\n            }\n            if (i3 < len1 - 1) {\n                i3 += 1;\n            } else {\n                iterationIndex1 = 0;\n                flag1 = false;\n            }\n        }\n        keyframeMetadata1 = this.keyframesMetadata[i3] || {};\n        var k3;\n        var kLen1;\n        var perc1;\n        var jLen1;\n        var j3;\n        var fnc1;\n        var nextKeyTime1 = nextKeyData1.t - offsetTime1;\n        var keyTime1 = keyData1.t - offsetTime1;\n        var endValue1;\n        if (keyData1.to) {\n            if (!keyframeMetadata1.bezierData) {\n                keyframeMetadata1.bezierData = bez.buildBezierData(keyData1.s, nextKeyData1.s || keyData1.e, keyData1.to, keyData1.ti);\n            }\n            var bezierData1 = keyframeMetadata1.bezierData;\n            if (frameNum1 >= nextKeyTime1 || frameNum1 < keyTime1) {\n                var ind1 = frameNum1 >= nextKeyTime1 ? bezierData1.points.length - 1 : 0;\n                kLen1 = bezierData1.points[ind1].point.length;\n                for(k3 = 0; k3 < kLen1; k3 += 1){\n                    newValue1[k3] = bezierData1.points[ind1].point[k3];\n                } // caching._lastKeyframeIndex = -1;\n            } else {\n                if (keyframeMetadata1.__fnct) {\n                    fnc1 = keyframeMetadata1.__fnct;\n                } else {\n                    fnc1 = BezierFactory.getBezierEasing(keyData1.o.x, keyData1.o.y, keyData1.i.x, keyData1.i.y, keyData1.n).get;\n                    keyframeMetadata1.__fnct = fnc1;\n                }\n                perc1 = fnc1((frameNum1 - keyTime1) / (nextKeyTime1 - keyTime1));\n                var distanceInLine1 = bezierData1.segmentLength * perc1;\n                var segmentPerc1;\n                var addedLength1 = caching1.lastFrame < frameNum1 && caching1._lastKeyframeIndex === i3 ? caching1._lastAddedLength : 0;\n                j3 = caching1.lastFrame < frameNum1 && caching1._lastKeyframeIndex === i3 ? caching1._lastPoint : 0;\n                flag1 = true;\n                jLen1 = bezierData1.points.length;\n                while(flag1){\n                    addedLength1 += bezierData1.points[j3].partialLength;\n                    if (distanceInLine1 === 0 || perc1 === 0 || j3 === bezierData1.points.length - 1) {\n                        kLen1 = bezierData1.points[j3].point.length;\n                        for(k3 = 0; k3 < kLen1; k3 += 1){\n                            newValue1[k3] = bezierData1.points[j3].point[k3];\n                        }\n                        break;\n                    } else if (distanceInLine1 >= addedLength1 && distanceInLine1 < addedLength1 + bezierData1.points[j3 + 1].partialLength) {\n                        segmentPerc1 = (distanceInLine1 - addedLength1) / bezierData1.points[j3 + 1].partialLength;\n                        kLen1 = bezierData1.points[j3].point.length;\n                        for(k3 = 0; k3 < kLen1; k3 += 1){\n                            newValue1[k3] = bezierData1.points[j3].point[k3] + (bezierData1.points[j3 + 1].point[k3] - bezierData1.points[j3].point[k3]) * segmentPerc1;\n                        }\n                        break;\n                    }\n                    if (j3 < jLen1 - 1) {\n                        j3 += 1;\n                    } else {\n                        flag1 = false;\n                    }\n                }\n                caching1._lastPoint = j3;\n                caching1._lastAddedLength = addedLength1 - bezierData1.points[j3].partialLength;\n                caching1._lastKeyframeIndex = i3;\n            }\n        } else {\n            var outX1;\n            var outY1;\n            var inX1;\n            var inY1;\n            var keyValue1;\n            len1 = keyData1.s.length;\n            endValue1 = nextKeyData1.s || keyData1.e;\n            if (this.sh && keyData1.h !== 1) {\n                if (frameNum1 >= nextKeyTime1) {\n                    newValue1[0] = endValue1[0];\n                    newValue1[1] = endValue1[1];\n                    newValue1[2] = endValue1[2];\n                } else if (frameNum1 <= keyTime1) {\n                    newValue1[0] = keyData1.s[0];\n                    newValue1[1] = keyData1.s[1];\n                    newValue1[2] = keyData1.s[2];\n                } else {\n                    var quatStart1 = createQuaternion(keyData1.s);\n                    var quatEnd1 = createQuaternion(endValue1);\n                    var time1 = (frameNum1 - keyTime1) / (nextKeyTime1 - keyTime1);\n                    quaternionToEuler(newValue1, slerp(quatStart1, quatEnd1, time1));\n                }\n            } else {\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    if (keyData1.h !== 1) {\n                        if (frameNum1 >= nextKeyTime1) {\n                            perc1 = 1;\n                        } else if (frameNum1 < keyTime1) {\n                            perc1 = 0;\n                        } else {\n                            if (keyData1.o.x.constructor === Array) {\n                                if (!keyframeMetadata1.__fnct) {\n                                    keyframeMetadata1.__fnct = [];\n                                }\n                                if (!keyframeMetadata1.__fnct[i3]) {\n                                    outX1 = keyData1.o.x[i3] === undefined ? keyData1.o.x[0] : keyData1.o.x[i3];\n                                    outY1 = keyData1.o.y[i3] === undefined ? keyData1.o.y[0] : keyData1.o.y[i3];\n                                    inX1 = keyData1.i.x[i3] === undefined ? keyData1.i.x[0] : keyData1.i.x[i3];\n                                    inY1 = keyData1.i.y[i3] === undefined ? keyData1.i.y[0] : keyData1.i.y[i3];\n                                    fnc1 = BezierFactory.getBezierEasing(outX1, outY1, inX1, inY1).get;\n                                    keyframeMetadata1.__fnct[i3] = fnc1;\n                                } else {\n                                    fnc1 = keyframeMetadata1.__fnct[i3];\n                                }\n                            } else if (!keyframeMetadata1.__fnct) {\n                                outX1 = keyData1.o.x;\n                                outY1 = keyData1.o.y;\n                                inX1 = keyData1.i.x;\n                                inY1 = keyData1.i.y;\n                                fnc1 = BezierFactory.getBezierEasing(outX1, outY1, inX1, inY1).get;\n                                keyData1.keyframeMetadata = fnc1;\n                            } else {\n                                fnc1 = keyframeMetadata1.__fnct;\n                            }\n                            perc1 = fnc1((frameNum1 - keyTime1) / (nextKeyTime1 - keyTime1));\n                        }\n                    }\n                    endValue1 = nextKeyData1.s || keyData1.e;\n                    keyValue1 = keyData1.h === 1 ? keyData1.s[i3] : keyData1.s[i3] + (endValue1[i3] - keyData1.s[i3]) * perc1;\n                    if (this.propType === \"multidimensional\") {\n                        newValue1[i3] = keyValue1;\n                    } else {\n                        newValue1 = keyValue1;\n                    }\n                }\n            }\n        }\n        caching1.lastIndex = iterationIndex1;\n        return newValue1;\n    } // based on @Toji's https://github.com/toji/gl-matrix/\n    function slerp(a3, b3, t3) {\n        var out1 = [];\n        var ax1 = a3[0];\n        var ay1 = a3[1];\n        var az1 = a3[2];\n        var aw1 = a3[3];\n        var bx1 = b3[0];\n        var by1 = b3[1];\n        var bz1 = b3[2];\n        var bw1 = b3[3];\n        var omega1;\n        var cosom1;\n        var sinom1;\n        var scale01;\n        var scale11;\n        cosom1 = ax1 * bx1 + ay1 * by1 + az1 * bz1 + aw1 * bw1;\n        if (cosom1 < 0.0) {\n            cosom1 = -cosom1;\n            bx1 = -bx1;\n            by1 = -by1;\n            bz1 = -bz1;\n            bw1 = -bw1;\n        }\n        if (1.0 - cosom1 > 0.000001) {\n            omega1 = Math.acos(cosom1);\n            sinom1 = Math.sin(omega1);\n            scale01 = Math.sin((1.0 - t3) * omega1) / sinom1;\n            scale11 = Math.sin(t3 * omega1) / sinom1;\n        } else {\n            scale01 = 1.0 - t3;\n            scale11 = t3;\n        }\n        out1[0] = scale01 * ax1 + scale11 * bx1;\n        out1[1] = scale01 * ay1 + scale11 * by1;\n        out1[2] = scale01 * az1 + scale11 * bz1;\n        out1[3] = scale01 * aw1 + scale11 * bw1;\n        return out1;\n    }\n    function quaternionToEuler(out1, quat1) {\n        var qx1 = quat1[0];\n        var qy1 = quat1[1];\n        var qz1 = quat1[2];\n        var qw1 = quat1[3];\n        var heading1 = Math.atan2(2 * qy1 * qw1 - 2 * qx1 * qz1, 1 - 2 * qy1 * qy1 - 2 * qz1 * qz1);\n        var attitude1 = Math.asin(2 * qx1 * qy1 + 2 * qz1 * qw1);\n        var bank1 = Math.atan2(2 * qx1 * qw1 - 2 * qy1 * qz1, 1 - 2 * qx1 * qx1 - 2 * qz1 * qz1);\n        out1[0] = heading1 / degToRads;\n        out1[1] = attitude1 / degToRads;\n        out1[2] = bank1 / degToRads;\n    }\n    function createQuaternion(values1) {\n        var heading1 = values1[0] * degToRads;\n        var attitude1 = values1[1] * degToRads;\n        var bank1 = values1[2] * degToRads;\n        var c11 = Math.cos(heading1 / 2);\n        var c21 = Math.cos(attitude1 / 2);\n        var c31 = Math.cos(bank1 / 2);\n        var s11 = Math.sin(heading1 / 2);\n        var s21 = Math.sin(attitude1 / 2);\n        var s31 = Math.sin(bank1 / 2);\n        var w1 = c11 * c21 * c31 - s11 * s21 * s31;\n        var x4 = s11 * s21 * c31 + c11 * c21 * s31;\n        var y4 = s11 * c21 * c31 + c11 * s21 * s31;\n        var z4 = c11 * s21 * c31 - s11 * c21 * s31;\n        return [\n            x4,\n            y4,\n            z4,\n            w1\n        ];\n    }\n    function getValueAtCurrentTime() {\n        var frameNum1 = this.comp.renderedFrame - this.offsetTime;\n        var initTime1 = this.keyframes[0].t - this.offsetTime;\n        var endTime1 = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;\n        if (!(frameNum1 === this._caching.lastFrame || this._caching.lastFrame !== initFrame && (this._caching.lastFrame >= endTime1 && frameNum1 >= endTime1 || this._caching.lastFrame < initTime1 && frameNum1 < initTime1))) {\n            if (this._caching.lastFrame >= frameNum1) {\n                this._caching._lastKeyframeIndex = -1;\n                this._caching.lastIndex = 0;\n            }\n            var renderResult1 = this.interpolateValue(frameNum1, this._caching);\n            this.pv = renderResult1;\n        }\n        this._caching.lastFrame = frameNum1;\n        return this.pv;\n    }\n    function setVValue(val3) {\n        var multipliedValue1;\n        if (this.propType === \"unidimensional\") {\n            multipliedValue1 = val3 * this.mult;\n            if (mathAbs(this.v - multipliedValue1) > 0.00001) {\n                this.v = multipliedValue1;\n                this._mdf = true;\n            }\n        } else {\n            var i3 = 0;\n            var len1 = this.v.length;\n            while(i3 < len1){\n                multipliedValue1 = val3[i3] * this.mult;\n                if (mathAbs(this.v[i3] - multipliedValue1) > 0.00001) {\n                    this.v[i3] = multipliedValue1;\n                    this._mdf = true;\n                }\n                i3 += 1;\n            }\n        }\n    }\n    function processEffectsSequence() {\n        if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {\n            return;\n        }\n        if (this.lock) {\n            this.setVValue(this.pv);\n            return;\n        }\n        this.lock = true;\n        this._mdf = this._isFirstFrame;\n        var i3;\n        var len1 = this.effectsSequence.length;\n        var finalValue1 = this.kf ? this.pv : this.data.k;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            finalValue1 = this.effectsSequence[i3](finalValue1);\n        }\n        this.setVValue(finalValue1);\n        this._isFirstFrame = false;\n        this.lock = false;\n        this.frameId = this.elem.globalData.frameId;\n    }\n    function addEffect(effectFunction1) {\n        this.effectsSequence.push(effectFunction1);\n        this.container.addDynamicProperty(this);\n    }\n    function ValueProperty(elem3, data1, mult1, container1) {\n        this.propType = \"unidimensional\";\n        this.mult = mult1 || 1;\n        this.data = data1;\n        this.v = mult1 ? data1.k * mult1 : data1.k;\n        this.pv = data1.k;\n        this._mdf = false;\n        this.elem = elem3;\n        this.container = container1;\n        this.comp = elem3.comp;\n        this.k = false;\n        this.kf = false;\n        this.vel = 0;\n        this.effectsSequence = [];\n        this._isFirstFrame = true;\n        this.getValue = processEffectsSequence;\n        this.setVValue = setVValue;\n        this.addEffect = addEffect;\n    }\n    function MultiDimensionalProperty(elem3, data1, mult1, container1) {\n        this.propType = \"multidimensional\";\n        this.mult = mult1 || 1;\n        this.data = data1;\n        this._mdf = false;\n        this.elem = elem3;\n        this.container = container1;\n        this.comp = elem3.comp;\n        this.k = false;\n        this.kf = false;\n        this.frameId = -1;\n        var i3;\n        var len1 = data1.k.length;\n        this.v = createTypedArray(\"float32\", len1);\n        this.pv = createTypedArray(\"float32\", len1);\n        this.vel = createTypedArray(\"float32\", len1);\n        for(i3 = 0; i3 < len1; i3 += 1){\n            this.v[i3] = data1.k[i3] * this.mult;\n            this.pv[i3] = data1.k[i3];\n        }\n        this._isFirstFrame = true;\n        this.effectsSequence = [];\n        this.getValue = processEffectsSequence;\n        this.setVValue = setVValue;\n        this.addEffect = addEffect;\n    }\n    function KeyframedValueProperty(elem3, data1, mult1, container1) {\n        this.propType = \"unidimensional\";\n        this.keyframes = data1.k;\n        this.keyframesMetadata = [];\n        this.offsetTime = elem3.data.st;\n        this.frameId = -1;\n        this._caching = {\n            lastFrame: initFrame,\n            lastIndex: 0,\n            value: 0,\n            _lastKeyframeIndex: -1\n        };\n        this.k = true;\n        this.kf = true;\n        this.data = data1;\n        this.mult = mult1 || 1;\n        this.elem = elem3;\n        this.container = container1;\n        this.comp = elem3.comp;\n        this.v = initFrame;\n        this.pv = initFrame;\n        this._isFirstFrame = true;\n        this.getValue = processEffectsSequence;\n        this.setVValue = setVValue;\n        this.interpolateValue = interpolateValue;\n        this.effectsSequence = [\n            getValueAtCurrentTime.bind(this)\n        ];\n        this.addEffect = addEffect;\n    }\n    function KeyframedMultidimensionalProperty(elem3, data1, mult1, container1) {\n        this.propType = \"multidimensional\";\n        var i3;\n        var len1 = data1.k.length;\n        var s4;\n        var e3;\n        var to1;\n        var ti1;\n        for(i3 = 0; i3 < len1 - 1; i3 += 1){\n            if (data1.k[i3].to && data1.k[i3].s && data1.k[i3 + 1] && data1.k[i3 + 1].s) {\n                s4 = data1.k[i3].s;\n                e3 = data1.k[i3 + 1].s;\n                to1 = data1.k[i3].to;\n                ti1 = data1.k[i3].ti;\n                if (s4.length === 2 && !(s4[0] === e3[0] && s4[1] === e3[1]) && bez.pointOnLine2D(s4[0], s4[1], e3[0], e3[1], s4[0] + to1[0], s4[1] + to1[1]) && bez.pointOnLine2D(s4[0], s4[1], e3[0], e3[1], e3[0] + ti1[0], e3[1] + ti1[1]) || s4.length === 3 && !(s4[0] === e3[0] && s4[1] === e3[1] && s4[2] === e3[2]) && bez.pointOnLine3D(s4[0], s4[1], s4[2], e3[0], e3[1], e3[2], s4[0] + to1[0], s4[1] + to1[1], s4[2] + to1[2]) && bez.pointOnLine3D(s4[0], s4[1], s4[2], e3[0], e3[1], e3[2], e3[0] + ti1[0], e3[1] + ti1[1], e3[2] + ti1[2])) {\n                    data1.k[i3].to = null;\n                    data1.k[i3].ti = null;\n                }\n                if (s4[0] === e3[0] && s4[1] === e3[1] && to1[0] === 0 && to1[1] === 0 && ti1[0] === 0 && ti1[1] === 0) {\n                    if (s4.length === 2 || s4[2] === e3[2] && to1[2] === 0 && ti1[2] === 0) {\n                        data1.k[i3].to = null;\n                        data1.k[i3].ti = null;\n                    }\n                }\n            }\n        }\n        this.effectsSequence = [\n            getValueAtCurrentTime.bind(this)\n        ];\n        this.data = data1;\n        this.keyframes = data1.k;\n        this.keyframesMetadata = [];\n        this.offsetTime = elem3.data.st;\n        this.k = true;\n        this.kf = true;\n        this._isFirstFrame = true;\n        this.mult = mult1 || 1;\n        this.elem = elem3;\n        this.container = container1;\n        this.comp = elem3.comp;\n        this.getValue = processEffectsSequence;\n        this.setVValue = setVValue;\n        this.interpolateValue = interpolateValue;\n        this.frameId = -1;\n        var arrLen1 = data1.k[0].s.length;\n        this.v = createTypedArray(\"float32\", arrLen1);\n        this.pv = createTypedArray(\"float32\", arrLen1);\n        for(i3 = 0; i3 < arrLen1; i3 += 1){\n            this.v[i3] = initFrame;\n            this.pv[i3] = initFrame;\n        }\n        this._caching = {\n            lastFrame: initFrame,\n            lastIndex: 0,\n            value: createTypedArray(\"float32\", arrLen1)\n        };\n        this.addEffect = addEffect;\n    }\n    var PropertyFactory = function() {\n        function getProp1(elem3, data1, type1, mult1, container1) {\n            if (data1.sid) {\n                data1 = elem3.globalData.slotManager.getProp(data1);\n            }\n            var p6;\n            if (!data1.k.length) {\n                p6 = new ValueProperty(elem3, data1, mult1, container1);\n            } else if (typeof data1.k[0] === \"number\") {\n                p6 = new MultiDimensionalProperty(elem3, data1, mult1, container1);\n            } else {\n                switch(type1){\n                    case 0:\n                        p6 = new KeyframedValueProperty(elem3, data1, mult1, container1);\n                        break;\n                    case 1:\n                        p6 = new KeyframedMultidimensionalProperty(elem3, data1, mult1, container1);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            if (p6.effectsSequence.length) {\n                container1.addDynamicProperty(p6);\n            }\n            return p6;\n        }\n        var ob1 = {\n            getProp: getProp1\n        };\n        return ob1;\n    }();\n    function DynamicPropertyContainer() {}\n    DynamicPropertyContainer.prototype = {\n        addDynamicProperty: function addDynamicProperty1(prop1) {\n            if (this.dynamicProperties.indexOf(prop1) === -1) {\n                this.dynamicProperties.push(prop1);\n                this.container.addDynamicProperty(this);\n                this._isAnimated = true;\n            }\n        },\n        iterateDynamicProperties: function iterateDynamicProperties1() {\n            this._mdf = false;\n            var i3;\n            var len1 = this.dynamicProperties.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                this.dynamicProperties[i3].getValue();\n                if (this.dynamicProperties[i3]._mdf) {\n                    this._mdf = true;\n                }\n            }\n        },\n        initDynamicPropertyContainer: function initDynamicPropertyContainer1(container1) {\n            this.container = container1;\n            this.dynamicProperties = [];\n            this._mdf = false;\n            this._isAnimated = false;\n        }\n    };\n    var pointPool = function() {\n        function create1() {\n            return createTypedArray(\"float32\", 2);\n        }\n        return poolFactory(8, create1);\n    }();\n    function ShapePath() {\n        this.c = false;\n        this._length = 0;\n        this._maxLength = 8;\n        this.v = createSizedArray(this._maxLength);\n        this.o = createSizedArray(this._maxLength);\n        this.i = createSizedArray(this._maxLength);\n    }\n    ShapePath.prototype.setPathData = function(closed1, len1) {\n        this.c = closed1;\n        this.setLength(len1);\n        var i3 = 0;\n        while(i3 < len1){\n            this.v[i3] = pointPool.newElement();\n            this.o[i3] = pointPool.newElement();\n            this.i[i3] = pointPool.newElement();\n            i3 += 1;\n        }\n    };\n    ShapePath.prototype.setLength = function(len1) {\n        while(this._maxLength < len1){\n            this.doubleArrayLength();\n        }\n        this._length = len1;\n    };\n    ShapePath.prototype.doubleArrayLength = function() {\n        this.v = this.v.concat(createSizedArray(this._maxLength));\n        this.i = this.i.concat(createSizedArray(this._maxLength));\n        this.o = this.o.concat(createSizedArray(this._maxLength));\n        this._maxLength *= 2;\n    };\n    ShapePath.prototype.setXYAt = function(x4, y4, type1, pos1, replace1) {\n        var arr3;\n        this._length = Math.max(this._length, pos1 + 1);\n        if (this._length >= this._maxLength) {\n            this.doubleArrayLength();\n        }\n        switch(type1){\n            case \"v\":\n                arr3 = this.v;\n                break;\n            case \"i\":\n                arr3 = this.i;\n                break;\n            case \"o\":\n                arr3 = this.o;\n                break;\n            default:\n                arr3 = [];\n                break;\n        }\n        if (!arr3[pos1] || arr3[pos1] && !replace1) {\n            arr3[pos1] = pointPool.newElement();\n        }\n        arr3[pos1][0] = x4;\n        arr3[pos1][1] = y4;\n    };\n    ShapePath.prototype.setTripleAt = function(vX1, vY1, oX1, oY1, iX1, iY1, pos1, replace1) {\n        this.setXYAt(vX1, vY1, \"v\", pos1, replace1);\n        this.setXYAt(oX1, oY1, \"o\", pos1, replace1);\n        this.setXYAt(iX1, iY1, \"i\", pos1, replace1);\n    };\n    ShapePath.prototype.reverse = function() {\n        var newPath1 = new ShapePath();\n        newPath1.setPathData(this.c, this._length);\n        var vertices1 = this.v;\n        var outPoints1 = this.o;\n        var inPoints1 = this.i;\n        var init1 = 0;\n        if (this.c) {\n            newPath1.setTripleAt(vertices1[0][0], vertices1[0][1], inPoints1[0][0], inPoints1[0][1], outPoints1[0][0], outPoints1[0][1], 0, false);\n            init1 = 1;\n        }\n        var cnt1 = this._length - 1;\n        var len1 = this._length;\n        var i3;\n        for(i3 = init1; i3 < len1; i3 += 1){\n            newPath1.setTripleAt(vertices1[cnt1][0], vertices1[cnt1][1], inPoints1[cnt1][0], inPoints1[cnt1][1], outPoints1[cnt1][0], outPoints1[cnt1][1], i3, false);\n            cnt1 -= 1;\n        }\n        return newPath1;\n    };\n    ShapePath.prototype.length = function() {\n        return this._length;\n    };\n    var shapePool = function() {\n        function create1() {\n            return new ShapePath();\n        }\n        function release1(shapePath1) {\n            var len1 = shapePath1._length;\n            var i3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                pointPool.release(shapePath1.v[i3]);\n                pointPool.release(shapePath1.i[i3]);\n                pointPool.release(shapePath1.o[i3]);\n                shapePath1.v[i3] = null;\n                shapePath1.i[i3] = null;\n                shapePath1.o[i3] = null;\n            }\n            shapePath1._length = 0;\n            shapePath1.c = false;\n        }\n        function clone1(shape3) {\n            var cloned1 = factory1.newElement();\n            var i3;\n            var len1 = shape3._length === undefined ? shape3.v.length : shape3._length;\n            cloned1.setLength(len1);\n            cloned1.c = shape3.c;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                cloned1.setTripleAt(shape3.v[i3][0], shape3.v[i3][1], shape3.o[i3][0], shape3.o[i3][1], shape3.i[i3][0], shape3.i[i3][1], i3);\n            }\n            return cloned1;\n        }\n        var factory1 = poolFactory(4, create1, release1);\n        factory1.clone = clone1;\n        return factory1;\n    }();\n    function ShapeCollection() {\n        this._length = 0;\n        this._maxLength = 4;\n        this.shapes = createSizedArray(this._maxLength);\n    }\n    ShapeCollection.prototype.addShape = function(shapeData1) {\n        if (this._length === this._maxLength) {\n            this.shapes = this.shapes.concat(createSizedArray(this._maxLength));\n            this._maxLength *= 2;\n        }\n        this.shapes[this._length] = shapeData1;\n        this._length += 1;\n    };\n    ShapeCollection.prototype.releaseShapes = function() {\n        var i3;\n        for(i3 = 0; i3 < this._length; i3 += 1){\n            shapePool.release(this.shapes[i3]);\n        }\n        this._length = 0;\n    };\n    var shapeCollectionPool = function() {\n        var ob1 = {\n            newShapeCollection: newShapeCollection1,\n            release: release1\n        };\n        var _length1 = 0;\n        var _maxLength1 = 4;\n        var pool1 = createSizedArray(_maxLength1);\n        function newShapeCollection1() {\n            var shapeCollection1;\n            if (_length1) {\n                _length1 -= 1;\n                shapeCollection1 = pool1[_length1];\n            } else {\n                shapeCollection1 = new ShapeCollection();\n            }\n            return shapeCollection1;\n        }\n        function release1(shapeCollection1) {\n            var i3;\n            var len1 = shapeCollection1._length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                shapePool.release(shapeCollection1.shapes[i3]);\n            }\n            shapeCollection1._length = 0;\n            if (_length1 === _maxLength1) {\n                pool1 = pooling[\"double\"](pool1);\n                _maxLength1 *= 2;\n            }\n            pool1[_length1] = shapeCollection1;\n            _length1 += 1;\n        }\n        return ob1;\n    }();\n    var ShapePropertyFactory = function() {\n        var initFrame1 = -999999;\n        function interpolateShape1(frameNum1, previousValue1, caching1) {\n            var iterationIndex1 = caching1.lastIndex;\n            var keyPropS1;\n            var keyPropE1;\n            var isHold1;\n            var j3;\n            var k3;\n            var jLen1;\n            var kLen1;\n            var perc1;\n            var vertexValue1;\n            var kf1 = this.keyframes;\n            if (frameNum1 < kf1[0].t - this.offsetTime) {\n                keyPropS1 = kf1[0].s[0];\n                isHold1 = true;\n                iterationIndex1 = 0;\n            } else if (frameNum1 >= kf1[kf1.length - 1].t - this.offsetTime) {\n                keyPropS1 = kf1[kf1.length - 1].s ? kf1[kf1.length - 1].s[0] : kf1[kf1.length - 2].e[0];\n                /* if(kf[kf.length - 1].s){\r\n                  keyPropS = kf[kf.length - 1].s[0];\r\n              }else{\r\n                  keyPropS = kf[kf.length - 2].e[0];\r\n              } */ isHold1 = true;\n            } else {\n                var i3 = iterationIndex1;\n                var len1 = kf1.length - 1;\n                var flag1 = true;\n                var keyData1;\n                var nextKeyData1;\n                var keyframeMetadata1;\n                while(flag1){\n                    keyData1 = kf1[i3];\n                    nextKeyData1 = kf1[i3 + 1];\n                    if (nextKeyData1.t - this.offsetTime > frameNum1) {\n                        break;\n                    }\n                    if (i3 < len1 - 1) {\n                        i3 += 1;\n                    } else {\n                        flag1 = false;\n                    }\n                }\n                keyframeMetadata1 = this.keyframesMetadata[i3] || {};\n                isHold1 = keyData1.h === 1;\n                iterationIndex1 = i3;\n                if (!isHold1) {\n                    if (frameNum1 >= nextKeyData1.t - this.offsetTime) {\n                        perc1 = 1;\n                    } else if (frameNum1 < keyData1.t - this.offsetTime) {\n                        perc1 = 0;\n                    } else {\n                        var fnc1;\n                        if (keyframeMetadata1.__fnct) {\n                            fnc1 = keyframeMetadata1.__fnct;\n                        } else {\n                            fnc1 = BezierFactory.getBezierEasing(keyData1.o.x, keyData1.o.y, keyData1.i.x, keyData1.i.y).get;\n                            keyframeMetadata1.__fnct = fnc1;\n                        }\n                        perc1 = fnc1((frameNum1 - (keyData1.t - this.offsetTime)) / (nextKeyData1.t - this.offsetTime - (keyData1.t - this.offsetTime)));\n                    }\n                    keyPropE1 = nextKeyData1.s ? nextKeyData1.s[0] : keyData1.e[0];\n                }\n                keyPropS1 = keyData1.s[0];\n            }\n            jLen1 = previousValue1._length;\n            kLen1 = keyPropS1.i[0].length;\n            caching1.lastIndex = iterationIndex1;\n            for(j3 = 0; j3 < jLen1; j3 += 1){\n                for(k3 = 0; k3 < kLen1; k3 += 1){\n                    vertexValue1 = isHold1 ? keyPropS1.i[j3][k3] : keyPropS1.i[j3][k3] + (keyPropE1.i[j3][k3] - keyPropS1.i[j3][k3]) * perc1;\n                    previousValue1.i[j3][k3] = vertexValue1;\n                    vertexValue1 = isHold1 ? keyPropS1.o[j3][k3] : keyPropS1.o[j3][k3] + (keyPropE1.o[j3][k3] - keyPropS1.o[j3][k3]) * perc1;\n                    previousValue1.o[j3][k3] = vertexValue1;\n                    vertexValue1 = isHold1 ? keyPropS1.v[j3][k3] : keyPropS1.v[j3][k3] + (keyPropE1.v[j3][k3] - keyPropS1.v[j3][k3]) * perc1;\n                    previousValue1.v[j3][k3] = vertexValue1;\n                }\n            }\n        }\n        function interpolateShapeCurrentTime1() {\n            var frameNum1 = this.comp.renderedFrame - this.offsetTime;\n            var initTime1 = this.keyframes[0].t - this.offsetTime;\n            var endTime1 = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;\n            var lastFrame1 = this._caching.lastFrame;\n            if (!(lastFrame1 !== initFrame1 && (lastFrame1 < initTime1 && frameNum1 < initTime1 || lastFrame1 > endTime1 && frameNum1 > endTime1))) {\n                /// /\n                this._caching.lastIndex = lastFrame1 < frameNum1 ? this._caching.lastIndex : 0;\n                this.interpolateShape(frameNum1, this.pv, this._caching); /// /\n            }\n            this._caching.lastFrame = frameNum1;\n            return this.pv;\n        }\n        function resetShape1() {\n            this.paths = this.localShapeCollection;\n        }\n        function shapesEqual1(shape11, shape21) {\n            if (shape11._length !== shape21._length || shape11.c !== shape21.c) {\n                return false;\n            }\n            var i3;\n            var len1 = shape11._length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                if (shape11.v[i3][0] !== shape21.v[i3][0] || shape11.v[i3][1] !== shape21.v[i3][1] || shape11.o[i3][0] !== shape21.o[i3][0] || shape11.o[i3][1] !== shape21.o[i3][1] || shape11.i[i3][0] !== shape21.i[i3][0] || shape11.i[i3][1] !== shape21.i[i3][1]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        function setVValue1(newPath1) {\n            if (!shapesEqual1(this.v, newPath1)) {\n                this.v = shapePool.clone(newPath1);\n                this.localShapeCollection.releaseShapes();\n                this.localShapeCollection.addShape(this.v);\n                this._mdf = true;\n                this.paths = this.localShapeCollection;\n            }\n        }\n        function processEffectsSequence1() {\n            if (this.elem.globalData.frameId === this.frameId) {\n                return;\n            }\n            if (!this.effectsSequence.length) {\n                this._mdf = false;\n                return;\n            }\n            if (this.lock) {\n                this.setVValue(this.pv);\n                return;\n            }\n            this.lock = true;\n            this._mdf = false;\n            var finalValue1;\n            if (this.kf) {\n                finalValue1 = this.pv;\n            } else if (this.data.ks) {\n                finalValue1 = this.data.ks.k;\n            } else {\n                finalValue1 = this.data.pt.k;\n            }\n            var i3;\n            var len1 = this.effectsSequence.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                finalValue1 = this.effectsSequence[i3](finalValue1);\n            }\n            this.setVValue(finalValue1);\n            this.lock = false;\n            this.frameId = this.elem.globalData.frameId;\n        }\n        function ShapeProperty1(elem3, data1, type1) {\n            this.propType = \"shape\";\n            this.comp = elem3.comp;\n            this.container = elem3;\n            this.elem = elem3;\n            this.data = data1;\n            this.k = false;\n            this.kf = false;\n            this._mdf = false;\n            var pathData1 = type1 === 3 ? data1.pt.k : data1.ks.k;\n            this.v = shapePool.clone(pathData1);\n            this.pv = shapePool.clone(this.v);\n            this.localShapeCollection = shapeCollectionPool.newShapeCollection();\n            this.paths = this.localShapeCollection;\n            this.paths.addShape(this.v);\n            this.reset = resetShape1;\n            this.effectsSequence = [];\n        }\n        function addEffect1(effectFunction1) {\n            this.effectsSequence.push(effectFunction1);\n            this.container.addDynamicProperty(this);\n        }\n        ShapeProperty1.prototype.interpolateShape = interpolateShape1;\n        ShapeProperty1.prototype.getValue = processEffectsSequence1;\n        ShapeProperty1.prototype.setVValue = setVValue1;\n        ShapeProperty1.prototype.addEffect = addEffect1;\n        function KeyframedShapeProperty1(elem3, data1, type1) {\n            this.propType = \"shape\";\n            this.comp = elem3.comp;\n            this.elem = elem3;\n            this.container = elem3;\n            this.offsetTime = elem3.data.st;\n            this.keyframes = type1 === 3 ? data1.pt.k : data1.ks.k;\n            this.keyframesMetadata = [];\n            this.k = true;\n            this.kf = true;\n            var len1 = this.keyframes[0].s[0].i.length;\n            this.v = shapePool.newElement();\n            this.v.setPathData(this.keyframes[0].s[0].c, len1);\n            this.pv = shapePool.clone(this.v);\n            this.localShapeCollection = shapeCollectionPool.newShapeCollection();\n            this.paths = this.localShapeCollection;\n            this.paths.addShape(this.v);\n            this.lastFrame = initFrame1;\n            this.reset = resetShape1;\n            this._caching = {\n                lastFrame: initFrame1,\n                lastIndex: 0\n            };\n            this.effectsSequence = [\n                interpolateShapeCurrentTime1.bind(this)\n            ];\n        }\n        KeyframedShapeProperty1.prototype.getValue = processEffectsSequence1;\n        KeyframedShapeProperty1.prototype.interpolateShape = interpolateShape1;\n        KeyframedShapeProperty1.prototype.setVValue = setVValue1;\n        KeyframedShapeProperty1.prototype.addEffect = addEffect1;\n        var EllShapeProperty1 = function() {\n            var cPoint1 = roundCorner;\n            function EllShapePropertyFactory1(elem3, data1) {\n                this.v = shapePool.newElement();\n                this.v.setPathData(true, 4);\n                this.localShapeCollection = shapeCollectionPool.newShapeCollection();\n                this.paths = this.localShapeCollection;\n                this.localShapeCollection.addShape(this.v);\n                this.d = data1.d;\n                this.elem = elem3;\n                this.comp = elem3.comp;\n                this.frameId = -1;\n                this.initDynamicPropertyContainer(elem3);\n                this.p = PropertyFactory.getProp(elem3, data1.p, 1, 0, this);\n                this.s = PropertyFactory.getProp(elem3, data1.s, 1, 0, this);\n                if (this.dynamicProperties.length) {\n                    this.k = true;\n                } else {\n                    this.k = false;\n                    this.convertEllToPath();\n                }\n            }\n            EllShapePropertyFactory1.prototype = {\n                reset: resetShape1,\n                getValue: function getValue1() {\n                    if (this.elem.globalData.frameId === this.frameId) {\n                        return;\n                    }\n                    this.frameId = this.elem.globalData.frameId;\n                    this.iterateDynamicProperties();\n                    if (this._mdf) {\n                        this.convertEllToPath();\n                    }\n                },\n                convertEllToPath: function convertEllToPath1() {\n                    var p01 = this.p.v[0];\n                    var p14 = this.p.v[1];\n                    var s01 = this.s.v[0] / 2;\n                    var s11 = this.s.v[1] / 2;\n                    var _cw1 = this.d !== 3;\n                    var _v1 = this.v;\n                    _v1.v[0][0] = p01;\n                    _v1.v[0][1] = p14 - s11;\n                    _v1.v[1][0] = _cw1 ? p01 + s01 : p01 - s01;\n                    _v1.v[1][1] = p14;\n                    _v1.v[2][0] = p01;\n                    _v1.v[2][1] = p14 + s11;\n                    _v1.v[3][0] = _cw1 ? p01 - s01 : p01 + s01;\n                    _v1.v[3][1] = p14;\n                    _v1.i[0][0] = _cw1 ? p01 - s01 * cPoint1 : p01 + s01 * cPoint1;\n                    _v1.i[0][1] = p14 - s11;\n                    _v1.i[1][0] = _cw1 ? p01 + s01 : p01 - s01;\n                    _v1.i[1][1] = p14 - s11 * cPoint1;\n                    _v1.i[2][0] = _cw1 ? p01 + s01 * cPoint1 : p01 - s01 * cPoint1;\n                    _v1.i[2][1] = p14 + s11;\n                    _v1.i[3][0] = _cw1 ? p01 - s01 : p01 + s01;\n                    _v1.i[3][1] = p14 + s11 * cPoint1;\n                    _v1.o[0][0] = _cw1 ? p01 + s01 * cPoint1 : p01 - s01 * cPoint1;\n                    _v1.o[0][1] = p14 - s11;\n                    _v1.o[1][0] = _cw1 ? p01 + s01 : p01 - s01;\n                    _v1.o[1][1] = p14 + s11 * cPoint1;\n                    _v1.o[2][0] = _cw1 ? p01 - s01 * cPoint1 : p01 + s01 * cPoint1;\n                    _v1.o[2][1] = p14 + s11;\n                    _v1.o[3][0] = _cw1 ? p01 - s01 : p01 + s01;\n                    _v1.o[3][1] = p14 - s11 * cPoint1;\n                }\n            };\n            extendPrototype([\n                DynamicPropertyContainer\n            ], EllShapePropertyFactory1);\n            return EllShapePropertyFactory1;\n        }();\n        var StarShapeProperty1 = function() {\n            function StarShapePropertyFactory1(elem3, data1) {\n                this.v = shapePool.newElement();\n                this.v.setPathData(true, 0);\n                this.elem = elem3;\n                this.comp = elem3.comp;\n                this.data = data1;\n                this.frameId = -1;\n                this.d = data1.d;\n                this.initDynamicPropertyContainer(elem3);\n                if (data1.sy === 1) {\n                    this.ir = PropertyFactory.getProp(elem3, data1.ir, 0, 0, this);\n                    this.is = PropertyFactory.getProp(elem3, data1.is, 0, 0.01, this);\n                    this.convertToPath = this.convertStarToPath;\n                } else {\n                    this.convertToPath = this.convertPolygonToPath;\n                }\n                this.pt = PropertyFactory.getProp(elem3, data1.pt, 0, 0, this);\n                this.p = PropertyFactory.getProp(elem3, data1.p, 1, 0, this);\n                this.r = PropertyFactory.getProp(elem3, data1.r, 0, degToRads, this);\n                this.or = PropertyFactory.getProp(elem3, data1.or, 0, 0, this);\n                this.os = PropertyFactory.getProp(elem3, data1.os, 0, 0.01, this);\n                this.localShapeCollection = shapeCollectionPool.newShapeCollection();\n                this.localShapeCollection.addShape(this.v);\n                this.paths = this.localShapeCollection;\n                if (this.dynamicProperties.length) {\n                    this.k = true;\n                } else {\n                    this.k = false;\n                    this.convertToPath();\n                }\n            }\n            StarShapePropertyFactory1.prototype = {\n                reset: resetShape1,\n                getValue: function getValue1() {\n                    if (this.elem.globalData.frameId === this.frameId) {\n                        return;\n                    }\n                    this.frameId = this.elem.globalData.frameId;\n                    this.iterateDynamicProperties();\n                    if (this._mdf) {\n                        this.convertToPath();\n                    }\n                },\n                convertStarToPath: function convertStarToPath1() {\n                    var numPts1 = Math.floor(this.pt.v) * 2;\n                    var angle1 = Math.PI * 2 / numPts1;\n                    /* this.v.v.length = numPts;\r\n                  this.v.i.length = numPts;\r\n                  this.v.o.length = numPts; */ var longFlag1 = true;\n                    var longRad1 = this.or.v;\n                    var shortRad1 = this.ir.v;\n                    var longRound1 = this.os.v;\n                    var shortRound1 = this.is.v;\n                    var longPerimSegment1 = 2 * Math.PI * longRad1 / (numPts1 * 2);\n                    var shortPerimSegment1 = 2 * Math.PI * shortRad1 / (numPts1 * 2);\n                    var i3;\n                    var rad1;\n                    var roundness1;\n                    var perimSegment1;\n                    var currentAng1 = -Math.PI / 2;\n                    currentAng1 += this.r.v;\n                    var dir1 = this.data.d === 3 ? -1 : 1;\n                    this.v._length = 0;\n                    for(i3 = 0; i3 < numPts1; i3 += 1){\n                        rad1 = longFlag1 ? longRad1 : shortRad1;\n                        roundness1 = longFlag1 ? longRound1 : shortRound1;\n                        perimSegment1 = longFlag1 ? longPerimSegment1 : shortPerimSegment1;\n                        var x4 = rad1 * Math.cos(currentAng1);\n                        var y4 = rad1 * Math.sin(currentAng1);\n                        var ox1 = x4 === 0 && y4 === 0 ? 0 : y4 / Math.sqrt(x4 * x4 + y4 * y4);\n                        var oy1 = x4 === 0 && y4 === 0 ? 0 : -x4 / Math.sqrt(x4 * x4 + y4 * y4);\n                        x4 += +this.p.v[0];\n                        y4 += +this.p.v[1];\n                        this.v.setTripleAt(x4, y4, x4 - ox1 * perimSegment1 * roundness1 * dir1, y4 - oy1 * perimSegment1 * roundness1 * dir1, x4 + ox1 * perimSegment1 * roundness1 * dir1, y4 + oy1 * perimSegment1 * roundness1 * dir1, i3, true);\n                        /* this.v.v[i] = [x,y];\r\n                      this.v.i[i] = [x+ox*perimSegment*roundness*dir,y+oy*perimSegment*roundness*dir];\r\n                      this.v.o[i] = [x-ox*perimSegment*roundness*dir,y-oy*perimSegment*roundness*dir];\r\n                      this.v._length = numPts; */ longFlag1 = !longFlag1;\n                        currentAng1 += angle1 * dir1;\n                    }\n                },\n                convertPolygonToPath: function convertPolygonToPath1() {\n                    var numPts1 = Math.floor(this.pt.v);\n                    var angle1 = Math.PI * 2 / numPts1;\n                    var rad1 = this.or.v;\n                    var roundness1 = this.os.v;\n                    var perimSegment1 = 2 * Math.PI * rad1 / (numPts1 * 4);\n                    var i3;\n                    var currentAng1 = -Math.PI * 0.5;\n                    var dir1 = this.data.d === 3 ? -1 : 1;\n                    currentAng1 += this.r.v;\n                    this.v._length = 0;\n                    for(i3 = 0; i3 < numPts1; i3 += 1){\n                        var x4 = rad1 * Math.cos(currentAng1);\n                        var y4 = rad1 * Math.sin(currentAng1);\n                        var ox1 = x4 === 0 && y4 === 0 ? 0 : y4 / Math.sqrt(x4 * x4 + y4 * y4);\n                        var oy1 = x4 === 0 && y4 === 0 ? 0 : -x4 / Math.sqrt(x4 * x4 + y4 * y4);\n                        x4 += +this.p.v[0];\n                        y4 += +this.p.v[1];\n                        this.v.setTripleAt(x4, y4, x4 - ox1 * perimSegment1 * roundness1 * dir1, y4 - oy1 * perimSegment1 * roundness1 * dir1, x4 + ox1 * perimSegment1 * roundness1 * dir1, y4 + oy1 * perimSegment1 * roundness1 * dir1, i3, true);\n                        currentAng1 += angle1 * dir1;\n                    }\n                    this.paths.length = 0;\n                    this.paths[0] = this.v;\n                }\n            };\n            extendPrototype([\n                DynamicPropertyContainer\n            ], StarShapePropertyFactory1);\n            return StarShapePropertyFactory1;\n        }();\n        var RectShapeProperty1 = function() {\n            function RectShapePropertyFactory1(elem3, data1) {\n                this.v = shapePool.newElement();\n                this.v.c = true;\n                this.localShapeCollection = shapeCollectionPool.newShapeCollection();\n                this.localShapeCollection.addShape(this.v);\n                this.paths = this.localShapeCollection;\n                this.elem = elem3;\n                this.comp = elem3.comp;\n                this.frameId = -1;\n                this.d = data1.d;\n                this.initDynamicPropertyContainer(elem3);\n                this.p = PropertyFactory.getProp(elem3, data1.p, 1, 0, this);\n                this.s = PropertyFactory.getProp(elem3, data1.s, 1, 0, this);\n                this.r = PropertyFactory.getProp(elem3, data1.r, 0, 0, this);\n                if (this.dynamicProperties.length) {\n                    this.k = true;\n                } else {\n                    this.k = false;\n                    this.convertRectToPath();\n                }\n            }\n            RectShapePropertyFactory1.prototype = {\n                convertRectToPath: function convertRectToPath1() {\n                    var p01 = this.p.v[0];\n                    var p14 = this.p.v[1];\n                    var v01 = this.s.v[0] / 2;\n                    var v11 = this.s.v[1] / 2;\n                    var round1 = bmMin(v01, v11, this.r.v);\n                    var cPoint1 = round1 * (1 - roundCorner);\n                    this.v._length = 0;\n                    if (this.d === 2 || this.d === 1) {\n                        this.v.setTripleAt(p01 + v01, p14 - v11 + round1, p01 + v01, p14 - v11 + round1, p01 + v01, p14 - v11 + cPoint1, 0, true);\n                        this.v.setTripleAt(p01 + v01, p14 + v11 - round1, p01 + v01, p14 + v11 - cPoint1, p01 + v01, p14 + v11 - round1, 1, true);\n                        if (round1 !== 0) {\n                            this.v.setTripleAt(p01 + v01 - round1, p14 + v11, p01 + v01 - round1, p14 + v11, p01 + v01 - cPoint1, p14 + v11, 2, true);\n                            this.v.setTripleAt(p01 - v01 + round1, p14 + v11, p01 - v01 + cPoint1, p14 + v11, p01 - v01 + round1, p14 + v11, 3, true);\n                            this.v.setTripleAt(p01 - v01, p14 + v11 - round1, p01 - v01, p14 + v11 - round1, p01 - v01, p14 + v11 - cPoint1, 4, true);\n                            this.v.setTripleAt(p01 - v01, p14 - v11 + round1, p01 - v01, p14 - v11 + cPoint1, p01 - v01, p14 - v11 + round1, 5, true);\n                            this.v.setTripleAt(p01 - v01 + round1, p14 - v11, p01 - v01 + round1, p14 - v11, p01 - v01 + cPoint1, p14 - v11, 6, true);\n                            this.v.setTripleAt(p01 + v01 - round1, p14 - v11, p01 + v01 - cPoint1, p14 - v11, p01 + v01 - round1, p14 - v11, 7, true);\n                        } else {\n                            this.v.setTripleAt(p01 - v01, p14 + v11, p01 - v01 + cPoint1, p14 + v11, p01 - v01, p14 + v11, 2);\n                            this.v.setTripleAt(p01 - v01, p14 - v11, p01 - v01, p14 - v11 + cPoint1, p01 - v01, p14 - v11, 3);\n                        }\n                    } else {\n                        this.v.setTripleAt(p01 + v01, p14 - v11 + round1, p01 + v01, p14 - v11 + cPoint1, p01 + v01, p14 - v11 + round1, 0, true);\n                        if (round1 !== 0) {\n                            this.v.setTripleAt(p01 + v01 - round1, p14 - v11, p01 + v01 - round1, p14 - v11, p01 + v01 - cPoint1, p14 - v11, 1, true);\n                            this.v.setTripleAt(p01 - v01 + round1, p14 - v11, p01 - v01 + cPoint1, p14 - v11, p01 - v01 + round1, p14 - v11, 2, true);\n                            this.v.setTripleAt(p01 - v01, p14 - v11 + round1, p01 - v01, p14 - v11 + round1, p01 - v01, p14 - v11 + cPoint1, 3, true);\n                            this.v.setTripleAt(p01 - v01, p14 + v11 - round1, p01 - v01, p14 + v11 - cPoint1, p01 - v01, p14 + v11 - round1, 4, true);\n                            this.v.setTripleAt(p01 - v01 + round1, p14 + v11, p01 - v01 + round1, p14 + v11, p01 - v01 + cPoint1, p14 + v11, 5, true);\n                            this.v.setTripleAt(p01 + v01 - round1, p14 + v11, p01 + v01 - cPoint1, p14 + v11, p01 + v01 - round1, p14 + v11, 6, true);\n                            this.v.setTripleAt(p01 + v01, p14 + v11 - round1, p01 + v01, p14 + v11 - round1, p01 + v01, p14 + v11 - cPoint1, 7, true);\n                        } else {\n                            this.v.setTripleAt(p01 - v01, p14 - v11, p01 - v01 + cPoint1, p14 - v11, p01 - v01, p14 - v11, 1, true);\n                            this.v.setTripleAt(p01 - v01, p14 + v11, p01 - v01, p14 + v11 - cPoint1, p01 - v01, p14 + v11, 2, true);\n                            this.v.setTripleAt(p01 + v01, p14 + v11, p01 + v01 - cPoint1, p14 + v11, p01 + v01, p14 + v11, 3, true);\n                        }\n                    }\n                },\n                getValue: function getValue1() {\n                    if (this.elem.globalData.frameId === this.frameId) {\n                        return;\n                    }\n                    this.frameId = this.elem.globalData.frameId;\n                    this.iterateDynamicProperties();\n                    if (this._mdf) {\n                        this.convertRectToPath();\n                    }\n                },\n                reset: resetShape1\n            };\n            extendPrototype([\n                DynamicPropertyContainer\n            ], RectShapePropertyFactory1);\n            return RectShapePropertyFactory1;\n        }();\n        function getShapeProp1(elem3, data1, type1) {\n            var prop1;\n            if (type1 === 3 || type1 === 4) {\n                var dataProp1 = type1 === 3 ? data1.pt : data1.ks;\n                var keys1 = dataProp1.k;\n                if (keys1.length) {\n                    prop1 = new KeyframedShapeProperty1(elem3, data1, type1);\n                } else {\n                    prop1 = new ShapeProperty1(elem3, data1, type1);\n                }\n            } else if (type1 === 5) {\n                prop1 = new RectShapeProperty1(elem3, data1);\n            } else if (type1 === 6) {\n                prop1 = new EllShapeProperty1(elem3, data1);\n            } else if (type1 === 7) {\n                prop1 = new StarShapeProperty1(elem3, data1);\n            }\n            if (prop1.k) {\n                elem3.addDynamicProperty(prop1);\n            }\n            return prop1;\n        }\n        function getConstructorFunction1() {\n            return ShapeProperty1;\n        }\n        function getKeyframedConstructorFunction1() {\n            return KeyframedShapeProperty1;\n        }\n        var ob1 = {};\n        ob1.getShapeProp = getShapeProp1;\n        ob1.getConstructorFunction = getConstructorFunction1;\n        ob1.getKeyframedConstructorFunction = getKeyframedConstructorFunction1;\n        return ob1;\n    }();\n    /*!\r\n   Transformation Matrix v2.0\r\n   (c) Epistemex 2014-2015\r\n   www.epistemex.com\r\n   By Ken Fyrstenberg\r\n   Contributions by leeoniya.\r\n   License: MIT, header required.\r\n   */ /**\r\n   * 2D transformation matrix object initialized with identity matrix.\r\n   *\r\n   * The matrix can synchronize a canvas context by supplying the context\r\n   * as an argument, or later apply current absolute transform to an\r\n   * existing context.\r\n   *\r\n   * All values are handled as floating point values.\r\n   *\r\n   * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix\r\n   * @prop {number} a - scale x\r\n   * @prop {number} b - shear y\r\n   * @prop {number} c - shear x\r\n   * @prop {number} d - scale y\r\n   * @prop {number} e - translate x\r\n   * @prop {number} f - translate y\r\n   * @prop {CanvasRenderingContext2D|null} [context=null] - set or get current canvas context\r\n   * @constructor\r\n   */ var Matrix = function() {\n        var _cos1 = Math.cos;\n        var _sin1 = Math.sin;\n        var _tan1 = Math.tan;\n        var _rnd1 = Math.round;\n        function reset1() {\n            this.props[0] = 1;\n            this.props[1] = 0;\n            this.props[2] = 0;\n            this.props[3] = 0;\n            this.props[4] = 0;\n            this.props[5] = 1;\n            this.props[6] = 0;\n            this.props[7] = 0;\n            this.props[8] = 0;\n            this.props[9] = 0;\n            this.props[10] = 1;\n            this.props[11] = 0;\n            this.props[12] = 0;\n            this.props[13] = 0;\n            this.props[14] = 0;\n            this.props[15] = 1;\n            return this;\n        }\n        function rotate1(angle1) {\n            if (angle1 === 0) {\n                return this;\n            }\n            var mCos1 = _cos1(angle1);\n            var mSin1 = _sin1(angle1);\n            return this._t(mCos1, -mSin1, 0, 0, mSin1, mCos1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n        }\n        function rotateX1(angle1) {\n            if (angle1 === 0) {\n                return this;\n            }\n            var mCos1 = _cos1(angle1);\n            var mSin1 = _sin1(angle1);\n            return this._t(1, 0, 0, 0, 0, mCos1, -mSin1, 0, 0, mSin1, mCos1, 0, 0, 0, 0, 1);\n        }\n        function rotateY1(angle1) {\n            if (angle1 === 0) {\n                return this;\n            }\n            var mCos1 = _cos1(angle1);\n            var mSin1 = _sin1(angle1);\n            return this._t(mCos1, 0, mSin1, 0, 0, 1, 0, 0, -mSin1, 0, mCos1, 0, 0, 0, 0, 1);\n        }\n        function rotateZ1(angle1) {\n            if (angle1 === 0) {\n                return this;\n            }\n            var mCos1 = _cos1(angle1);\n            var mSin1 = _sin1(angle1);\n            return this._t(mCos1, -mSin1, 0, 0, mSin1, mCos1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n        }\n        function shear1(sx1, sy1) {\n            return this._t(1, sy1, sx1, 1, 0, 0);\n        }\n        function skew1(ax1, ay1) {\n            return this.shear(_tan1(ax1), _tan1(ay1));\n        }\n        function skewFromAxis1(ax1, angle1) {\n            var mCos1 = _cos1(angle1);\n            var mSin1 = _sin1(angle1);\n            return this._t(mCos1, mSin1, 0, 0, -mSin1, mCos1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, _tan1(ax1), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(mCos1, -mSin1, 0, 0, mSin1, mCos1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1); // return this._t(mCos, mSin, -mSin, mCos, 0, 0)._t(1, 0, _tan(ax), 1, 0, 0)._t(mCos, -mSin, mSin, mCos, 0, 0);\n        }\n        function scale2(sx1, sy1, sz1) {\n            if (!sz1 && sz1 !== 0) {\n                sz1 = 1;\n            }\n            if (sx1 === 1 && sy1 === 1 && sz1 === 1) {\n                return this;\n            }\n            return this._t(sx1, 0, 0, 0, 0, sy1, 0, 0, 0, 0, sz1, 0, 0, 0, 0, 1);\n        }\n        function setTransform1(a3, b3, c4, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p6) {\n            this.props[0] = a3;\n            this.props[1] = b3;\n            this.props[2] = c4;\n            this.props[3] = d3;\n            this.props[4] = e3;\n            this.props[5] = f3;\n            this.props[6] = g3;\n            this.props[7] = h3;\n            this.props[8] = i3;\n            this.props[9] = j3;\n            this.props[10] = k3;\n            this.props[11] = l3;\n            this.props[12] = m3;\n            this.props[13] = n3;\n            this.props[14] = o3;\n            this.props[15] = p6;\n            return this;\n        }\n        function translate1(tx1, ty1, tz1) {\n            tz1 = tz1 || 0;\n            if (tx1 !== 0 || ty1 !== 0 || tz1 !== 0) {\n                return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx1, ty1, tz1, 1);\n            }\n            return this;\n        }\n        function transform1(a21, b21, c21, d21, e21, f21, g21, h21, i21, j21, k21, l21, m21, n21, o21, p22) {\n            var _p1 = this.props;\n            if (a21 === 1 && b21 === 0 && c21 === 0 && d21 === 0 && e21 === 0 && f21 === 1 && g21 === 0 && h21 === 0 && i21 === 0 && j21 === 0 && k21 === 1 && l21 === 0) {\n                // NOTE: commenting this condition because TurboFan deoptimizes code when present\n                // if(m2 !== 0 || n2 !== 0 || o2 !== 0){\n                _p1[12] = _p1[12] * a21 + _p1[15] * m21;\n                _p1[13] = _p1[13] * f21 + _p1[15] * n21;\n                _p1[14] = _p1[14] * k21 + _p1[15] * o21;\n                _p1[15] *= p22; // }\n                this._identityCalculated = false;\n                return this;\n            }\n            var a11 = _p1[0];\n            var b11 = _p1[1];\n            var c11 = _p1[2];\n            var d11 = _p1[3];\n            var e11 = _p1[4];\n            var f11 = _p1[5];\n            var g11 = _p1[6];\n            var h11 = _p1[7];\n            var i11 = _p1[8];\n            var j11 = _p1[9];\n            var k11 = _p1[10];\n            var l11 = _p1[11];\n            var m11 = _p1[12];\n            var n11 = _p1[13];\n            var o11 = _p1[14];\n            var p14 = _p1[15];\n            /* matrix order (canvas compatible):\r\n           * ace\r\n           * bdf\r\n           * 001\r\n           */ _p1[0] = a11 * a21 + b11 * e21 + c11 * i21 + d11 * m21;\n            _p1[1] = a11 * b21 + b11 * f21 + c11 * j21 + d11 * n21;\n            _p1[2] = a11 * c21 + b11 * g21 + c11 * k21 + d11 * o21;\n            _p1[3] = a11 * d21 + b11 * h21 + c11 * l21 + d11 * p22;\n            _p1[4] = e11 * a21 + f11 * e21 + g11 * i21 + h11 * m21;\n            _p1[5] = e11 * b21 + f11 * f21 + g11 * j21 + h11 * n21;\n            _p1[6] = e11 * c21 + f11 * g21 + g11 * k21 + h11 * o21;\n            _p1[7] = e11 * d21 + f11 * h21 + g11 * l21 + h11 * p22;\n            _p1[8] = i11 * a21 + j11 * e21 + k11 * i21 + l11 * m21;\n            _p1[9] = i11 * b21 + j11 * f21 + k11 * j21 + l11 * n21;\n            _p1[10] = i11 * c21 + j11 * g21 + k11 * k21 + l11 * o21;\n            _p1[11] = i11 * d21 + j11 * h21 + k11 * l21 + l11 * p22;\n            _p1[12] = m11 * a21 + n11 * e21 + o11 * i21 + p14 * m21;\n            _p1[13] = m11 * b21 + n11 * f21 + o11 * j21 + p14 * n21;\n            _p1[14] = m11 * c21 + n11 * g21 + o11 * k21 + p14 * o21;\n            _p1[15] = m11 * d21 + n11 * h21 + o11 * l21 + p14 * p22;\n            this._identityCalculated = false;\n            return this;\n        }\n        function multiply1(matrix1) {\n            var matrixProps1 = matrix1.props;\n            return this.transform(matrixProps1[0], matrixProps1[1], matrixProps1[2], matrixProps1[3], matrixProps1[4], matrixProps1[5], matrixProps1[6], matrixProps1[7], matrixProps1[8], matrixProps1[9], matrixProps1[10], matrixProps1[11], matrixProps1[12], matrixProps1[13], matrixProps1[14], matrixProps1[15]);\n        }\n        function isIdentity1() {\n            if (!this._identityCalculated) {\n                this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);\n                this._identityCalculated = true;\n            }\n            return this._identity;\n        }\n        function equals1(matr1) {\n            var i3 = 0;\n            while(i3 < 16){\n                if (matr1.props[i3] !== this.props[i3]) {\n                    return false;\n                }\n                i3 += 1;\n            }\n            return true;\n        }\n        function clone1(matr1) {\n            var i3;\n            for(i3 = 0; i3 < 16; i3 += 1){\n                matr1.props[i3] = this.props[i3];\n            }\n            return matr1;\n        }\n        function cloneFromProps1(props1) {\n            var i3;\n            for(i3 = 0; i3 < 16; i3 += 1){\n                this.props[i3] = props1[i3];\n            }\n        }\n        function applyToPoint1(x4, y4, z4) {\n            return {\n                x: x4 * this.props[0] + y4 * this.props[4] + z4 * this.props[8] + this.props[12],\n                y: x4 * this.props[1] + y4 * this.props[5] + z4 * this.props[9] + this.props[13],\n                z: x4 * this.props[2] + y4 * this.props[6] + z4 * this.props[10] + this.props[14]\n            };\n        /* return {\r\n           x: x * me.a + y * me.c + me.e,\r\n           y: x * me.b + y * me.d + me.f\r\n           }; */ }\n        function applyToX1(x4, y4, z4) {\n            return x4 * this.props[0] + y4 * this.props[4] + z4 * this.props[8] + this.props[12];\n        }\n        function applyToY1(x4, y4, z4) {\n            return x4 * this.props[1] + y4 * this.props[5] + z4 * this.props[9] + this.props[13];\n        }\n        function applyToZ1(x4, y4, z4) {\n            return x4 * this.props[2] + y4 * this.props[6] + z4 * this.props[10] + this.props[14];\n        }\n        function getInverseMatrix1() {\n            var determinant1 = this.props[0] * this.props[5] - this.props[1] * this.props[4];\n            var a3 = this.props[5] / determinant1;\n            var b3 = -this.props[1] / determinant1;\n            var c4 = -this.props[4] / determinant1;\n            var d3 = this.props[0] / determinant1;\n            var e3 = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / determinant1;\n            var f3 = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / determinant1;\n            var inverseMatrix1 = new Matrix();\n            inverseMatrix1.props[0] = a3;\n            inverseMatrix1.props[1] = b3;\n            inverseMatrix1.props[4] = c4;\n            inverseMatrix1.props[5] = d3;\n            inverseMatrix1.props[12] = e3;\n            inverseMatrix1.props[13] = f3;\n            return inverseMatrix1;\n        }\n        function inversePoint1(pt5) {\n            var inverseMatrix1 = this.getInverseMatrix();\n            return inverseMatrix1.applyToPointArray(pt5[0], pt5[1], pt5[2] || 0);\n        }\n        function inversePoints1(pts1) {\n            var i3;\n            var len1 = pts1.length;\n            var retPts1 = [];\n            for(i3 = 0; i3 < len1; i3 += 1){\n                retPts1[i3] = inversePoint1(pts1[i3]);\n            }\n            return retPts1;\n        }\n        function applyToTriplePoints1(pt11, pt21, pt31) {\n            var arr3 = createTypedArray(\"float32\", 6);\n            if (this.isIdentity()) {\n                arr3[0] = pt11[0];\n                arr3[1] = pt11[1];\n                arr3[2] = pt21[0];\n                arr3[3] = pt21[1];\n                arr3[4] = pt31[0];\n                arr3[5] = pt31[1];\n            } else {\n                var p01 = this.props[0];\n                var p14 = this.props[1];\n                var p41 = this.props[4];\n                var p51 = this.props[5];\n                var p121 = this.props[12];\n                var p131 = this.props[13];\n                arr3[0] = pt11[0] * p01 + pt11[1] * p41 + p121;\n                arr3[1] = pt11[0] * p14 + pt11[1] * p51 + p131;\n                arr3[2] = pt21[0] * p01 + pt21[1] * p41 + p121;\n                arr3[3] = pt21[0] * p14 + pt21[1] * p51 + p131;\n                arr3[4] = pt31[0] * p01 + pt31[1] * p41 + p121;\n                arr3[5] = pt31[0] * p14 + pt31[1] * p51 + p131;\n            }\n            return arr3;\n        }\n        function applyToPointArray1(x4, y4, z4) {\n            var arr3;\n            if (this.isIdentity()) {\n                arr3 = [\n                    x4,\n                    y4,\n                    z4\n                ];\n            } else {\n                arr3 = [\n                    x4 * this.props[0] + y4 * this.props[4] + z4 * this.props[8] + this.props[12],\n                    x4 * this.props[1] + y4 * this.props[5] + z4 * this.props[9] + this.props[13],\n                    x4 * this.props[2] + y4 * this.props[6] + z4 * this.props[10] + this.props[14]\n                ];\n            }\n            return arr3;\n        }\n        function applyToPointStringified1(x4, y4) {\n            if (this.isIdentity()) {\n                return x4 + \",\" + y4;\n            }\n            var _p1 = this.props;\n            return Math.round((x4 * _p1[0] + y4 * _p1[4] + _p1[12]) * 100) / 100 + \",\" + Math.round((x4 * _p1[1] + y4 * _p1[5] + _p1[13]) * 100) / 100;\n        }\n        function toCSS1() {\n            // Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.\n            /* if(this.isIdentity()) {\r\n              return '';\r\n          } */ var i3 = 0;\n            var props1 = this.props;\n            var cssValue1 = \"matrix3d(\";\n            var v5 = 10000;\n            while(i3 < 16){\n                cssValue1 += _rnd1(props1[i3] * v5) / v5;\n                cssValue1 += i3 === 15 ? \")\" : \",\";\n                i3 += 1;\n            }\n            return cssValue1;\n        }\n        function roundMatrixProperty1(val3) {\n            var v5 = 10000;\n            if (val3 < 0.000001 && val3 > 0 || val3 > -0.000001 && val3 < 0) {\n                return _rnd1(val3 * v5) / v5;\n            }\n            return val3;\n        }\n        function to2dCSS1() {\n            // Doesn't make much sense to add this optimization. If it is an identity matrix, it's very likely this will get called only once since it won't be keyframed.\n            /* if(this.isIdentity()) {\r\n              return '';\r\n          } */ var props1 = this.props;\n            var _a1 = roundMatrixProperty1(props1[0]);\n            var _b1 = roundMatrixProperty1(props1[1]);\n            var _c1 = roundMatrixProperty1(props1[4]);\n            var _d1 = roundMatrixProperty1(props1[5]);\n            var _e1 = roundMatrixProperty1(props1[12]);\n            var _f1 = roundMatrixProperty1(props1[13]);\n            return \"matrix(\" + _a1 + \",\" + _b1 + \",\" + _c1 + \",\" + _d1 + \",\" + _e1 + \",\" + _f1 + \")\";\n        }\n        return function() {\n            this.reset = reset1;\n            this.rotate = rotate1;\n            this.rotateX = rotateX1;\n            this.rotateY = rotateY1;\n            this.rotateZ = rotateZ1;\n            this.skew = skew1;\n            this.skewFromAxis = skewFromAxis1;\n            this.shear = shear1;\n            this.scale = scale2;\n            this.setTransform = setTransform1;\n            this.translate = translate1;\n            this.transform = transform1;\n            this.multiply = multiply1;\n            this.applyToPoint = applyToPoint1;\n            this.applyToX = applyToX1;\n            this.applyToY = applyToY1;\n            this.applyToZ = applyToZ1;\n            this.applyToPointArray = applyToPointArray1;\n            this.applyToTriplePoints = applyToTriplePoints1;\n            this.applyToPointStringified = applyToPointStringified1;\n            this.toCSS = toCSS1;\n            this.to2dCSS = to2dCSS1;\n            this.clone = clone1;\n            this.cloneFromProps = cloneFromProps1;\n            this.equals = equals1;\n            this.inversePoints = inversePoints1;\n            this.inversePoint = inversePoint1;\n            this.getInverseMatrix = getInverseMatrix1;\n            this._t = this.transform;\n            this.isIdentity = isIdentity1;\n            this._identity = true;\n            this._identityCalculated = false;\n            this.props = createTypedArray(\"float32\", 16);\n            this.reset();\n        };\n    }();\n    function _typeof$3(obj1) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof$3 = function _typeof1(obj1) {\n                return typeof obj1;\n            };\n        } else {\n            _typeof$3 = function _typeof1(obj1) {\n                return obj1 && typeof Symbol === \"function\" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? \"symbol\" : typeof obj1;\n            };\n        }\n        return _typeof$3(obj1);\n    }\n    var lottie = {};\n    var standalone = \"__[STANDALONE]__\";\n    var animationData = \"__[ANIMATIONDATA]__\";\n    var renderer = \"\";\n    function setLocation(href1) {\n        setLocationHref(href1);\n    }\n    function searchAnimations() {\n        if (standalone === true) {\n            animationManager.searchAnimations(animationData, standalone, renderer);\n        } else {\n            animationManager.searchAnimations();\n        }\n    }\n    function setSubframeRendering(flag1) {\n        setSubframeEnabled(flag1);\n    }\n    function setPrefix(prefix1) {\n        setIdPrefix(prefix1);\n    }\n    function loadAnimation(params1) {\n        if (standalone === true) {\n            params1.animationData = JSON.parse(animationData);\n        }\n        return animationManager.loadAnimation(params1);\n    }\n    function setQuality(value3) {\n        if (typeof value3 === \"string\") {\n            switch(value3){\n                case \"high\":\n                    setDefaultCurveSegments(200);\n                    break;\n                default:\n                case \"medium\":\n                    setDefaultCurveSegments(50);\n                    break;\n                case \"low\":\n                    setDefaultCurveSegments(10);\n                    break;\n            }\n        } else if (!isNaN(value3) && value3 > 1) {\n            setDefaultCurveSegments(value3);\n        }\n        if (getDefaultCurveSegments() >= 50) {\n            roundValues(false);\n        } else {\n            roundValues(true);\n        }\n    }\n    function inBrowser() {\n        return typeof navigator !== \"undefined\";\n    }\n    function installPlugin(type1, plugin1) {\n        if (type1 === \"expressions\") {\n            setExpressionsPlugin(plugin1);\n        }\n    }\n    function getFactory(name1) {\n        switch(name1){\n            case \"propertyFactory\":\n                return PropertyFactory;\n            case \"shapePropertyFactory\":\n                return ShapePropertyFactory;\n            case \"matrix\":\n                return Matrix;\n            default:\n                return null;\n        }\n    }\n    lottie.play = animationManager.play;\n    lottie.pause = animationManager.pause;\n    lottie.setLocationHref = setLocation;\n    lottie.togglePause = animationManager.togglePause;\n    lottie.setSpeed = animationManager.setSpeed;\n    lottie.setDirection = animationManager.setDirection;\n    lottie.stop = animationManager.stop;\n    lottie.searchAnimations = searchAnimations;\n    lottie.registerAnimation = animationManager.registerAnimation;\n    lottie.loadAnimation = loadAnimation;\n    lottie.setSubframeRendering = setSubframeRendering;\n    lottie.resize = animationManager.resize; // lottie.start = start;\n    lottie.goToAndStop = animationManager.goToAndStop;\n    lottie.destroy = animationManager.destroy;\n    lottie.setQuality = setQuality;\n    lottie.inBrowser = inBrowser;\n    lottie.installPlugin = installPlugin;\n    lottie.freeze = animationManager.freeze;\n    lottie.unfreeze = animationManager.unfreeze;\n    lottie.setVolume = animationManager.setVolume;\n    lottie.mute = animationManager.mute;\n    lottie.unmute = animationManager.unmute;\n    lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations;\n    lottie.useWebWorker = setWebWorker;\n    lottie.setIDPrefix = setPrefix;\n    lottie.__getFactory = getFactory;\n    lottie.version = \"5.12.2\";\n    function checkReady() {\n        if (document.readyState === \"complete\") {\n            clearInterval(readyStateCheckInterval);\n            searchAnimations();\n        }\n    }\n    function getQueryVariable(variable1) {\n        var vars1 = queryString.split(\"&\");\n        for(var i3 = 0; i3 < vars1.length; i3 += 1){\n            var pair1 = vars1[i3].split(\"=\");\n            if (decodeURIComponent(pair1[0]) == variable1) {\n                // eslint-disable-line eqeqeq\n                return decodeURIComponent(pair1[1]);\n            }\n        }\n        return null;\n    }\n    var queryString = \"\";\n    if (standalone) {\n        var scripts = document.getElementsByTagName(\"script\");\n        var index = scripts.length - 1;\n        var myScript = scripts[index] || {\n            src: \"\"\n        };\n        queryString = myScript.src ? myScript.src.replace(/^[^\\?]+\\??/, \"\") : \"\"; // eslint-disable-line no-useless-escape\n        renderer = getQueryVariable(\"renderer\");\n    }\n    var readyStateCheckInterval = setInterval(checkReady, 100); // this adds bodymovin to the window object for backwards compatibility\n    try {\n        if (!(( false ? 0 : _typeof$3(exports)) === \"object\" && \"object\" !== \"undefined\") && !( true && __webpack_require__.amdO // eslint-disable-line no-undef\n        )) {}\n    } catch (err) {}\n    var ShapeModifiers = function() {\n        var ob1 = {};\n        var modifiers1 = {};\n        ob1.registerModifier = registerModifier1;\n        ob1.getModifier = getModifier1;\n        function registerModifier1(nm1, factory1) {\n            if (!modifiers1[nm1]) {\n                modifiers1[nm1] = factory1;\n            }\n        }\n        function getModifier1(nm1, elem3, data1) {\n            return new modifiers1[nm1](elem3, data1);\n        }\n        return ob1;\n    }();\n    function ShapeModifier() {}\n    ShapeModifier.prototype.initModifierProperties = function() {};\n    ShapeModifier.prototype.addShapeToModifier = function() {};\n    ShapeModifier.prototype.addShape = function(data1) {\n        if (!this.closed) {\n            // Adding shape to dynamic properties. It covers the case where a shape has no effects applied, to reset it's _mdf state on every tick.\n            data1.sh.container.addDynamicProperty(data1.sh);\n            var shapeData1 = {\n                shape: data1.sh,\n                data: data1,\n                localShapeCollection: shapeCollectionPool.newShapeCollection()\n            };\n            this.shapes.push(shapeData1);\n            this.addShapeToModifier(shapeData1);\n            if (this._isAnimated) {\n                data1.setAsAnimated();\n            }\n        }\n    };\n    ShapeModifier.prototype.init = function(elem3, data1) {\n        this.shapes = [];\n        this.elem = elem3;\n        this.initDynamicPropertyContainer(elem3);\n        this.initModifierProperties(elem3, data1);\n        this.frameId = initialDefaultFrame;\n        this.closed = false;\n        this.k = false;\n        if (this.dynamicProperties.length) {\n            this.k = true;\n        } else {\n            this.getValue(true);\n        }\n    };\n    ShapeModifier.prototype.processKeys = function() {\n        if (this.elem.globalData.frameId === this.frameId) {\n            return;\n        }\n        this.frameId = this.elem.globalData.frameId;\n        this.iterateDynamicProperties();\n    };\n    extendPrototype([\n        DynamicPropertyContainer\n    ], ShapeModifier);\n    function TrimModifier() {}\n    extendPrototype([\n        ShapeModifier\n    ], TrimModifier);\n    TrimModifier.prototype.initModifierProperties = function(elem3, data1) {\n        this.s = PropertyFactory.getProp(elem3, data1.s, 0, 0.01, this);\n        this.e = PropertyFactory.getProp(elem3, data1.e, 0, 0.01, this);\n        this.o = PropertyFactory.getProp(elem3, data1.o, 0, 0, this);\n        this.sValue = 0;\n        this.eValue = 0;\n        this.getValue = this.processKeys;\n        this.m = data1.m;\n        this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;\n    };\n    TrimModifier.prototype.addShapeToModifier = function(shapeData1) {\n        shapeData1.pathsData = [];\n    };\n    TrimModifier.prototype.calculateShapeEdges = function(s4, e3, shapeLength1, addedLength1, totalModifierLength1) {\n        var segments1 = [];\n        if (e3 <= 1) {\n            segments1.push({\n                s: s4,\n                e: e3\n            });\n        } else if (s4 >= 1) {\n            segments1.push({\n                s: s4 - 1,\n                e: e3 - 1\n            });\n        } else {\n            segments1.push({\n                s: s4,\n                e: 1\n            });\n            segments1.push({\n                s: 0,\n                e: e3 - 1\n            });\n        }\n        var shapeSegments1 = [];\n        var i3;\n        var len1 = segments1.length;\n        var segmentOb1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            segmentOb1 = segments1[i3];\n            if (!(segmentOb1.e * totalModifierLength1 < addedLength1 || segmentOb1.s * totalModifierLength1 > addedLength1 + shapeLength1)) {\n                var shapeS1;\n                var shapeE1;\n                if (segmentOb1.s * totalModifierLength1 <= addedLength1) {\n                    shapeS1 = 0;\n                } else {\n                    shapeS1 = (segmentOb1.s * totalModifierLength1 - addedLength1) / shapeLength1;\n                }\n                if (segmentOb1.e * totalModifierLength1 >= addedLength1 + shapeLength1) {\n                    shapeE1 = 1;\n                } else {\n                    shapeE1 = (segmentOb1.e * totalModifierLength1 - addedLength1) / shapeLength1;\n                }\n                shapeSegments1.push([\n                    shapeS1,\n                    shapeE1\n                ]);\n            }\n        }\n        if (!shapeSegments1.length) {\n            shapeSegments1.push([\n                0,\n                0\n            ]);\n        }\n        return shapeSegments1;\n    };\n    TrimModifier.prototype.releasePathsData = function(pathsData1) {\n        var i3;\n        var len1 = pathsData1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            segmentsLengthPool.release(pathsData1[i3]);\n        }\n        pathsData1.length = 0;\n        return pathsData1;\n    };\n    TrimModifier.prototype.processShapes = function(_isFirstFrame1) {\n        var s4;\n        var e3;\n        if (this._mdf || _isFirstFrame1) {\n            var o3 = this.o.v % 360 / 360;\n            if (o3 < 0) {\n                o3 += 1;\n            }\n            if (this.s.v > 1) {\n                s4 = 1 + o3;\n            } else if (this.s.v < 0) {\n                s4 = 0 + o3;\n            } else {\n                s4 = this.s.v + o3;\n            }\n            if (this.e.v > 1) {\n                e3 = 1 + o3;\n            } else if (this.e.v < 0) {\n                e3 = 0 + o3;\n            } else {\n                e3 = this.e.v + o3;\n            }\n            if (s4 > e3) {\n                var _s1 = s4;\n                s4 = e3;\n                e3 = _s1;\n            }\n            s4 = Math.round(s4 * 10000) * 0.0001;\n            e3 = Math.round(e3 * 10000) * 0.0001;\n            this.sValue = s4;\n            this.eValue = e3;\n        } else {\n            s4 = this.sValue;\n            e3 = this.eValue;\n        }\n        var shapePaths1;\n        var i3;\n        var len1 = this.shapes.length;\n        var j3;\n        var jLen1;\n        var pathsData1;\n        var pathData1;\n        var totalShapeLength1;\n        var totalModifierLength1 = 0;\n        if (e3 === s4) {\n            for(i3 = 0; i3 < len1; i3 += 1){\n                this.shapes[i3].localShapeCollection.releaseShapes();\n                this.shapes[i3].shape._mdf = true;\n                this.shapes[i3].shape.paths = this.shapes[i3].localShapeCollection;\n                if (this._mdf) {\n                    this.shapes[i3].pathsData.length = 0;\n                }\n            }\n        } else if (!(e3 === 1 && s4 === 0 || e3 === 0 && s4 === 1)) {\n            var segments1 = [];\n            var shapeData1;\n            var localShapeCollection1;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                shapeData1 = this.shapes[i3]; // if shape hasn't changed and trim properties haven't changed, cached previous path can be used\n                if (!shapeData1.shape._mdf && !this._mdf && !_isFirstFrame1 && this.m !== 2) {\n                    shapeData1.shape.paths = shapeData1.localShapeCollection;\n                } else {\n                    shapePaths1 = shapeData1.shape.paths;\n                    jLen1 = shapePaths1._length;\n                    totalShapeLength1 = 0;\n                    if (!shapeData1.shape._mdf && shapeData1.pathsData.length) {\n                        totalShapeLength1 = shapeData1.totalShapeLength;\n                    } else {\n                        pathsData1 = this.releasePathsData(shapeData1.pathsData);\n                        for(j3 = 0; j3 < jLen1; j3 += 1){\n                            pathData1 = bez.getSegmentsLength(shapePaths1.shapes[j3]);\n                            pathsData1.push(pathData1);\n                            totalShapeLength1 += pathData1.totalLength;\n                        }\n                        shapeData1.totalShapeLength = totalShapeLength1;\n                        shapeData1.pathsData = pathsData1;\n                    }\n                    totalModifierLength1 += totalShapeLength1;\n                    shapeData1.shape._mdf = true;\n                }\n            }\n            var shapeS1 = s4;\n            var shapeE1 = e3;\n            var addedLength1 = 0;\n            var edges1;\n            for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n                shapeData1 = this.shapes[i3];\n                if (shapeData1.shape._mdf) {\n                    localShapeCollection1 = shapeData1.localShapeCollection;\n                    localShapeCollection1.releaseShapes(); // if m === 2 means paths are trimmed individually so edges need to be found for this specific shape relative to whoel group\n                    if (this.m === 2 && len1 > 1) {\n                        edges1 = this.calculateShapeEdges(s4, e3, shapeData1.totalShapeLength, addedLength1, totalModifierLength1);\n                        addedLength1 += shapeData1.totalShapeLength;\n                    } else {\n                        edges1 = [\n                            [\n                                shapeS1,\n                                shapeE1\n                            ]\n                        ];\n                    }\n                    jLen1 = edges1.length;\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        shapeS1 = edges1[j3][0];\n                        shapeE1 = edges1[j3][1];\n                        segments1.length = 0;\n                        if (shapeE1 <= 1) {\n                            segments1.push({\n                                s: shapeData1.totalShapeLength * shapeS1,\n                                e: shapeData1.totalShapeLength * shapeE1\n                            });\n                        } else if (shapeS1 >= 1) {\n                            segments1.push({\n                                s: shapeData1.totalShapeLength * (shapeS1 - 1),\n                                e: shapeData1.totalShapeLength * (shapeE1 - 1)\n                            });\n                        } else {\n                            segments1.push({\n                                s: shapeData1.totalShapeLength * shapeS1,\n                                e: shapeData1.totalShapeLength\n                            });\n                            segments1.push({\n                                s: 0,\n                                e: shapeData1.totalShapeLength * (shapeE1 - 1)\n                            });\n                        }\n                        var newShapesData1 = this.addShapes(shapeData1, segments1[0]);\n                        if (segments1[0].s !== segments1[0].e) {\n                            if (segments1.length > 1) {\n                                var lastShapeInCollection1 = shapeData1.shape.paths.shapes[shapeData1.shape.paths._length - 1];\n                                if (lastShapeInCollection1.c) {\n                                    var lastShape1 = newShapesData1.pop();\n                                    this.addPaths(newShapesData1, localShapeCollection1);\n                                    newShapesData1 = this.addShapes(shapeData1, segments1[1], lastShape1);\n                                } else {\n                                    this.addPaths(newShapesData1, localShapeCollection1);\n                                    newShapesData1 = this.addShapes(shapeData1, segments1[1]);\n                                }\n                            }\n                            this.addPaths(newShapesData1, localShapeCollection1);\n                        }\n                    }\n                    shapeData1.shape.paths = localShapeCollection1;\n                }\n            }\n        } else if (this._mdf) {\n            for(i3 = 0; i3 < len1; i3 += 1){\n                // Releasign Trim Cached paths data when no trim applied in case shapes are modified inbetween.\n                // Don't remove this even if it's losing cached info.\n                this.shapes[i3].pathsData.length = 0;\n                this.shapes[i3].shape._mdf = true;\n            }\n        }\n    };\n    TrimModifier.prototype.addPaths = function(newPaths1, localShapeCollection1) {\n        var i3;\n        var len1 = newPaths1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            localShapeCollection1.addShape(newPaths1[i3]);\n        }\n    };\n    TrimModifier.prototype.addSegment = function(pt11, pt21, pt31, pt41, shapePath1, pos1, newShape1) {\n        shapePath1.setXYAt(pt21[0], pt21[1], \"o\", pos1);\n        shapePath1.setXYAt(pt31[0], pt31[1], \"i\", pos1 + 1);\n        if (newShape1) {\n            shapePath1.setXYAt(pt11[0], pt11[1], \"v\", pos1);\n        }\n        shapePath1.setXYAt(pt41[0], pt41[1], \"v\", pos1 + 1);\n    };\n    TrimModifier.prototype.addSegmentFromArray = function(points1, shapePath1, pos1, newShape1) {\n        shapePath1.setXYAt(points1[1], points1[5], \"o\", pos1);\n        shapePath1.setXYAt(points1[2], points1[6], \"i\", pos1 + 1);\n        if (newShape1) {\n            shapePath1.setXYAt(points1[0], points1[4], \"v\", pos1);\n        }\n        shapePath1.setXYAt(points1[3], points1[7], \"v\", pos1 + 1);\n    };\n    TrimModifier.prototype.addShapes = function(shapeData1, shapeSegment1, shapePath1) {\n        var pathsData1 = shapeData1.pathsData;\n        var shapePaths1 = shapeData1.shape.paths.shapes;\n        var i3;\n        var len1 = shapeData1.shape.paths._length;\n        var j3;\n        var jLen1;\n        var addedLength1 = 0;\n        var currentLengthData1;\n        var segmentCount1;\n        var lengths1;\n        var segment1;\n        var shapes1 = [];\n        var initPos1;\n        var newShape1 = true;\n        if (!shapePath1) {\n            shapePath1 = shapePool.newElement();\n            segmentCount1 = 0;\n            initPos1 = 0;\n        } else {\n            segmentCount1 = shapePath1._length;\n            initPos1 = shapePath1._length;\n        }\n        shapes1.push(shapePath1);\n        for(i3 = 0; i3 < len1; i3 += 1){\n            lengths1 = pathsData1[i3].lengths;\n            shapePath1.c = shapePaths1[i3].c;\n            jLen1 = shapePaths1[i3].c ? lengths1.length : lengths1.length + 1;\n            for(j3 = 1; j3 < jLen1; j3 += 1){\n                currentLengthData1 = lengths1[j3 - 1];\n                if (addedLength1 + currentLengthData1.addedLength < shapeSegment1.s) {\n                    addedLength1 += currentLengthData1.addedLength;\n                    shapePath1.c = false;\n                } else if (addedLength1 > shapeSegment1.e) {\n                    shapePath1.c = false;\n                    break;\n                } else {\n                    if (shapeSegment1.s <= addedLength1 && shapeSegment1.e >= addedLength1 + currentLengthData1.addedLength) {\n                        this.addSegment(shapePaths1[i3].v[j3 - 1], shapePaths1[i3].o[j3 - 1], shapePaths1[i3].i[j3], shapePaths1[i3].v[j3], shapePath1, segmentCount1, newShape1);\n                        newShape1 = false;\n                    } else {\n                        segment1 = bez.getNewSegment(shapePaths1[i3].v[j3 - 1], shapePaths1[i3].v[j3], shapePaths1[i3].o[j3 - 1], shapePaths1[i3].i[j3], (shapeSegment1.s - addedLength1) / currentLengthData1.addedLength, (shapeSegment1.e - addedLength1) / currentLengthData1.addedLength, lengths1[j3 - 1]);\n                        this.addSegmentFromArray(segment1, shapePath1, segmentCount1, newShape1); // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);\n                        newShape1 = false;\n                        shapePath1.c = false;\n                    }\n                    addedLength1 += currentLengthData1.addedLength;\n                    segmentCount1 += 1;\n                }\n            }\n            if (shapePaths1[i3].c && lengths1.length) {\n                currentLengthData1 = lengths1[j3 - 1];\n                if (addedLength1 <= shapeSegment1.e) {\n                    var segmentLength1 = lengths1[j3 - 1].addedLength;\n                    if (shapeSegment1.s <= addedLength1 && shapeSegment1.e >= addedLength1 + segmentLength1) {\n                        this.addSegment(shapePaths1[i3].v[j3 - 1], shapePaths1[i3].o[j3 - 1], shapePaths1[i3].i[0], shapePaths1[i3].v[0], shapePath1, segmentCount1, newShape1);\n                        newShape1 = false;\n                    } else {\n                        segment1 = bez.getNewSegment(shapePaths1[i3].v[j3 - 1], shapePaths1[i3].v[0], shapePaths1[i3].o[j3 - 1], shapePaths1[i3].i[0], (shapeSegment1.s - addedLength1) / segmentLength1, (shapeSegment1.e - addedLength1) / segmentLength1, lengths1[j3 - 1]);\n                        this.addSegmentFromArray(segment1, shapePath1, segmentCount1, newShape1); // this.addSegment(segment.pt1, segment.pt3, segment.pt4, segment.pt2, shapePath, segmentCount, newShape);\n                        newShape1 = false;\n                        shapePath1.c = false;\n                    }\n                } else {\n                    shapePath1.c = false;\n                }\n                addedLength1 += currentLengthData1.addedLength;\n                segmentCount1 += 1;\n            }\n            if (shapePath1._length) {\n                shapePath1.setXYAt(shapePath1.v[initPos1][0], shapePath1.v[initPos1][1], \"i\", initPos1);\n                shapePath1.setXYAt(shapePath1.v[shapePath1._length - 1][0], shapePath1.v[shapePath1._length - 1][1], \"o\", shapePath1._length - 1);\n            }\n            if (addedLength1 > shapeSegment1.e) {\n                break;\n            }\n            if (i3 < len1 - 1) {\n                shapePath1 = shapePool.newElement();\n                newShape1 = true;\n                shapes1.push(shapePath1);\n                segmentCount1 = 0;\n            }\n        }\n        return shapes1;\n    };\n    function PuckerAndBloatModifier() {}\n    extendPrototype([\n        ShapeModifier\n    ], PuckerAndBloatModifier);\n    PuckerAndBloatModifier.prototype.initModifierProperties = function(elem3, data1) {\n        this.getValue = this.processKeys;\n        this.amount = PropertyFactory.getProp(elem3, data1.a, 0, null, this);\n        this._isAnimated = !!this.amount.effectsSequence.length;\n    };\n    PuckerAndBloatModifier.prototype.processPath = function(path1, amount1) {\n        var percent1 = amount1 / 100;\n        var centerPoint1 = [\n            0,\n            0\n        ];\n        var pathLength1 = path1._length;\n        var i3 = 0;\n        for(i3 = 0; i3 < pathLength1; i3 += 1){\n            centerPoint1[0] += path1.v[i3][0];\n            centerPoint1[1] += path1.v[i3][1];\n        }\n        centerPoint1[0] /= pathLength1;\n        centerPoint1[1] /= pathLength1;\n        var clonedPath1 = shapePool.newElement();\n        clonedPath1.c = path1.c;\n        var vX1;\n        var vY1;\n        var oX1;\n        var oY1;\n        var iX1;\n        var iY1;\n        for(i3 = 0; i3 < pathLength1; i3 += 1){\n            vX1 = path1.v[i3][0] + (centerPoint1[0] - path1.v[i3][0]) * percent1;\n            vY1 = path1.v[i3][1] + (centerPoint1[1] - path1.v[i3][1]) * percent1;\n            oX1 = path1.o[i3][0] + (centerPoint1[0] - path1.o[i3][0]) * -percent1;\n            oY1 = path1.o[i3][1] + (centerPoint1[1] - path1.o[i3][1]) * -percent1;\n            iX1 = path1.i[i3][0] + (centerPoint1[0] - path1.i[i3][0]) * -percent1;\n            iY1 = path1.i[i3][1] + (centerPoint1[1] - path1.i[i3][1]) * -percent1;\n            clonedPath1.setTripleAt(vX1, vY1, oX1, oY1, iX1, iY1, i3);\n        }\n        return clonedPath1;\n    };\n    PuckerAndBloatModifier.prototype.processShapes = function(_isFirstFrame1) {\n        var shapePaths1;\n        var i3;\n        var len1 = this.shapes.length;\n        var j3;\n        var jLen1;\n        var amount1 = this.amount.v;\n        if (amount1 !== 0) {\n            var shapeData1;\n            var localShapeCollection1;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                shapeData1 = this.shapes[i3];\n                localShapeCollection1 = shapeData1.localShapeCollection;\n                if (!(!shapeData1.shape._mdf && !this._mdf && !_isFirstFrame1)) {\n                    localShapeCollection1.releaseShapes();\n                    shapeData1.shape._mdf = true;\n                    shapePaths1 = shapeData1.shape.paths.shapes;\n                    jLen1 = shapeData1.shape.paths._length;\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        localShapeCollection1.addShape(this.processPath(shapePaths1[j3], amount1));\n                    }\n                }\n                shapeData1.shape.paths = shapeData1.localShapeCollection;\n            }\n        }\n        if (!this.dynamicProperties.length) {\n            this._mdf = false;\n        }\n    };\n    var TransformPropertyFactory = function() {\n        var defaultVector1 = [\n            0,\n            0\n        ];\n        function applyToMatrix1(mat1) {\n            var _mdf1 = this._mdf;\n            this.iterateDynamicProperties();\n            this._mdf = this._mdf || _mdf1;\n            if (this.a) {\n                mat1.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);\n            }\n            if (this.s) {\n                mat1.scale(this.s.v[0], this.s.v[1], this.s.v[2]);\n            }\n            if (this.sk) {\n                mat1.skewFromAxis(-this.sk.v, this.sa.v);\n            }\n            if (this.r) {\n                mat1.rotate(-this.r.v);\n            } else {\n                mat1.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);\n            }\n            if (this.data.p.s) {\n                if (this.data.p.z) {\n                    mat1.translate(this.px.v, this.py.v, -this.pz.v);\n                } else {\n                    mat1.translate(this.px.v, this.py.v, 0);\n                }\n            } else {\n                mat1.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);\n            }\n        }\n        function processKeys1(forceRender1) {\n            if (this.elem.globalData.frameId === this.frameId) {\n                return;\n            }\n            if (this._isDirty) {\n                this.precalculateMatrix();\n                this._isDirty = false;\n            }\n            this.iterateDynamicProperties();\n            if (this._mdf || forceRender1) {\n                var frameRate1;\n                this.v.cloneFromProps(this.pre.props);\n                if (this.appliedTransformations < 1) {\n                    this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);\n                }\n                if (this.appliedTransformations < 2) {\n                    this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);\n                }\n                if (this.sk && this.appliedTransformations < 3) {\n                    this.v.skewFromAxis(-this.sk.v, this.sa.v);\n                }\n                if (this.r && this.appliedTransformations < 4) {\n                    this.v.rotate(-this.r.v);\n                } else if (!this.r && this.appliedTransformations < 4) {\n                    this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);\n                }\n                if (this.autoOriented) {\n                    var v11;\n                    var v21;\n                    frameRate1 = this.elem.globalData.frameRate;\n                    if (this.p && this.p.keyframes && this.p.getValueAtTime) {\n                        if (this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t) {\n                            v11 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate1, 0);\n                            v21 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate1, 0);\n                        } else if (this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {\n                            v11 = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / frameRate1, 0);\n                            v21 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.05) / frameRate1, 0);\n                        } else {\n                            v11 = this.p.pv;\n                            v21 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - 0.01) / frameRate1, this.p.offsetTime);\n                        }\n                    } else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {\n                        v11 = [];\n                        v21 = [];\n                        var px1 = this.px;\n                        var py1 = this.py;\n                        if (px1._caching.lastFrame + px1.offsetTime <= px1.keyframes[0].t) {\n                            v11[0] = px1.getValueAtTime((px1.keyframes[0].t + 0.01) / frameRate1, 0);\n                            v11[1] = py1.getValueAtTime((py1.keyframes[0].t + 0.01) / frameRate1, 0);\n                            v21[0] = px1.getValueAtTime(px1.keyframes[0].t / frameRate1, 0);\n                            v21[1] = py1.getValueAtTime(py1.keyframes[0].t / frameRate1, 0);\n                        } else if (px1._caching.lastFrame + px1.offsetTime >= px1.keyframes[px1.keyframes.length - 1].t) {\n                            v11[0] = px1.getValueAtTime(px1.keyframes[px1.keyframes.length - 1].t / frameRate1, 0);\n                            v11[1] = py1.getValueAtTime(py1.keyframes[py1.keyframes.length - 1].t / frameRate1, 0);\n                            v21[0] = px1.getValueAtTime((px1.keyframes[px1.keyframes.length - 1].t - 0.01) / frameRate1, 0);\n                            v21[1] = py1.getValueAtTime((py1.keyframes[py1.keyframes.length - 1].t - 0.01) / frameRate1, 0);\n                        } else {\n                            v11 = [\n                                px1.pv,\n                                py1.pv\n                            ];\n                            v21[0] = px1.getValueAtTime((px1._caching.lastFrame + px1.offsetTime - 0.01) / frameRate1, px1.offsetTime);\n                            v21[1] = py1.getValueAtTime((py1._caching.lastFrame + py1.offsetTime - 0.01) / frameRate1, py1.offsetTime);\n                        }\n                    } else {\n                        v21 = defaultVector1;\n                        v11 = v21;\n                    }\n                    this.v.rotate(-Math.atan2(v11[1] - v21[1], v11[0] - v21[0]));\n                }\n                if (this.data.p && this.data.p.s) {\n                    if (this.data.p.z) {\n                        this.v.translate(this.px.v, this.py.v, -this.pz.v);\n                    } else {\n                        this.v.translate(this.px.v, this.py.v, 0);\n                    }\n                } else {\n                    this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);\n                }\n            }\n            this.frameId = this.elem.globalData.frameId;\n        }\n        function precalculateMatrix1() {\n            this.appliedTransformations = 0;\n            this.pre.reset();\n            if (!this.a.effectsSequence.length) {\n                this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);\n                this.appliedTransformations = 1;\n            } else {\n                return;\n            }\n            if (!this.s.effectsSequence.length) {\n                this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);\n                this.appliedTransformations = 2;\n            } else {\n                return;\n            }\n            if (this.sk) {\n                if (!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {\n                    this.pre.skewFromAxis(-this.sk.v, this.sa.v);\n                    this.appliedTransformations = 3;\n                } else {\n                    return;\n                }\n            }\n            if (this.r) {\n                if (!this.r.effectsSequence.length) {\n                    this.pre.rotate(-this.r.v);\n                    this.appliedTransformations = 4;\n                }\n            } else if (!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {\n                this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);\n                this.appliedTransformations = 4;\n            }\n        }\n        function autoOrient1() {\n        // var prevP = this.getValueAtTime();\n        }\n        function addDynamicProperty1(prop1) {\n            this._addDynamicProperty(prop1);\n            this.elem.addDynamicProperty(prop1);\n            this._isDirty = true;\n        }\n        function TransformProperty1(elem3, data1, container1) {\n            this.elem = elem3;\n            this.frameId = -1;\n            this.propType = \"transform\";\n            this.data = data1;\n            this.v = new Matrix(); // Precalculated matrix with non animated properties\n            this.pre = new Matrix();\n            this.appliedTransformations = 0;\n            this.initDynamicPropertyContainer(container1 || elem3);\n            if (data1.p && data1.p.s) {\n                this.px = PropertyFactory.getProp(elem3, data1.p.x, 0, 0, this);\n                this.py = PropertyFactory.getProp(elem3, data1.p.y, 0, 0, this);\n                if (data1.p.z) {\n                    this.pz = PropertyFactory.getProp(elem3, data1.p.z, 0, 0, this);\n                }\n            } else {\n                this.p = PropertyFactory.getProp(elem3, data1.p || {\n                    k: [\n                        0,\n                        0,\n                        0\n                    ]\n                }, 1, 0, this);\n            }\n            if (data1.rx) {\n                this.rx = PropertyFactory.getProp(elem3, data1.rx, 0, degToRads, this);\n                this.ry = PropertyFactory.getProp(elem3, data1.ry, 0, degToRads, this);\n                this.rz = PropertyFactory.getProp(elem3, data1.rz, 0, degToRads, this);\n                if (data1.or.k[0].ti) {\n                    var i3;\n                    var len1 = data1.or.k.length;\n                    for(i3 = 0; i3 < len1; i3 += 1){\n                        data1.or.k[i3].to = null;\n                        data1.or.k[i3].ti = null;\n                    }\n                }\n                this.or = PropertyFactory.getProp(elem3, data1.or, 1, degToRads, this); // sh Indicates it needs to be capped between -180 and 180\n                this.or.sh = true;\n            } else {\n                this.r = PropertyFactory.getProp(elem3, data1.r || {\n                    k: 0\n                }, 0, degToRads, this);\n            }\n            if (data1.sk) {\n                this.sk = PropertyFactory.getProp(elem3, data1.sk, 0, degToRads, this);\n                this.sa = PropertyFactory.getProp(elem3, data1.sa, 0, degToRads, this);\n            }\n            this.a = PropertyFactory.getProp(elem3, data1.a || {\n                k: [\n                    0,\n                    0,\n                    0\n                ]\n            }, 1, 0, this);\n            this.s = PropertyFactory.getProp(elem3, data1.s || {\n                k: [\n                    100,\n                    100,\n                    100\n                ]\n            }, 1, 0.01, this); // Opacity is not part of the transform properties, that's why it won't use this.dynamicProperties. That way transforms won't get updated if opacity changes.\n            if (data1.o) {\n                this.o = PropertyFactory.getProp(elem3, data1.o, 0, 0.01, elem3);\n            } else {\n                this.o = {\n                    _mdf: false,\n                    v: 1\n                };\n            }\n            this._isDirty = true;\n            if (!this.dynamicProperties.length) {\n                this.getValue(true);\n            }\n        }\n        TransformProperty1.prototype = {\n            applyToMatrix: applyToMatrix1,\n            getValue: processKeys1,\n            precalculateMatrix: precalculateMatrix1,\n            autoOrient: autoOrient1\n        };\n        extendPrototype([\n            DynamicPropertyContainer\n        ], TransformProperty1);\n        TransformProperty1.prototype.addDynamicProperty = addDynamicProperty1;\n        TransformProperty1.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;\n        function getTransformProperty1(elem3, data1, container1) {\n            return new TransformProperty1(elem3, data1, container1);\n        }\n        return {\n            getTransformProperty: getTransformProperty1\n        };\n    }();\n    function RepeaterModifier() {}\n    extendPrototype([\n        ShapeModifier\n    ], RepeaterModifier);\n    RepeaterModifier.prototype.initModifierProperties = function(elem3, data1) {\n        this.getValue = this.processKeys;\n        this.c = PropertyFactory.getProp(elem3, data1.c, 0, null, this);\n        this.o = PropertyFactory.getProp(elem3, data1.o, 0, null, this);\n        this.tr = TransformPropertyFactory.getTransformProperty(elem3, data1.tr, this);\n        this.so = PropertyFactory.getProp(elem3, data1.tr.so, 0, 0.01, this);\n        this.eo = PropertyFactory.getProp(elem3, data1.tr.eo, 0, 0.01, this);\n        this.data = data1;\n        if (!this.dynamicProperties.length) {\n            this.getValue(true);\n        }\n        this._isAnimated = !!this.dynamicProperties.length;\n        this.pMatrix = new Matrix();\n        this.rMatrix = new Matrix();\n        this.sMatrix = new Matrix();\n        this.tMatrix = new Matrix();\n        this.matrix = new Matrix();\n    };\n    RepeaterModifier.prototype.applyTransforms = function(pMatrix1, rMatrix1, sMatrix1, transform1, perc1, inv1) {\n        var dir1 = inv1 ? -1 : 1;\n        var scaleX1 = transform1.s.v[0] + (1 - transform1.s.v[0]) * (1 - perc1);\n        var scaleY1 = transform1.s.v[1] + (1 - transform1.s.v[1]) * (1 - perc1);\n        pMatrix1.translate(transform1.p.v[0] * dir1 * perc1, transform1.p.v[1] * dir1 * perc1, transform1.p.v[2]);\n        rMatrix1.translate(-transform1.a.v[0], -transform1.a.v[1], transform1.a.v[2]);\n        rMatrix1.rotate(-transform1.r.v * dir1 * perc1);\n        rMatrix1.translate(transform1.a.v[0], transform1.a.v[1], transform1.a.v[2]);\n        sMatrix1.translate(-transform1.a.v[0], -transform1.a.v[1], transform1.a.v[2]);\n        sMatrix1.scale(inv1 ? 1 / scaleX1 : scaleX1, inv1 ? 1 / scaleY1 : scaleY1);\n        sMatrix1.translate(transform1.a.v[0], transform1.a.v[1], transform1.a.v[2]);\n    };\n    RepeaterModifier.prototype.init = function(elem3, arr3, pos1, elemsData1) {\n        this.elem = elem3;\n        this.arr = arr3;\n        this.pos = pos1;\n        this.elemsData = elemsData1;\n        this._currentCopies = 0;\n        this._elements = [];\n        this._groups = [];\n        this.frameId = -1;\n        this.initDynamicPropertyContainer(elem3);\n        this.initModifierProperties(elem3, arr3[pos1]);\n        while(pos1 > 0){\n            pos1 -= 1; // this._elements.unshift(arr.splice(pos,1)[0]);\n            this._elements.unshift(arr3[pos1]);\n        }\n        if (this.dynamicProperties.length) {\n            this.k = true;\n        } else {\n            this.getValue(true);\n        }\n    };\n    RepeaterModifier.prototype.resetElements = function(elements1) {\n        var i3;\n        var len1 = elements1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            elements1[i3]._processed = false;\n            if (elements1[i3].ty === \"gr\") {\n                this.resetElements(elements1[i3].it);\n            }\n        }\n    };\n    RepeaterModifier.prototype.cloneElements = function(elements1) {\n        var newElements1 = JSON.parse(JSON.stringify(elements1));\n        this.resetElements(newElements1);\n        return newElements1;\n    };\n    RepeaterModifier.prototype.changeGroupRender = function(elements1, renderFlag1) {\n        var i3;\n        var len1 = elements1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            elements1[i3]._render = renderFlag1;\n            if (elements1[i3].ty === \"gr\") {\n                this.changeGroupRender(elements1[i3].it, renderFlag1);\n            }\n        }\n    };\n    RepeaterModifier.prototype.processShapes = function(_isFirstFrame1) {\n        var items1;\n        var itemsTransform1;\n        var i3;\n        var dir1;\n        var cont1;\n        var hasReloaded1 = false;\n        if (this._mdf || _isFirstFrame1) {\n            var copies1 = Math.ceil(this.c.v);\n            if (this._groups.length < copies1) {\n                while(this._groups.length < copies1){\n                    var group1 = {\n                        it: this.cloneElements(this._elements),\n                        ty: \"gr\"\n                    };\n                    group1.it.push({\n                        a: {\n                            a: 0,\n                            ix: 1,\n                            k: [\n                                0,\n                                0\n                            ]\n                        },\n                        nm: \"Transform\",\n                        o: {\n                            a: 0,\n                            ix: 7,\n                            k: 100\n                        },\n                        p: {\n                            a: 0,\n                            ix: 2,\n                            k: [\n                                0,\n                                0\n                            ]\n                        },\n                        r: {\n                            a: 1,\n                            ix: 6,\n                            k: [\n                                {\n                                    s: 0,\n                                    e: 0,\n                                    t: 0\n                                },\n                                {\n                                    s: 0,\n                                    e: 0,\n                                    t: 1\n                                }\n                            ]\n                        },\n                        s: {\n                            a: 0,\n                            ix: 3,\n                            k: [\n                                100,\n                                100\n                            ]\n                        },\n                        sa: {\n                            a: 0,\n                            ix: 5,\n                            k: 0\n                        },\n                        sk: {\n                            a: 0,\n                            ix: 4,\n                            k: 0\n                        },\n                        ty: \"tr\"\n                    });\n                    this.arr.splice(0, 0, group1);\n                    this._groups.splice(0, 0, group1);\n                    this._currentCopies += 1;\n                }\n                this.elem.reloadShapes();\n                hasReloaded1 = true;\n            }\n            cont1 = 0;\n            var renderFlag1;\n            for(i3 = 0; i3 <= this._groups.length - 1; i3 += 1){\n                renderFlag1 = cont1 < copies1;\n                this._groups[i3]._render = renderFlag1;\n                this.changeGroupRender(this._groups[i3].it, renderFlag1);\n                if (!renderFlag1) {\n                    var elems1 = this.elemsData[i3].it;\n                    var transformData1 = elems1[elems1.length - 1];\n                    if (transformData1.transform.op.v !== 0) {\n                        transformData1.transform.op._mdf = true;\n                        transformData1.transform.op.v = 0;\n                    } else {\n                        transformData1.transform.op._mdf = false;\n                    }\n                }\n                cont1 += 1;\n            }\n            this._currentCopies = copies1; /// /\n            var offset1 = this.o.v;\n            var offsetModulo1 = offset1 % 1;\n            var roundOffset1 = offset1 > 0 ? Math.floor(offset1) : Math.ceil(offset1);\n            var pProps1 = this.pMatrix.props;\n            var rProps1 = this.rMatrix.props;\n            var sProps1 = this.sMatrix.props;\n            this.pMatrix.reset();\n            this.rMatrix.reset();\n            this.sMatrix.reset();\n            this.tMatrix.reset();\n            this.matrix.reset();\n            var iteration1 = 0;\n            if (offset1 > 0) {\n                while(iteration1 < roundOffset1){\n                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);\n                    iteration1 += 1;\n                }\n                if (offsetModulo1) {\n                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo1, false);\n                    iteration1 += offsetModulo1;\n                }\n            } else if (offset1 < 0) {\n                while(iteration1 > roundOffset1){\n                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);\n                    iteration1 -= 1;\n                }\n                if (offsetModulo1) {\n                    this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -offsetModulo1, true);\n                    iteration1 -= offsetModulo1;\n                }\n            }\n            i3 = this.data.m === 1 ? 0 : this._currentCopies - 1;\n            dir1 = this.data.m === 1 ? 1 : -1;\n            cont1 = this._currentCopies;\n            var j3;\n            var jLen1;\n            while(cont1){\n                items1 = this.elemsData[i3].it;\n                itemsTransform1 = items1[items1.length - 1].transform.mProps.v.props;\n                jLen1 = itemsTransform1.length;\n                items1[items1.length - 1].transform.mProps._mdf = true;\n                items1[items1.length - 1].transform.op._mdf = true;\n                items1[items1.length - 1].transform.op.v = this._currentCopies === 1 ? this.so.v : this.so.v + (this.eo.v - this.so.v) * (i3 / (this._currentCopies - 1));\n                if (iteration1 !== 0) {\n                    if (i3 !== 0 && dir1 === 1 || i3 !== this._currentCopies - 1 && dir1 === -1) {\n                        this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);\n                    }\n                    this.matrix.transform(rProps1[0], rProps1[1], rProps1[2], rProps1[3], rProps1[4], rProps1[5], rProps1[6], rProps1[7], rProps1[8], rProps1[9], rProps1[10], rProps1[11], rProps1[12], rProps1[13], rProps1[14], rProps1[15]);\n                    this.matrix.transform(sProps1[0], sProps1[1], sProps1[2], sProps1[3], sProps1[4], sProps1[5], sProps1[6], sProps1[7], sProps1[8], sProps1[9], sProps1[10], sProps1[11], sProps1[12], sProps1[13], sProps1[14], sProps1[15]);\n                    this.matrix.transform(pProps1[0], pProps1[1], pProps1[2], pProps1[3], pProps1[4], pProps1[5], pProps1[6], pProps1[7], pProps1[8], pProps1[9], pProps1[10], pProps1[11], pProps1[12], pProps1[13], pProps1[14], pProps1[15]);\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        itemsTransform1[j3] = this.matrix.props[j3];\n                    }\n                    this.matrix.reset();\n                } else {\n                    this.matrix.reset();\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        itemsTransform1[j3] = this.matrix.props[j3];\n                    }\n                }\n                iteration1 += 1;\n                cont1 -= 1;\n                i3 += dir1;\n            }\n        } else {\n            cont1 = this._currentCopies;\n            i3 = 0;\n            dir1 = 1;\n            while(cont1){\n                items1 = this.elemsData[i3].it;\n                itemsTransform1 = items1[items1.length - 1].transform.mProps.v.props;\n                items1[items1.length - 1].transform.mProps._mdf = false;\n                items1[items1.length - 1].transform.op._mdf = false;\n                cont1 -= 1;\n                i3 += dir1;\n            }\n        }\n        return hasReloaded1;\n    };\n    RepeaterModifier.prototype.addShape = function() {};\n    function RoundCornersModifier() {}\n    extendPrototype([\n        ShapeModifier\n    ], RoundCornersModifier);\n    RoundCornersModifier.prototype.initModifierProperties = function(elem3, data1) {\n        this.getValue = this.processKeys;\n        this.rd = PropertyFactory.getProp(elem3, data1.r, 0, null, this);\n        this._isAnimated = !!this.rd.effectsSequence.length;\n    };\n    RoundCornersModifier.prototype.processPath = function(path1, round1) {\n        var clonedPath1 = shapePool.newElement();\n        clonedPath1.c = path1.c;\n        var i3;\n        var len1 = path1._length;\n        var currentV1;\n        var currentI1;\n        var currentO1;\n        var closerV1;\n        var distance1;\n        var newPosPerc1;\n        var index1 = 0;\n        var vX1;\n        var vY1;\n        var oX1;\n        var oY1;\n        var iX1;\n        var iY1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            currentV1 = path1.v[i3];\n            currentO1 = path1.o[i3];\n            currentI1 = path1.i[i3];\n            if (currentV1[0] === currentO1[0] && currentV1[1] === currentO1[1] && currentV1[0] === currentI1[0] && currentV1[1] === currentI1[1]) {\n                if ((i3 === 0 || i3 === len1 - 1) && !path1.c) {\n                    clonedPath1.setTripleAt(currentV1[0], currentV1[1], currentO1[0], currentO1[1], currentI1[0], currentI1[1], index1);\n                    /* clonedPath.v[index] = currentV;\r\n                  clonedPath.o[index] = currentO;\r\n                  clonedPath.i[index] = currentI; */ index1 += 1;\n                } else {\n                    if (i3 === 0) {\n                        closerV1 = path1.v[len1 - 1];\n                    } else {\n                        closerV1 = path1.v[i3 - 1];\n                    }\n                    distance1 = Math.sqrt(Math.pow(currentV1[0] - closerV1[0], 2) + Math.pow(currentV1[1] - closerV1[1], 2));\n                    newPosPerc1 = distance1 ? Math.min(distance1 / 2, round1) / distance1 : 0;\n                    iX1 = currentV1[0] + (closerV1[0] - currentV1[0]) * newPosPerc1;\n                    vX1 = iX1;\n                    iY1 = currentV1[1] - (currentV1[1] - closerV1[1]) * newPosPerc1;\n                    vY1 = iY1;\n                    oX1 = vX1 - (vX1 - currentV1[0]) * roundCorner;\n                    oY1 = vY1 - (vY1 - currentV1[1]) * roundCorner;\n                    clonedPath1.setTripleAt(vX1, vY1, oX1, oY1, iX1, iY1, index1);\n                    index1 += 1;\n                    if (i3 === len1 - 1) {\n                        closerV1 = path1.v[0];\n                    } else {\n                        closerV1 = path1.v[i3 + 1];\n                    }\n                    distance1 = Math.sqrt(Math.pow(currentV1[0] - closerV1[0], 2) + Math.pow(currentV1[1] - closerV1[1], 2));\n                    newPosPerc1 = distance1 ? Math.min(distance1 / 2, round1) / distance1 : 0;\n                    oX1 = currentV1[0] + (closerV1[0] - currentV1[0]) * newPosPerc1;\n                    vX1 = oX1;\n                    oY1 = currentV1[1] + (closerV1[1] - currentV1[1]) * newPosPerc1;\n                    vY1 = oY1;\n                    iX1 = vX1 - (vX1 - currentV1[0]) * roundCorner;\n                    iY1 = vY1 - (vY1 - currentV1[1]) * roundCorner;\n                    clonedPath1.setTripleAt(vX1, vY1, oX1, oY1, iX1, iY1, index1);\n                    index1 += 1;\n                }\n            } else {\n                clonedPath1.setTripleAt(path1.v[i3][0], path1.v[i3][1], path1.o[i3][0], path1.o[i3][1], path1.i[i3][0], path1.i[i3][1], index1);\n                index1 += 1;\n            }\n        }\n        return clonedPath1;\n    };\n    RoundCornersModifier.prototype.processShapes = function(_isFirstFrame1) {\n        var shapePaths1;\n        var i3;\n        var len1 = this.shapes.length;\n        var j3;\n        var jLen1;\n        var rd1 = this.rd.v;\n        if (rd1 !== 0) {\n            var shapeData1;\n            var localShapeCollection1;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                shapeData1 = this.shapes[i3];\n                localShapeCollection1 = shapeData1.localShapeCollection;\n                if (!(!shapeData1.shape._mdf && !this._mdf && !_isFirstFrame1)) {\n                    localShapeCollection1.releaseShapes();\n                    shapeData1.shape._mdf = true;\n                    shapePaths1 = shapeData1.shape.paths.shapes;\n                    jLen1 = shapeData1.shape.paths._length;\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        localShapeCollection1.addShape(this.processPath(shapePaths1[j3], rd1));\n                    }\n                }\n                shapeData1.shape.paths = shapeData1.localShapeCollection;\n            }\n        }\n        if (!this.dynamicProperties.length) {\n            this._mdf = false;\n        }\n    };\n    function floatEqual(a3, b3) {\n        return Math.abs(a3 - b3) * 100000 <= Math.min(Math.abs(a3), Math.abs(b3));\n    }\n    function floatZero(f3) {\n        return Math.abs(f3) <= 0.00001;\n    }\n    function lerp(p01, p14, amount1) {\n        return p01 * (1 - amount1) + p14 * amount1;\n    }\n    function lerpPoint(p01, p14, amount1) {\n        return [\n            lerp(p01[0], p14[0], amount1),\n            lerp(p01[1], p14[1], amount1)\n        ];\n    }\n    function quadRoots(a3, b3, c4) {\n        // no root\n        if (a3 === 0) return [];\n        var s4 = b3 * b3 - 4 * a3 * c4; // Complex roots\n        if (s4 < 0) return [];\n        var singleRoot1 = -b3 / (2 * a3); // 1 root\n        if (s4 === 0) return [\n            singleRoot1\n        ];\n        var delta1 = Math.sqrt(s4) / (2 * a3); // 2 roots\n        return [\n            singleRoot1 - delta1,\n            singleRoot1 + delta1\n        ];\n    }\n    function polynomialCoefficients(p01, p14, p22, p31) {\n        return [\n            -p01 + 3 * p14 - 3 * p22 + p31,\n            3 * p01 - 6 * p14 + 3 * p22,\n            -3 * p01 + 3 * p14,\n            p01\n        ];\n    }\n    function singlePoint(p6) {\n        return new PolynomialBezier(p6, p6, p6, p6, false);\n    }\n    function PolynomialBezier(p01, p14, p22, p31, linearize1) {\n        if (linearize1 && pointEqual(p01, p14)) {\n            p14 = lerpPoint(p01, p31, 1 / 3);\n        }\n        if (linearize1 && pointEqual(p22, p31)) {\n            p22 = lerpPoint(p01, p31, 2 / 3);\n        }\n        var coeffx1 = polynomialCoefficients(p01[0], p14[0], p22[0], p31[0]);\n        var coeffy1 = polynomialCoefficients(p01[1], p14[1], p22[1], p31[1]);\n        this.a = [\n            coeffx1[0],\n            coeffy1[0]\n        ];\n        this.b = [\n            coeffx1[1],\n            coeffy1[1]\n        ];\n        this.c = [\n            coeffx1[2],\n            coeffy1[2]\n        ];\n        this.d = [\n            coeffx1[3],\n            coeffy1[3]\n        ];\n        this.points = [\n            p01,\n            p14,\n            p22,\n            p31\n        ];\n    }\n    PolynomialBezier.prototype.point = function(t3) {\n        return [\n            ((this.a[0] * t3 + this.b[0]) * t3 + this.c[0]) * t3 + this.d[0],\n            ((this.a[1] * t3 + this.b[1]) * t3 + this.c[1]) * t3 + this.d[1]\n        ];\n    };\n    PolynomialBezier.prototype.derivative = function(t3) {\n        return [\n            (3 * t3 * this.a[0] + 2 * this.b[0]) * t3 + this.c[0],\n            (3 * t3 * this.a[1] + 2 * this.b[1]) * t3 + this.c[1]\n        ];\n    };\n    PolynomialBezier.prototype.tangentAngle = function(t3) {\n        var p6 = this.derivative(t3);\n        return Math.atan2(p6[1], p6[0]);\n    };\n    PolynomialBezier.prototype.normalAngle = function(t3) {\n        var p6 = this.derivative(t3);\n        return Math.atan2(p6[0], p6[1]);\n    };\n    PolynomialBezier.prototype.inflectionPoints = function() {\n        var denom1 = this.a[1] * this.b[0] - this.a[0] * this.b[1];\n        if (floatZero(denom1)) return [];\n        var tcusp1 = -0.5 * (this.a[1] * this.c[0] - this.a[0] * this.c[1]) / denom1;\n        var square1 = tcusp1 * tcusp1 - 1 / 3 * (this.b[1] * this.c[0] - this.b[0] * this.c[1]) / denom1;\n        if (square1 < 0) return [];\n        var root1 = Math.sqrt(square1);\n        if (floatZero(root1)) {\n            if (root1 > 0 && root1 < 1) return [\n                tcusp1\n            ];\n            return [];\n        }\n        return [\n            tcusp1 - root1,\n            tcusp1 + root1\n        ].filter(function(r1) {\n            return r1 > 0 && r1 < 1;\n        });\n    };\n    PolynomialBezier.prototype.split = function(t3) {\n        if (t3 <= 0) return [\n            singlePoint(this.points[0]),\n            this\n        ];\n        if (t3 >= 1) return [\n            this,\n            singlePoint(this.points[this.points.length - 1])\n        ];\n        var p101 = lerpPoint(this.points[0], this.points[1], t3);\n        var p111 = lerpPoint(this.points[1], this.points[2], t3);\n        var p121 = lerpPoint(this.points[2], this.points[3], t3);\n        var p201 = lerpPoint(p101, p111, t3);\n        var p211 = lerpPoint(p111, p121, t3);\n        var p31 = lerpPoint(p201, p211, t3);\n        return [\n            new PolynomialBezier(this.points[0], p101, p201, p31, true),\n            new PolynomialBezier(p31, p211, p121, this.points[3], true)\n        ];\n    };\n    function extrema(bez1, comp1) {\n        var min1 = bez1.points[0][comp1];\n        var max1 = bez1.points[bez1.points.length - 1][comp1];\n        if (min1 > max1) {\n            var e3 = max1;\n            max1 = min1;\n            min1 = e3;\n        } // Derivative roots to find min/max\n        var f3 = quadRoots(3 * bez1.a[comp1], 2 * bez1.b[comp1], bez1.c[comp1]);\n        for(var i3 = 0; i3 < f3.length; i3 += 1){\n            if (f3[i3] > 0 && f3[i3] < 1) {\n                var val3 = bez1.point(f3[i3])[comp1];\n                if (val3 < min1) min1 = val3;\n                else if (val3 > max1) max1 = val3;\n            }\n        }\n        return {\n            min: min1,\n            max: max1\n        };\n    }\n    PolynomialBezier.prototype.bounds = function() {\n        return {\n            x: extrema(this, 0),\n            y: extrema(this, 1)\n        };\n    };\n    PolynomialBezier.prototype.boundingBox = function() {\n        var bounds1 = this.bounds();\n        return {\n            left: bounds1.x.min,\n            right: bounds1.x.max,\n            top: bounds1.y.min,\n            bottom: bounds1.y.max,\n            width: bounds1.x.max - bounds1.x.min,\n            height: bounds1.y.max - bounds1.y.min,\n            cx: (bounds1.x.max + bounds1.x.min) / 2,\n            cy: (bounds1.y.max + bounds1.y.min) / 2\n        };\n    };\n    function intersectData(bez1, t11, t21) {\n        var box1 = bez1.boundingBox();\n        return {\n            cx: box1.cx,\n            cy: box1.cy,\n            width: box1.width,\n            height: box1.height,\n            bez: bez1,\n            t: (t11 + t21) / 2,\n            t1: t11,\n            t2: t21\n        };\n    }\n    function splitData(data1) {\n        var split1 = data1.bez.split(0.5);\n        return [\n            intersectData(split1[0], data1.t1, data1.t),\n            intersectData(split1[1], data1.t, data1.t2)\n        ];\n    }\n    function boxIntersect(b11, b21) {\n        return Math.abs(b11.cx - b21.cx) * 2 < b11.width + b21.width && Math.abs(b11.cy - b21.cy) * 2 < b11.height + b21.height;\n    }\n    function intersectsImpl(d11, d21, depth1, tolerance1, intersections1, maxRecursion1) {\n        if (!boxIntersect(d11, d21)) return;\n        if (depth1 >= maxRecursion1 || d11.width <= tolerance1 && d11.height <= tolerance1 && d21.width <= tolerance1 && d21.height <= tolerance1) {\n            intersections1.push([\n                d11.t,\n                d21.t\n            ]);\n            return;\n        }\n        var d1s1 = splitData(d11);\n        var d2s1 = splitData(d21);\n        intersectsImpl(d1s1[0], d2s1[0], depth1 + 1, tolerance1, intersections1, maxRecursion1);\n        intersectsImpl(d1s1[0], d2s1[1], depth1 + 1, tolerance1, intersections1, maxRecursion1);\n        intersectsImpl(d1s1[1], d2s1[0], depth1 + 1, tolerance1, intersections1, maxRecursion1);\n        intersectsImpl(d1s1[1], d2s1[1], depth1 + 1, tolerance1, intersections1, maxRecursion1);\n    }\n    PolynomialBezier.prototype.intersections = function(other1, tolerance1, maxRecursion1) {\n        if (tolerance1 === undefined) tolerance1 = 2;\n        if (maxRecursion1 === undefined) maxRecursion1 = 7;\n        var intersections1 = [];\n        intersectsImpl(intersectData(this, 0, 1), intersectData(other1, 0, 1), 0, tolerance1, intersections1, maxRecursion1);\n        return intersections1;\n    };\n    PolynomialBezier.shapeSegment = function(shapePath1, index1) {\n        var nextIndex1 = (index1 + 1) % shapePath1.length();\n        return new PolynomialBezier(shapePath1.v[index1], shapePath1.o[index1], shapePath1.i[nextIndex1], shapePath1.v[nextIndex1], true);\n    };\n    PolynomialBezier.shapeSegmentInverted = function(shapePath1, index1) {\n        var nextIndex1 = (index1 + 1) % shapePath1.length();\n        return new PolynomialBezier(shapePath1.v[nextIndex1], shapePath1.i[nextIndex1], shapePath1.o[index1], shapePath1.v[index1], true);\n    };\n    function crossProduct(a3, b3) {\n        return [\n            a3[1] * b3[2] - a3[2] * b3[1],\n            a3[2] * b3[0] - a3[0] * b3[2],\n            a3[0] * b3[1] - a3[1] * b3[0]\n        ];\n    }\n    function lineIntersection(start11, end11, start21, end21) {\n        var v11 = [\n            start11[0],\n            start11[1],\n            1\n        ];\n        var v21 = [\n            end11[0],\n            end11[1],\n            1\n        ];\n        var v31 = [\n            start21[0],\n            start21[1],\n            1\n        ];\n        var v41 = [\n            end21[0],\n            end21[1],\n            1\n        ];\n        var r1 = crossProduct(crossProduct(v11, v21), crossProduct(v31, v41));\n        if (floatZero(r1[2])) return null;\n        return [\n            r1[0] / r1[2],\n            r1[1] / r1[2]\n        ];\n    }\n    function polarOffset(p6, angle1, length1) {\n        return [\n            p6[0] + Math.cos(angle1) * length1,\n            p6[1] - Math.sin(angle1) * length1\n        ];\n    }\n    function pointDistance(p14, p22) {\n        return Math.hypot(p14[0] - p22[0], p14[1] - p22[1]);\n    }\n    function pointEqual(p14, p22) {\n        return floatEqual(p14[0], p22[0]) && floatEqual(p14[1], p22[1]);\n    }\n    function ZigZagModifier() {}\n    extendPrototype([\n        ShapeModifier\n    ], ZigZagModifier);\n    ZigZagModifier.prototype.initModifierProperties = function(elem3, data1) {\n        this.getValue = this.processKeys;\n        this.amplitude = PropertyFactory.getProp(elem3, data1.s, 0, null, this);\n        this.frequency = PropertyFactory.getProp(elem3, data1.r, 0, null, this);\n        this.pointsType = PropertyFactory.getProp(elem3, data1.pt, 0, null, this);\n        this._isAnimated = this.amplitude.effectsSequence.length !== 0 || this.frequency.effectsSequence.length !== 0 || this.pointsType.effectsSequence.length !== 0;\n    };\n    function setPoint(outputBezier1, point1, angle1, direction1, amplitude1, outAmplitude1, inAmplitude1) {\n        var angO1 = angle1 - Math.PI / 2;\n        var angI1 = angle1 + Math.PI / 2;\n        var px1 = point1[0] + Math.cos(angle1) * direction1 * amplitude1;\n        var py1 = point1[1] - Math.sin(angle1) * direction1 * amplitude1;\n        outputBezier1.setTripleAt(px1, py1, px1 + Math.cos(angO1) * outAmplitude1, py1 - Math.sin(angO1) * outAmplitude1, px1 + Math.cos(angI1) * inAmplitude1, py1 - Math.sin(angI1) * inAmplitude1, outputBezier1.length());\n    }\n    function getPerpendicularVector(pt11, pt21) {\n        var vector1 = [\n            pt21[0] - pt11[0],\n            pt21[1] - pt11[1]\n        ];\n        var rot1 = -Math.PI * 0.5;\n        var rotatedVector1 = [\n            Math.cos(rot1) * vector1[0] - Math.sin(rot1) * vector1[1],\n            Math.sin(rot1) * vector1[0] + Math.cos(rot1) * vector1[1]\n        ];\n        return rotatedVector1;\n    }\n    function getProjectingAngle(path1, cur1) {\n        var prevIndex1 = cur1 === 0 ? path1.length() - 1 : cur1 - 1;\n        var nextIndex1 = (cur1 + 1) % path1.length();\n        var prevPoint1 = path1.v[prevIndex1];\n        var nextPoint1 = path1.v[nextIndex1];\n        var pVector1 = getPerpendicularVector(prevPoint1, nextPoint1);\n        return Math.atan2(0, 1) - Math.atan2(pVector1[1], pVector1[0]);\n    }\n    function zigZagCorner(outputBezier1, path1, cur1, amplitude1, frequency1, pointType1, direction1) {\n        var angle1 = getProjectingAngle(path1, cur1);\n        var point1 = path1.v[cur1 % path1._length];\n        var prevPoint1 = path1.v[cur1 === 0 ? path1._length - 1 : cur1 - 1];\n        var nextPoint1 = path1.v[(cur1 + 1) % path1._length];\n        var prevDist1 = pointType1 === 2 ? Math.sqrt(Math.pow(point1[0] - prevPoint1[0], 2) + Math.pow(point1[1] - prevPoint1[1], 2)) : 0;\n        var nextDist1 = pointType1 === 2 ? Math.sqrt(Math.pow(point1[0] - nextPoint1[0], 2) + Math.pow(point1[1] - nextPoint1[1], 2)) : 0;\n        setPoint(outputBezier1, path1.v[cur1 % path1._length], angle1, direction1, amplitude1, nextDist1 / ((frequency1 + 1) * 2), prevDist1 / ((frequency1 + 1) * 2), pointType1);\n    }\n    function zigZagSegment(outputBezier1, segment1, amplitude1, frequency1, pointType1, direction1) {\n        for(var i3 = 0; i3 < frequency1; i3 += 1){\n            var t3 = (i3 + 1) / (frequency1 + 1);\n            var dist4 = pointType1 === 2 ? Math.sqrt(Math.pow(segment1.points[3][0] - segment1.points[0][0], 2) + Math.pow(segment1.points[3][1] - segment1.points[0][1], 2)) : 0;\n            var angle1 = segment1.normalAngle(t3);\n            var point1 = segment1.point(t3);\n            setPoint(outputBezier1, point1, angle1, direction1, amplitude1, dist4 / ((frequency1 + 1) * 2), dist4 / ((frequency1 + 1) * 2), pointType1);\n            direction1 = -direction1;\n        }\n        return direction1;\n    }\n    ZigZagModifier.prototype.processPath = function(path1, amplitude1, frequency1, pointType1) {\n        var count1 = path1._length;\n        var clonedPath1 = shapePool.newElement();\n        clonedPath1.c = path1.c;\n        if (!path1.c) {\n            count1 -= 1;\n        }\n        if (count1 === 0) return clonedPath1;\n        var direction1 = -1;\n        var segment1 = PolynomialBezier.shapeSegment(path1, 0);\n        zigZagCorner(clonedPath1, path1, 0, amplitude1, frequency1, pointType1, direction1);\n        for(var i3 = 0; i3 < count1; i3 += 1){\n            direction1 = zigZagSegment(clonedPath1, segment1, amplitude1, frequency1, pointType1, -direction1);\n            if (i3 === count1 - 1 && !path1.c) {\n                segment1 = null;\n            } else {\n                segment1 = PolynomialBezier.shapeSegment(path1, (i3 + 1) % count1);\n            }\n            zigZagCorner(clonedPath1, path1, i3 + 1, amplitude1, frequency1, pointType1, direction1);\n        }\n        return clonedPath1;\n    };\n    ZigZagModifier.prototype.processShapes = function(_isFirstFrame1) {\n        var shapePaths1;\n        var i3;\n        var len1 = this.shapes.length;\n        var j3;\n        var jLen1;\n        var amplitude1 = this.amplitude.v;\n        var frequency1 = Math.max(0, Math.round(this.frequency.v));\n        var pointType1 = this.pointsType.v;\n        if (amplitude1 !== 0) {\n            var shapeData1;\n            var localShapeCollection1;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                shapeData1 = this.shapes[i3];\n                localShapeCollection1 = shapeData1.localShapeCollection;\n                if (!(!shapeData1.shape._mdf && !this._mdf && !_isFirstFrame1)) {\n                    localShapeCollection1.releaseShapes();\n                    shapeData1.shape._mdf = true;\n                    shapePaths1 = shapeData1.shape.paths.shapes;\n                    jLen1 = shapeData1.shape.paths._length;\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        localShapeCollection1.addShape(this.processPath(shapePaths1[j3], amplitude1, frequency1, pointType1));\n                    }\n                }\n                shapeData1.shape.paths = shapeData1.localShapeCollection;\n            }\n        }\n        if (!this.dynamicProperties.length) {\n            this._mdf = false;\n        }\n    };\n    function linearOffset(p14, p22, amount1) {\n        var angle1 = Math.atan2(p22[0] - p14[0], p22[1] - p14[1]);\n        return [\n            polarOffset(p14, angle1, amount1),\n            polarOffset(p22, angle1, amount1)\n        ];\n    }\n    function offsetSegment(segment1, amount1) {\n        var p01;\n        var p1a1;\n        var p1b1;\n        var p2b1;\n        var p2a1;\n        var p31;\n        var e3;\n        e3 = linearOffset(segment1.points[0], segment1.points[1], amount1);\n        p01 = e3[0];\n        p1a1 = e3[1];\n        e3 = linearOffset(segment1.points[1], segment1.points[2], amount1);\n        p1b1 = e3[0];\n        p2b1 = e3[1];\n        e3 = linearOffset(segment1.points[2], segment1.points[3], amount1);\n        p2a1 = e3[0];\n        p31 = e3[1];\n        var p14 = lineIntersection(p01, p1a1, p1b1, p2b1);\n        if (p14 === null) p14 = p1a1;\n        var p22 = lineIntersection(p2a1, p31, p1b1, p2b1);\n        if (p22 === null) p22 = p2a1;\n        return new PolynomialBezier(p01, p14, p22, p31);\n    }\n    function joinLines(outputBezier1, seg11, seg21, lineJoin1, miterLimit1) {\n        var p01 = seg11.points[3];\n        var p14 = seg21.points[0]; // Bevel\n        if (lineJoin1 === 3) return p01; // Connected, they don't need a joint\n        if (pointEqual(p01, p14)) return p01; // Round\n        if (lineJoin1 === 2) {\n            var angleOut1 = -seg11.tangentAngle(1);\n            var angleIn1 = -seg21.tangentAngle(0) + Math.PI;\n            var center1 = lineIntersection(p01, polarOffset(p01, angleOut1 + Math.PI / 2, 100), p14, polarOffset(p14, angleOut1 + Math.PI / 2, 100));\n            var radius1 = center1 ? pointDistance(center1, p01) : pointDistance(p01, p14) / 2;\n            var tan1 = polarOffset(p01, angleOut1, 2 * radius1 * roundCorner);\n            outputBezier1.setXYAt(tan1[0], tan1[1], \"o\", outputBezier1.length() - 1);\n            tan1 = polarOffset(p14, angleIn1, 2 * radius1 * roundCorner);\n            outputBezier1.setTripleAt(p14[0], p14[1], p14[0], p14[1], tan1[0], tan1[1], outputBezier1.length());\n            return p14;\n        } // Miter\n        var t01 = pointEqual(p01, seg11.points[2]) ? seg11.points[0] : seg11.points[2];\n        var t11 = pointEqual(p14, seg21.points[1]) ? seg21.points[3] : seg21.points[1];\n        var intersection1 = lineIntersection(t01, p01, p14, t11);\n        if (intersection1 && pointDistance(intersection1, p01) < miterLimit1) {\n            outputBezier1.setTripleAt(intersection1[0], intersection1[1], intersection1[0], intersection1[1], intersection1[0], intersection1[1], outputBezier1.length());\n            return intersection1;\n        }\n        return p01;\n    }\n    function getIntersection(a3, b3) {\n        var intersect1 = a3.intersections(b3);\n        if (intersect1.length && floatEqual(intersect1[0][0], 1)) intersect1.shift();\n        if (intersect1.length) return intersect1[0];\n        return null;\n    }\n    function pruneSegmentIntersection(a3, b3) {\n        var outa1 = a3.slice();\n        var outb1 = b3.slice();\n        var intersect1 = getIntersection(a3[a3.length - 1], b3[0]);\n        if (intersect1) {\n            outa1[a3.length - 1] = a3[a3.length - 1].split(intersect1[0])[0];\n            outb1[0] = b3[0].split(intersect1[1])[1];\n        }\n        if (a3.length > 1 && b3.length > 1) {\n            intersect1 = getIntersection(a3[0], b3[b3.length - 1]);\n            if (intersect1) {\n                return [\n                    [\n                        a3[0].split(intersect1[0])[0]\n                    ],\n                    [\n                        b3[b3.length - 1].split(intersect1[1])[1]\n                    ]\n                ];\n            }\n        }\n        return [\n            outa1,\n            outb1\n        ];\n    }\n    function pruneIntersections(segments1) {\n        var e3;\n        for(var i3 = 1; i3 < segments1.length; i3 += 1){\n            e3 = pruneSegmentIntersection(segments1[i3 - 1], segments1[i3]);\n            segments1[i3 - 1] = e3[0];\n            segments1[i3] = e3[1];\n        }\n        if (segments1.length > 1) {\n            e3 = pruneSegmentIntersection(segments1[segments1.length - 1], segments1[0]);\n            segments1[segments1.length - 1] = e3[0];\n            segments1[0] = e3[1];\n        }\n        return segments1;\n    }\n    function offsetSegmentSplit(segment1, amount1) {\n        /*\r\n      We split each bezier segment into smaller pieces based\r\n      on inflection points, this ensures the control point\r\n      polygon is convex.\r\n        (A cubic bezier can have none, one, or two inflection points)\r\n    */ var flex1 = segment1.inflectionPoints();\n        var left1;\n        var right1;\n        var split1;\n        var mid1;\n        if (flex1.length === 0) {\n            return [\n                offsetSegment(segment1, amount1)\n            ];\n        }\n        if (flex1.length === 1 || floatEqual(flex1[1], 1)) {\n            split1 = segment1.split(flex1[0]);\n            left1 = split1[0];\n            right1 = split1[1];\n            return [\n                offsetSegment(left1, amount1),\n                offsetSegment(right1, amount1)\n            ];\n        }\n        split1 = segment1.split(flex1[0]);\n        left1 = split1[0];\n        var t3 = (flex1[1] - flex1[0]) / (1 - flex1[0]);\n        split1 = split1[1].split(t3);\n        mid1 = split1[0];\n        right1 = split1[1];\n        return [\n            offsetSegment(left1, amount1),\n            offsetSegment(mid1, amount1),\n            offsetSegment(right1, amount1)\n        ];\n    }\n    function OffsetPathModifier() {}\n    extendPrototype([\n        ShapeModifier\n    ], OffsetPathModifier);\n    OffsetPathModifier.prototype.initModifierProperties = function(elem3, data1) {\n        this.getValue = this.processKeys;\n        this.amount = PropertyFactory.getProp(elem3, data1.a, 0, null, this);\n        this.miterLimit = PropertyFactory.getProp(elem3, data1.ml, 0, null, this);\n        this.lineJoin = data1.lj;\n        this._isAnimated = this.amount.effectsSequence.length !== 0;\n    };\n    OffsetPathModifier.prototype.processPath = function(inputBezier1, amount1, lineJoin1, miterLimit1) {\n        var outputBezier1 = shapePool.newElement();\n        outputBezier1.c = inputBezier1.c;\n        var count1 = inputBezier1.length();\n        if (!inputBezier1.c) {\n            count1 -= 1;\n        }\n        var i3;\n        var j3;\n        var segment1;\n        var multiSegments1 = [];\n        for(i3 = 0; i3 < count1; i3 += 1){\n            segment1 = PolynomialBezier.shapeSegment(inputBezier1, i3);\n            multiSegments1.push(offsetSegmentSplit(segment1, amount1));\n        }\n        if (!inputBezier1.c) {\n            for(i3 = count1 - 1; i3 >= 0; i3 -= 1){\n                segment1 = PolynomialBezier.shapeSegmentInverted(inputBezier1, i3);\n                multiSegments1.push(offsetSegmentSplit(segment1, amount1));\n            }\n        }\n        multiSegments1 = pruneIntersections(multiSegments1); // Add bezier segments to the output and apply line joints\n        var lastPoint1 = null;\n        var lastSeg1 = null;\n        for(i3 = 0; i3 < multiSegments1.length; i3 += 1){\n            var multiSegment1 = multiSegments1[i3];\n            if (lastSeg1) lastPoint1 = joinLines(outputBezier1, lastSeg1, multiSegment1[0], lineJoin1, miterLimit1);\n            lastSeg1 = multiSegment1[multiSegment1.length - 1];\n            for(j3 = 0; j3 < multiSegment1.length; j3 += 1){\n                segment1 = multiSegment1[j3];\n                if (lastPoint1 && pointEqual(segment1.points[0], lastPoint1)) {\n                    outputBezier1.setXYAt(segment1.points[1][0], segment1.points[1][1], \"o\", outputBezier1.length() - 1);\n                } else {\n                    outputBezier1.setTripleAt(segment1.points[0][0], segment1.points[0][1], segment1.points[1][0], segment1.points[1][1], segment1.points[0][0], segment1.points[0][1], outputBezier1.length());\n                }\n                outputBezier1.setTripleAt(segment1.points[3][0], segment1.points[3][1], segment1.points[3][0], segment1.points[3][1], segment1.points[2][0], segment1.points[2][1], outputBezier1.length());\n                lastPoint1 = segment1.points[3];\n            }\n        }\n        if (multiSegments1.length) joinLines(outputBezier1, lastSeg1, multiSegments1[0][0], lineJoin1, miterLimit1);\n        return outputBezier1;\n    };\n    OffsetPathModifier.prototype.processShapes = function(_isFirstFrame1) {\n        var shapePaths1;\n        var i3;\n        var len1 = this.shapes.length;\n        var j3;\n        var jLen1;\n        var amount1 = this.amount.v;\n        var miterLimit1 = this.miterLimit.v;\n        var lineJoin1 = this.lineJoin;\n        if (amount1 !== 0) {\n            var shapeData1;\n            var localShapeCollection1;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                shapeData1 = this.shapes[i3];\n                localShapeCollection1 = shapeData1.localShapeCollection;\n                if (!(!shapeData1.shape._mdf && !this._mdf && !_isFirstFrame1)) {\n                    localShapeCollection1.releaseShapes();\n                    shapeData1.shape._mdf = true;\n                    shapePaths1 = shapeData1.shape.paths.shapes;\n                    jLen1 = shapeData1.shape.paths._length;\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        localShapeCollection1.addShape(this.processPath(shapePaths1[j3], amount1, lineJoin1, miterLimit1));\n                    }\n                }\n                shapeData1.shape.paths = shapeData1.localShapeCollection;\n            }\n        }\n        if (!this.dynamicProperties.length) {\n            this._mdf = false;\n        }\n    };\n    function getFontProperties(fontData1) {\n        var styles1 = fontData1.fStyle ? fontData1.fStyle.split(\" \") : [];\n        var fWeight1 = \"normal\";\n        var fStyle1 = \"normal\";\n        var len1 = styles1.length;\n        var styleName1;\n        for(var i3 = 0; i3 < len1; i3 += 1){\n            styleName1 = styles1[i3].toLowerCase();\n            switch(styleName1){\n                case \"italic\":\n                    fStyle1 = \"italic\";\n                    break;\n                case \"bold\":\n                    fWeight1 = \"700\";\n                    break;\n                case \"black\":\n                    fWeight1 = \"900\";\n                    break;\n                case \"medium\":\n                    fWeight1 = \"500\";\n                    break;\n                case \"regular\":\n                case \"normal\":\n                    fWeight1 = \"400\";\n                    break;\n                case \"light\":\n                case \"thin\":\n                    fWeight1 = \"200\";\n                    break;\n                default:\n                    break;\n            }\n        }\n        return {\n            style: fStyle1,\n            weight: fontData1.fWeight || fWeight1\n        };\n    }\n    var FontManager = function() {\n        var maxWaitingTime1 = 5000;\n        var emptyChar1 = {\n            w: 0,\n            size: 0,\n            shapes: [],\n            data: {\n                shapes: []\n            }\n        };\n        var combinedCharacters1 = []; // Hindi characters\n        combinedCharacters1 = combinedCharacters1.concat([\n            2304,\n            2305,\n            2306,\n            2307,\n            2362,\n            2363,\n            2364,\n            2364,\n            2366,\n            2367,\n            2368,\n            2369,\n            2370,\n            2371,\n            2372,\n            2373,\n            2374,\n            2375,\n            2376,\n            2377,\n            2378,\n            2379,\n            2380,\n            2381,\n            2382,\n            2383,\n            2387,\n            2388,\n            2389,\n            2390,\n            2391,\n            2402,\n            2403\n        ]);\n        var BLACK_FLAG_CODE_POINT1 = 127988;\n        var CANCEL_TAG_CODE_POINT1 = 917631;\n        var A_TAG_CODE_POINT1 = 917601;\n        var Z_TAG_CODE_POINT1 = 917626;\n        var VARIATION_SELECTOR_16_CODE_POINT1 = 65039;\n        var ZERO_WIDTH_JOINER_CODE_POINT1 = 8205;\n        var REGIONAL_CHARACTER_A_CODE_POINT1 = 127462;\n        var REGIONAL_CHARACTER_Z_CODE_POINT1 = 127487;\n        var surrogateModifiers1 = [\n            \"d83cdffb\",\n            \"d83cdffc\",\n            \"d83cdffd\",\n            \"d83cdffe\",\n            \"d83cdfff\"\n        ];\n        function trimFontOptions1(font1) {\n            var familyArray1 = font1.split(\",\");\n            var i3;\n            var len1 = familyArray1.length;\n            var enabledFamilies1 = [];\n            for(i3 = 0; i3 < len1; i3 += 1){\n                if (familyArray1[i3] !== \"sans-serif\" && familyArray1[i3] !== \"monospace\") {\n                    enabledFamilies1.push(familyArray1[i3]);\n                }\n            }\n            return enabledFamilies1.join(\",\");\n        }\n        function setUpNode1(font1, family1) {\n            var parentNode1 = createTag(\"span\"); // Node is invisible to screen readers.\n            parentNode1.setAttribute(\"aria-hidden\", true);\n            parentNode1.style.fontFamily = family1;\n            var node1 = createTag(\"span\"); // Characters that vary significantly among different fonts\n            node1.innerText = \"giItT1WQy@!-/#\"; // Visible - so we can measure it - but not on the screen\n            parentNode1.style.position = \"absolute\";\n            parentNode1.style.left = \"-10000px\";\n            parentNode1.style.top = \"-10000px\"; // Large font size makes even subtle changes obvious\n            parentNode1.style.fontSize = \"300px\"; // Reset any font properties\n            parentNode1.style.fontVariant = \"normal\";\n            parentNode1.style.fontStyle = \"normal\";\n            parentNode1.style.fontWeight = \"normal\";\n            parentNode1.style.letterSpacing = \"0\";\n            parentNode1.appendChild(node1);\n            document.body.appendChild(parentNode1); // Remember width with no applied web font\n            var width1 = node1.offsetWidth;\n            node1.style.fontFamily = trimFontOptions1(font1) + \", \" + family1;\n            return {\n                node: node1,\n                w: width1,\n                parent: parentNode1\n            };\n        }\n        function checkLoadedFonts1() {\n            var i3;\n            var len1 = this.fonts.length;\n            var node1;\n            var w1;\n            var loadedCount1 = len1;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                if (this.fonts[i3].loaded) {\n                    loadedCount1 -= 1;\n                } else if (this.fonts[i3].fOrigin === \"n\" || this.fonts[i3].origin === 0) {\n                    this.fonts[i3].loaded = true;\n                } else {\n                    node1 = this.fonts[i3].monoCase.node;\n                    w1 = this.fonts[i3].monoCase.w;\n                    if (node1.offsetWidth !== w1) {\n                        loadedCount1 -= 1;\n                        this.fonts[i3].loaded = true;\n                    } else {\n                        node1 = this.fonts[i3].sansCase.node;\n                        w1 = this.fonts[i3].sansCase.w;\n                        if (node1.offsetWidth !== w1) {\n                            loadedCount1 -= 1;\n                            this.fonts[i3].loaded = true;\n                        }\n                    }\n                    if (this.fonts[i3].loaded) {\n                        this.fonts[i3].sansCase.parent.parentNode.removeChild(this.fonts[i3].sansCase.parent);\n                        this.fonts[i3].monoCase.parent.parentNode.removeChild(this.fonts[i3].monoCase.parent);\n                    }\n                }\n            }\n            if (loadedCount1 !== 0 && Date.now() - this.initTime < maxWaitingTime1) {\n                setTimeout(this.checkLoadedFontsBinded, 20);\n            } else {\n                setTimeout(this.setIsLoadedBinded, 10);\n            }\n        }\n        function createHelper1(fontData1, def1) {\n            var engine1 = document.body && def1 ? \"svg\" : \"canvas\";\n            var helper1;\n            var fontProps1 = getFontProperties(fontData1);\n            if (engine1 === \"svg\") {\n                var tHelper1 = createNS(\"text\");\n                tHelper1.style.fontSize = \"100px\"; // tHelper.style.fontFamily = fontData.fFamily;\n                tHelper1.setAttribute(\"font-family\", fontData1.fFamily);\n                tHelper1.setAttribute(\"font-style\", fontProps1.style);\n                tHelper1.setAttribute(\"font-weight\", fontProps1.weight);\n                tHelper1.textContent = \"1\";\n                if (fontData1.fClass) {\n                    tHelper1.style.fontFamily = \"inherit\";\n                    tHelper1.setAttribute(\"class\", fontData1.fClass);\n                } else {\n                    tHelper1.style.fontFamily = fontData1.fFamily;\n                }\n                def1.appendChild(tHelper1);\n                helper1 = tHelper1;\n            } else {\n                var tCanvasHelper1 = new OffscreenCanvas(500, 500).getContext(\"2d\");\n                tCanvasHelper1.font = fontProps1.style + \" \" + fontProps1.weight + \" 100px \" + fontData1.fFamily;\n                helper1 = tCanvasHelper1;\n            }\n            function measure1(text1) {\n                if (engine1 === \"svg\") {\n                    helper1.textContent = text1;\n                    return helper1.getComputedTextLength();\n                }\n                return helper1.measureText(text1).width;\n            }\n            return {\n                measureText: measure1\n            };\n        }\n        function addFonts1(fontData1, defs1) {\n            if (!fontData1) {\n                this.isLoaded = true;\n                return;\n            }\n            if (this.chars) {\n                this.isLoaded = true;\n                this.fonts = fontData1.list;\n                return;\n            }\n            if (!document.body) {\n                this.isLoaded = true;\n                fontData1.list.forEach(function(data1) {\n                    data1.helper = createHelper1(data1);\n                    data1.cache = {};\n                });\n                this.fonts = fontData1.list;\n                return;\n            }\n            var fontArr1 = fontData1.list;\n            var i3;\n            var len1 = fontArr1.length;\n            var _pendingFonts1 = len1;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                var shouldLoadFont1 = true;\n                var loadedSelector1;\n                var j3;\n                fontArr1[i3].loaded = false;\n                fontArr1[i3].monoCase = setUpNode1(fontArr1[i3].fFamily, \"monospace\");\n                fontArr1[i3].sansCase = setUpNode1(fontArr1[i3].fFamily, \"sans-serif\");\n                if (!fontArr1[i3].fPath) {\n                    fontArr1[i3].loaded = true;\n                    _pendingFonts1 -= 1;\n                } else if (fontArr1[i3].fOrigin === \"p\" || fontArr1[i3].origin === 3) {\n                    loadedSelector1 = document.querySelectorAll('style[f-forigin=\"p\"][f-family=\"' + fontArr1[i3].fFamily + '\"], style[f-origin=\"3\"][f-family=\"' + fontArr1[i3].fFamily + '\"]');\n                    if (loadedSelector1.length > 0) {\n                        shouldLoadFont1 = false;\n                    }\n                    if (shouldLoadFont1) {\n                        var s4 = createTag(\"style\");\n                        s4.setAttribute(\"f-forigin\", fontArr1[i3].fOrigin);\n                        s4.setAttribute(\"f-origin\", fontArr1[i3].origin);\n                        s4.setAttribute(\"f-family\", fontArr1[i3].fFamily);\n                        s4.type = \"text/css\";\n                        s4.innerText = \"@font-face {font-family: \" + fontArr1[i3].fFamily + \"; font-style: normal; src: url('\" + fontArr1[i3].fPath + \"');}\";\n                        defs1.appendChild(s4);\n                    }\n                } else if (fontArr1[i3].fOrigin === \"g\" || fontArr1[i3].origin === 1) {\n                    loadedSelector1 = document.querySelectorAll('link[f-forigin=\"g\"], link[f-origin=\"1\"]');\n                    for(j3 = 0; j3 < loadedSelector1.length; j3 += 1){\n                        if (loadedSelector1[j3].href.indexOf(fontArr1[i3].fPath) !== -1) {\n                            // Font is already loaded\n                            shouldLoadFont1 = false;\n                        }\n                    }\n                    if (shouldLoadFont1) {\n                        var l3 = createTag(\"link\");\n                        l3.setAttribute(\"f-forigin\", fontArr1[i3].fOrigin);\n                        l3.setAttribute(\"f-origin\", fontArr1[i3].origin);\n                        l3.type = \"text/css\";\n                        l3.rel = \"stylesheet\";\n                        l3.href = fontArr1[i3].fPath;\n                        document.body.appendChild(l3);\n                    }\n                } else if (fontArr1[i3].fOrigin === \"t\" || fontArr1[i3].origin === 2) {\n                    loadedSelector1 = document.querySelectorAll('script[f-forigin=\"t\"], script[f-origin=\"2\"]');\n                    for(j3 = 0; j3 < loadedSelector1.length; j3 += 1){\n                        if (fontArr1[i3].fPath === loadedSelector1[j3].src) {\n                            // Font is already loaded\n                            shouldLoadFont1 = false;\n                        }\n                    }\n                    if (shouldLoadFont1) {\n                        var sc1 = createTag(\"link\");\n                        sc1.setAttribute(\"f-forigin\", fontArr1[i3].fOrigin);\n                        sc1.setAttribute(\"f-origin\", fontArr1[i3].origin);\n                        sc1.setAttribute(\"rel\", \"stylesheet\");\n                        sc1.setAttribute(\"href\", fontArr1[i3].fPath);\n                        defs1.appendChild(sc1);\n                    }\n                }\n                fontArr1[i3].helper = createHelper1(fontArr1[i3], defs1);\n                fontArr1[i3].cache = {};\n                this.fonts.push(fontArr1[i3]);\n            }\n            if (_pendingFonts1 === 0) {\n                this.isLoaded = true;\n            } else {\n                // On some cases even if the font is loaded, it won't load correctly when measuring text on canvas.\n                // Adding this timeout seems to fix it\n                setTimeout(this.checkLoadedFonts.bind(this), 100);\n            }\n        }\n        function addChars1(chars1) {\n            if (!chars1) {\n                return;\n            }\n            if (!this.chars) {\n                this.chars = [];\n            }\n            var i3;\n            var len1 = chars1.length;\n            var j3;\n            var jLen1 = this.chars.length;\n            var found1;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                j3 = 0;\n                found1 = false;\n                while(j3 < jLen1){\n                    if (this.chars[j3].style === chars1[i3].style && this.chars[j3].fFamily === chars1[i3].fFamily && this.chars[j3].ch === chars1[i3].ch) {\n                        found1 = true;\n                    }\n                    j3 += 1;\n                }\n                if (!found1) {\n                    this.chars.push(chars1[i3]);\n                    jLen1 += 1;\n                }\n            }\n        }\n        function getCharData1(_char1, style1, font1) {\n            var i3 = 0;\n            var len1 = this.chars.length;\n            while(i3 < len1){\n                if (this.chars[i3].ch === _char1 && this.chars[i3].style === style1 && this.chars[i3].fFamily === font1) {\n                    return this.chars[i3];\n                }\n                i3 += 1;\n            }\n            if ((typeof _char1 === \"string\" && _char1.charCodeAt(0) !== 13 || !_char1) && console && console.warn // eslint-disable-line no-console\n             && !this._warned) {\n                this._warned = true;\n                console.warn(\"Missing character from exported characters list: \", _char1, style1, font1); // eslint-disable-line no-console\n            }\n            return emptyChar1;\n        }\n        function measureText1(_char21, fontName1, size1) {\n            var fontData1 = this.getFontByName(fontName1); // Using the char instead of char.charCodeAt(0)\n            // to avoid collisions between equal chars\n            var index1 = _char21;\n            if (!fontData1.cache[index1]) {\n                var tHelper1 = fontData1.helper;\n                if (_char21 === \" \") {\n                    var doubleSize1 = tHelper1.measureText(\"|\" + _char21 + \"|\");\n                    var singleSize1 = tHelper1.measureText(\"||\");\n                    fontData1.cache[index1] = (doubleSize1 - singleSize1) / 100;\n                } else {\n                    fontData1.cache[index1] = tHelper1.measureText(_char21) / 100;\n                }\n            }\n            return fontData1.cache[index1] * size1;\n        }\n        function getFontByName1(name1) {\n            var i3 = 0;\n            var len1 = this.fonts.length;\n            while(i3 < len1){\n                if (this.fonts[i3].fName === name1) {\n                    return this.fonts[i3];\n                }\n                i3 += 1;\n            }\n            return this.fonts[0];\n        }\n        function getCodePoint1(string1) {\n            var codePoint1 = 0;\n            var first1 = string1.charCodeAt(0);\n            if (first1 >= 0xD800 && first1 <= 0xDBFF) {\n                var second1 = string1.charCodeAt(1);\n                if (second1 >= 0xDC00 && second1 <= 0xDFFF) {\n                    codePoint1 = (first1 - 0xD800) * 0x400 + second1 - 0xDC00 + 0x10000;\n                }\n            }\n            return codePoint1;\n        } // Skin tone modifiers\n        function isModifier1(firstCharCode1, secondCharCode1) {\n            var sum1 = firstCharCode1.toString(16) + secondCharCode1.toString(16);\n            return surrogateModifiers1.indexOf(sum1) !== -1;\n        }\n        function isZeroWidthJoiner1(charCode1) {\n            return charCode1 === ZERO_WIDTH_JOINER_CODE_POINT1;\n        } // This codepoint may change the appearance of the preceding character.\n        // If that is a symbol, dingbat or emoji, U+FE0F forces it to be rendered\n        // as a colorful image as compared to a monochrome text variant.\n        function isVariationSelector1(charCode1) {\n            return charCode1 === VARIATION_SELECTOR_16_CODE_POINT1;\n        } // The regional indicator symbols are a set of 26 alphabetic Unicode\n        /// characters (A–Z) intended to be used to encode ISO 3166-1 alpha-2\n        // two-letter country codes in a way that allows optional special treatment.\n        function isRegionalCode1(string1) {\n            var codePoint1 = getCodePoint1(string1);\n            if (codePoint1 >= REGIONAL_CHARACTER_A_CODE_POINT1 && codePoint1 <= REGIONAL_CHARACTER_Z_CODE_POINT1) {\n                return true;\n            }\n            return false;\n        } // Some Emoji implementations represent combinations of\n        // two “regional indicator” letters as a single flag symbol.\n        function isFlagEmoji1(string1) {\n            return isRegionalCode1(string1.substr(0, 2)) && isRegionalCode1(string1.substr(2, 2));\n        }\n        function isCombinedCharacter1(_char31) {\n            return combinedCharacters1.indexOf(_char31) !== -1;\n        } // Regional flags start with a BLACK_FLAG_CODE_POINT\n        // folowed by 5 chars in the TAG range\n        // and end with a CANCEL_TAG_CODE_POINT\n        function isRegionalFlag1(text1, index1) {\n            var codePoint1 = getCodePoint1(text1.substr(index1, 2));\n            if (codePoint1 !== BLACK_FLAG_CODE_POINT1) {\n                return false;\n            }\n            var count1 = 0;\n            index1 += 2;\n            while(count1 < 5){\n                codePoint1 = getCodePoint1(text1.substr(index1, 2));\n                if (codePoint1 < A_TAG_CODE_POINT1 || codePoint1 > Z_TAG_CODE_POINT1) {\n                    return false;\n                }\n                count1 += 1;\n                index1 += 2;\n            }\n            return getCodePoint1(text1.substr(index1, 2)) === CANCEL_TAG_CODE_POINT1;\n        }\n        function setIsLoaded1() {\n            this.isLoaded = true;\n        }\n        var Font1 = function Font1() {\n            this.fonts = [];\n            this.chars = null;\n            this.typekitLoaded = 0;\n            this.isLoaded = false;\n            this._warned = false;\n            this.initTime = Date.now();\n            this.setIsLoadedBinded = this.setIsLoaded.bind(this);\n            this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);\n        };\n        Font1.isModifier = isModifier1;\n        Font1.isZeroWidthJoiner = isZeroWidthJoiner1;\n        Font1.isFlagEmoji = isFlagEmoji1;\n        Font1.isRegionalCode = isRegionalCode1;\n        Font1.isCombinedCharacter = isCombinedCharacter1;\n        Font1.isRegionalFlag = isRegionalFlag1;\n        Font1.isVariationSelector = isVariationSelector1;\n        Font1.BLACK_FLAG_CODE_POINT = BLACK_FLAG_CODE_POINT1;\n        var fontPrototype1 = {\n            addChars: addChars1,\n            addFonts: addFonts1,\n            getCharData: getCharData1,\n            getFontByName: getFontByName1,\n            measureText: measureText1,\n            checkLoadedFonts: checkLoadedFonts1,\n            setIsLoaded: setIsLoaded1\n        };\n        Font1.prototype = fontPrototype1;\n        return Font1;\n    }();\n    function SlotManager(animationData1) {\n        this.animationData = animationData1;\n    }\n    SlotManager.prototype.getProp = function(data1) {\n        if (this.animationData.slots && this.animationData.slots[data1.sid]) {\n            return Object.assign(data1, this.animationData.slots[data1.sid].p);\n        }\n        return data1;\n    };\n    function slotFactory(animationData1) {\n        return new SlotManager(animationData1);\n    }\n    function RenderableElement() {}\n    RenderableElement.prototype = {\n        initRenderable: function initRenderable1() {\n            // layer's visibility related to inpoint and outpoint. Rename isVisible to isInRange\n            this.isInRange = false; // layer's display state\n            this.hidden = false; // If layer's transparency equals 0, it can be hidden\n            this.isTransparent = false; // list of animated components\n            this.renderableComponents = [];\n        },\n        addRenderableComponent: function addRenderableComponent1(component1) {\n            if (this.renderableComponents.indexOf(component1) === -1) {\n                this.renderableComponents.push(component1);\n            }\n        },\n        removeRenderableComponent: function removeRenderableComponent1(component1) {\n            if (this.renderableComponents.indexOf(component1) !== -1) {\n                this.renderableComponents.splice(this.renderableComponents.indexOf(component1), 1);\n            }\n        },\n        prepareRenderableFrame: function prepareRenderableFrame1(num1) {\n            this.checkLayerLimits(num1);\n        },\n        checkTransparency: function checkTransparency1() {\n            if (this.finalTransform.mProp.o.v <= 0) {\n                if (!this.isTransparent && this.globalData.renderConfig.hideOnTransparent) {\n                    this.isTransparent = true;\n                    this.hide();\n                }\n            } else if (this.isTransparent) {\n                this.isTransparent = false;\n                this.show();\n            }\n        },\n        /**\r\n       * @function\r\n       * Initializes frame related properties.\r\n       *\r\n       * @param {number} num\r\n       * current frame number in Layer's time\r\n       *\r\n       */ checkLayerLimits: function checkLayerLimits1(num1) {\n            if (this.data.ip - this.data.st <= num1 && this.data.op - this.data.st > num1) {\n                if (this.isInRange !== true) {\n                    this.globalData._mdf = true;\n                    this._mdf = true;\n                    this.isInRange = true;\n                    this.show();\n                }\n            } else if (this.isInRange !== false) {\n                this.globalData._mdf = true;\n                this.isInRange = false;\n                this.hide();\n            }\n        },\n        renderRenderable: function renderRenderable1() {\n            var i3;\n            var len1 = this.renderableComponents.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                this.renderableComponents[i3].renderFrame(this._isFirstFrame);\n            }\n        /* this.maskManager.renderFrame(this.finalTransform.mat);\r\n          this.renderableEffectsManager.renderFrame(this._isFirstFrame); */ },\n        sourceRectAtTime: function sourceRectAtTime1() {\n            return {\n                top: 0,\n                left: 0,\n                width: 100,\n                height: 100\n            };\n        },\n        getLayerSize: function getLayerSize1() {\n            if (this.data.ty === 5) {\n                return {\n                    w: this.data.textData.width,\n                    h: this.data.textData.height\n                };\n            }\n            return {\n                w: this.data.width,\n                h: this.data.height\n            };\n        }\n    };\n    var getBlendMode = function() {\n        var blendModeEnums1 = {\n            0: \"source-over\",\n            1: \"multiply\",\n            2: \"screen\",\n            3: \"overlay\",\n            4: \"darken\",\n            5: \"lighten\",\n            6: \"color-dodge\",\n            7: \"color-burn\",\n            8: \"hard-light\",\n            9: \"soft-light\",\n            10: \"difference\",\n            11: \"exclusion\",\n            12: \"hue\",\n            13: \"saturation\",\n            14: \"color\",\n            15: \"luminosity\"\n        };\n        return function(mode1) {\n            return blendModeEnums1[mode1] || \"\";\n        };\n    }();\n    function SliderEffect(data1, elem3, container1) {\n        this.p = PropertyFactory.getProp(elem3, data1.v, 0, 0, container1);\n    }\n    function AngleEffect(data1, elem3, container1) {\n        this.p = PropertyFactory.getProp(elem3, data1.v, 0, 0, container1);\n    }\n    function ColorEffect(data1, elem3, container1) {\n        this.p = PropertyFactory.getProp(elem3, data1.v, 1, 0, container1);\n    }\n    function PointEffect(data1, elem3, container1) {\n        this.p = PropertyFactory.getProp(elem3, data1.v, 1, 0, container1);\n    }\n    function LayerIndexEffect(data1, elem3, container1) {\n        this.p = PropertyFactory.getProp(elem3, data1.v, 0, 0, container1);\n    }\n    function MaskIndexEffect(data1, elem3, container1) {\n        this.p = PropertyFactory.getProp(elem3, data1.v, 0, 0, container1);\n    }\n    function CheckboxEffect(data1, elem3, container1) {\n        this.p = PropertyFactory.getProp(elem3, data1.v, 0, 0, container1);\n    }\n    function NoValueEffect() {\n        this.p = {};\n    }\n    function EffectsManager(data1, element1) {\n        var effects1 = data1.ef || [];\n        this.effectElements = [];\n        var i3;\n        var len1 = effects1.length;\n        var effectItem1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            effectItem1 = new GroupEffect(effects1[i3], element1);\n            this.effectElements.push(effectItem1);\n        }\n    }\n    function GroupEffect(data1, element1) {\n        this.init(data1, element1);\n    }\n    extendPrototype([\n        DynamicPropertyContainer\n    ], GroupEffect);\n    GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties;\n    GroupEffect.prototype.init = function(data1, element1) {\n        this.data = data1;\n        this.effectElements = [];\n        this.initDynamicPropertyContainer(element1);\n        var i3;\n        var len1 = this.data.ef.length;\n        var eff1;\n        var effects1 = this.data.ef;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            eff1 = null;\n            switch(effects1[i3].ty){\n                case 0:\n                    eff1 = new SliderEffect(effects1[i3], element1, this);\n                    break;\n                case 1:\n                    eff1 = new AngleEffect(effects1[i3], element1, this);\n                    break;\n                case 2:\n                    eff1 = new ColorEffect(effects1[i3], element1, this);\n                    break;\n                case 3:\n                    eff1 = new PointEffect(effects1[i3], element1, this);\n                    break;\n                case 4:\n                case 7:\n                    eff1 = new CheckboxEffect(effects1[i3], element1, this);\n                    break;\n                case 10:\n                    eff1 = new LayerIndexEffect(effects1[i3], element1, this);\n                    break;\n                case 11:\n                    eff1 = new MaskIndexEffect(effects1[i3], element1, this);\n                    break;\n                case 5:\n                    eff1 = new EffectsManager(effects1[i3], element1, this);\n                    break;\n                // case 6:\n                default:\n                    eff1 = new NoValueEffect(effects1[i3], element1, this);\n                    break;\n            }\n            if (eff1) {\n                this.effectElements.push(eff1);\n            }\n        }\n    };\n    function BaseElement() {}\n    BaseElement.prototype = {\n        checkMasks: function checkMasks1() {\n            if (!this.data.hasMask) {\n                return false;\n            }\n            var i3 = 0;\n            var len1 = this.data.masksProperties.length;\n            while(i3 < len1){\n                if (this.data.masksProperties[i3].mode !== \"n\" && this.data.masksProperties[i3].cl !== false) {\n                    return true;\n                }\n                i3 += 1;\n            }\n            return false;\n        },\n        initExpressions: function initExpressions1() {\n            var expressionsInterfaces1 = getExpressionInterfaces();\n            if (!expressionsInterfaces1) {\n                return;\n            }\n            var LayerExpressionInterface1 = expressionsInterfaces1(\"layer\");\n            var EffectsExpressionInterface1 = expressionsInterfaces1(\"effects\");\n            var ShapeExpressionInterface1 = expressionsInterfaces1(\"shape\");\n            var TextExpressionInterface1 = expressionsInterfaces1(\"text\");\n            var CompExpressionInterface1 = expressionsInterfaces1(\"comp\");\n            this.layerInterface = LayerExpressionInterface1(this);\n            if (this.data.hasMask && this.maskManager) {\n                this.layerInterface.registerMaskInterface(this.maskManager);\n            }\n            var effectsInterface1 = EffectsExpressionInterface1.createEffectsInterface(this, this.layerInterface);\n            this.layerInterface.registerEffectsInterface(effectsInterface1);\n            if (this.data.ty === 0 || this.data.xt) {\n                this.compInterface = CompExpressionInterface1(this);\n            } else if (this.data.ty === 4) {\n                this.layerInterface.shapeInterface = ShapeExpressionInterface1(this.shapesData, this.itemsData, this.layerInterface);\n                this.layerInterface.content = this.layerInterface.shapeInterface;\n            } else if (this.data.ty === 5) {\n                this.layerInterface.textInterface = TextExpressionInterface1(this);\n                this.layerInterface.text = this.layerInterface.textInterface;\n            }\n        },\n        setBlendMode: function setBlendMode1() {\n            var blendModeValue1 = getBlendMode(this.data.bm);\n            var elem3 = this.baseElement || this.layerElement;\n            elem3.style[\"mix-blend-mode\"] = blendModeValue1;\n        },\n        initBaseData: function initBaseData1(data1, globalData1, comp1) {\n            this.globalData = globalData1;\n            this.comp = comp1;\n            this.data = data1;\n            this.layerId = createElementID(); // Stretch factor for old animations missing this property.\n            if (!this.data.sr) {\n                this.data.sr = 1;\n            } // effects manager\n            this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);\n        },\n        getType: function getType1() {\n            return this.type;\n        },\n        sourceRectAtTime: function sourceRectAtTime1() {}\n    };\n    /**\r\n   * @file\r\n   * Handles element's layer frame update.\r\n   * Checks layer in point and out point\r\n   *\r\n   */ function FrameElement() {}\n    FrameElement.prototype = {\n        /**\r\n       * @function\r\n       * Initializes frame related properties.\r\n       *\r\n       */ initFrame: function initFrame1() {\n            // set to true when inpoint is rendered\n            this._isFirstFrame = false; // list of animated properties\n            this.dynamicProperties = []; // If layer has been modified in current tick this will be true\n            this._mdf = false;\n        },\n        /**\r\n       * @function\r\n       * Calculates all dynamic values\r\n       *\r\n       * @param {number} num\r\n       * current frame number in Layer's time\r\n       * @param {boolean} isVisible\r\n       * if layers is currently in range\r\n       *\r\n       */ prepareProperties: function prepareProperties1(num1, isVisible1) {\n            var i3;\n            var len1 = this.dynamicProperties.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                if (isVisible1 || this._isParent && this.dynamicProperties[i3].propType === \"transform\") {\n                    this.dynamicProperties[i3].getValue();\n                    if (this.dynamicProperties[i3]._mdf) {\n                        this.globalData._mdf = true;\n                        this._mdf = true;\n                    }\n                }\n            }\n        },\n        addDynamicProperty: function addDynamicProperty1(prop1) {\n            if (this.dynamicProperties.indexOf(prop1) === -1) {\n                this.dynamicProperties.push(prop1);\n            }\n        }\n    };\n    function FootageElement(data1, globalData1, comp1) {\n        this.initFrame();\n        this.initRenderable();\n        this.assetData = globalData1.getAssetData(data1.refId);\n        this.footageData = globalData1.imageLoader.getAsset(this.assetData);\n        this.initBaseData(data1, globalData1, comp1);\n    }\n    FootageElement.prototype.prepareFrame = function() {};\n    extendPrototype([\n        RenderableElement,\n        BaseElement,\n        FrameElement\n    ], FootageElement);\n    FootageElement.prototype.getBaseElement = function() {\n        return null;\n    };\n    FootageElement.prototype.renderFrame = function() {};\n    FootageElement.prototype.destroy = function() {};\n    FootageElement.prototype.initExpressions = function() {\n        var expressionsInterfaces1 = getExpressionInterfaces();\n        if (!expressionsInterfaces1) {\n            return;\n        }\n        var FootageInterface1 = expressionsInterfaces1(\"footage\");\n        this.layerInterface = FootageInterface1(this);\n    };\n    FootageElement.prototype.getFootageData = function() {\n        return this.footageData;\n    };\n    function AudioElement(data1, globalData1, comp1) {\n        this.initFrame();\n        this.initRenderable();\n        this.assetData = globalData1.getAssetData(data1.refId);\n        this.initBaseData(data1, globalData1, comp1);\n        this._isPlaying = false;\n        this._canPlay = false;\n        var assetPath1 = this.globalData.getAssetsPath(this.assetData);\n        this.audio = this.globalData.audioController.createAudio(assetPath1);\n        this._currentTime = 0;\n        this.globalData.audioController.addAudio(this);\n        this._volumeMultiplier = 1;\n        this._volume = 1;\n        this._previousVolume = null;\n        this.tm = data1.tm ? PropertyFactory.getProp(this, data1.tm, 0, globalData1.frameRate, this) : {\n            _placeholder: true\n        };\n        this.lv = PropertyFactory.getProp(this, data1.au && data1.au.lv ? data1.au.lv : {\n            k: [\n                100\n            ]\n        }, 1, 0.01, this);\n    }\n    AudioElement.prototype.prepareFrame = function(num1) {\n        this.prepareRenderableFrame(num1, true);\n        this.prepareProperties(num1, true);\n        if (!this.tm._placeholder) {\n            var timeRemapped1 = this.tm.v;\n            this._currentTime = timeRemapped1;\n        } else {\n            this._currentTime = num1 / this.data.sr;\n        }\n        this._volume = this.lv.v[0];\n        var totalVolume1 = this._volume * this._volumeMultiplier;\n        if (this._previousVolume !== totalVolume1) {\n            this._previousVolume = totalVolume1;\n            this.audio.volume(totalVolume1);\n        }\n    };\n    extendPrototype([\n        RenderableElement,\n        BaseElement,\n        FrameElement\n    ], AudioElement);\n    AudioElement.prototype.renderFrame = function() {\n        if (this.isInRange && this._canPlay) {\n            if (!this._isPlaying) {\n                this.audio.play();\n                this.audio.seek(this._currentTime / this.globalData.frameRate);\n                this._isPlaying = true;\n            } else if (!this.audio.playing() || Math.abs(this._currentTime / this.globalData.frameRate - this.audio.seek()) > 0.1) {\n                this.audio.seek(this._currentTime / this.globalData.frameRate);\n            }\n        }\n    };\n    AudioElement.prototype.show = function() {};\n    AudioElement.prototype.hide = function() {\n        this.audio.pause();\n        this._isPlaying = false;\n    };\n    AudioElement.prototype.pause = function() {\n        this.audio.pause();\n        this._isPlaying = false;\n        this._canPlay = false;\n    };\n    AudioElement.prototype.resume = function() {\n        this._canPlay = true;\n    };\n    AudioElement.prototype.setRate = function(rateValue1) {\n        this.audio.rate(rateValue1);\n    };\n    AudioElement.prototype.volume = function(volumeValue1) {\n        this._volumeMultiplier = volumeValue1;\n        this._previousVolume = volumeValue1 * this._volume;\n        this.audio.volume(this._previousVolume);\n    };\n    AudioElement.prototype.getBaseElement = function() {\n        return null;\n    };\n    AudioElement.prototype.destroy = function() {};\n    AudioElement.prototype.sourceRectAtTime = function() {};\n    AudioElement.prototype.initExpressions = function() {};\n    function BaseRenderer() {}\n    BaseRenderer.prototype.checkLayers = function(num1) {\n        var i3;\n        var len1 = this.layers.length;\n        var data1;\n        this.completeLayers = true;\n        for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n            if (!this.elements[i3]) {\n                data1 = this.layers[i3];\n                if (data1.ip - data1.st <= num1 - this.layers[i3].st && data1.op - data1.st > num1 - this.layers[i3].st) {\n                    this.buildItem(i3);\n                }\n            }\n            this.completeLayers = this.elements[i3] ? this.completeLayers : false;\n        }\n        this.checkPendingElements();\n    };\n    BaseRenderer.prototype.createItem = function(layer1) {\n        switch(layer1.ty){\n            case 2:\n                return this.createImage(layer1);\n            case 0:\n                return this.createComp(layer1);\n            case 1:\n                return this.createSolid(layer1);\n            case 3:\n                return this.createNull(layer1);\n            case 4:\n                return this.createShape(layer1);\n            case 5:\n                return this.createText(layer1);\n            case 6:\n                return this.createAudio(layer1);\n            case 13:\n                return this.createCamera(layer1);\n            case 15:\n                return this.createFootage(layer1);\n            default:\n                return this.createNull(layer1);\n        }\n    };\n    BaseRenderer.prototype.createCamera = function() {\n        throw new Error(\"You're using a 3d camera. Try the html renderer.\");\n    };\n    BaseRenderer.prototype.createAudio = function(data1) {\n        return new AudioElement(data1, this.globalData, this);\n    };\n    BaseRenderer.prototype.createFootage = function(data1) {\n        return new FootageElement(data1, this.globalData, this);\n    };\n    BaseRenderer.prototype.buildAllItems = function() {\n        var i3;\n        var len1 = this.layers.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            this.buildItem(i3);\n        }\n        this.checkPendingElements();\n    };\n    BaseRenderer.prototype.includeLayers = function(newLayers1) {\n        this.completeLayers = false;\n        var i3;\n        var len1 = newLayers1.length;\n        var j3;\n        var jLen1 = this.layers.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            j3 = 0;\n            while(j3 < jLen1){\n                if (this.layers[j3].id === newLayers1[i3].id) {\n                    this.layers[j3] = newLayers1[i3];\n                    break;\n                }\n                j3 += 1;\n            }\n        }\n    };\n    BaseRenderer.prototype.setProjectInterface = function(pInterface1) {\n        this.globalData.projectInterface = pInterface1;\n    };\n    BaseRenderer.prototype.initItems = function() {\n        if (!this.globalData.progressiveLoad) {\n            this.buildAllItems();\n        }\n    };\n    BaseRenderer.prototype.buildElementParenting = function(element1, parentName1, hierarchy1) {\n        var elements1 = this.elements;\n        var layers1 = this.layers;\n        var i3 = 0;\n        var len1 = layers1.length;\n        while(i3 < len1){\n            if (layers1[i3].ind == parentName1) {\n                // eslint-disable-line eqeqeq\n                if (!elements1[i3] || elements1[i3] === true) {\n                    this.buildItem(i3);\n                    this.addPendingElement(element1);\n                } else {\n                    hierarchy1.push(elements1[i3]);\n                    elements1[i3].setAsParent();\n                    if (layers1[i3].parent !== undefined) {\n                        this.buildElementParenting(element1, layers1[i3].parent, hierarchy1);\n                    } else {\n                        element1.setHierarchy(hierarchy1);\n                    }\n                }\n            }\n            i3 += 1;\n        }\n    };\n    BaseRenderer.prototype.addPendingElement = function(element1) {\n        this.pendingElements.push(element1);\n    };\n    BaseRenderer.prototype.searchExtraCompositions = function(assets1) {\n        var i3;\n        var len1 = assets1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (assets1[i3].xt) {\n                var comp1 = this.createComp(assets1[i3]);\n                comp1.initExpressions();\n                this.globalData.projectInterface.registerComposition(comp1);\n            }\n        }\n    };\n    BaseRenderer.prototype.getElementById = function(ind1) {\n        var i3;\n        var len1 = this.elements.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.elements[i3].data.ind === ind1) {\n                return this.elements[i3];\n            }\n        }\n        return null;\n    };\n    BaseRenderer.prototype.getElementByPath = function(path1) {\n        var pathValue1 = path1.shift();\n        var element1;\n        if (typeof pathValue1 === \"number\") {\n            element1 = this.elements[pathValue1];\n        } else {\n            var i3;\n            var len1 = this.elements.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                if (this.elements[i3].data.nm === pathValue1) {\n                    element1 = this.elements[i3];\n                    break;\n                }\n            }\n        }\n        if (path1.length === 0) {\n            return element1;\n        }\n        return element1.getElementByPath(path1);\n    };\n    BaseRenderer.prototype.setupGlobalData = function(animData1, fontsContainer1) {\n        this.globalData.fontManager = new FontManager();\n        this.globalData.slotManager = slotFactory(animData1);\n        this.globalData.fontManager.addChars(animData1.chars);\n        this.globalData.fontManager.addFonts(animData1.fonts, fontsContainer1);\n        this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);\n        this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);\n        this.globalData.imageLoader = this.animationItem.imagePreloader;\n        this.globalData.audioController = this.animationItem.audioController;\n        this.globalData.frameId = 0;\n        this.globalData.frameRate = animData1.fr;\n        this.globalData.nm = animData1.nm;\n        this.globalData.compSize = {\n            w: animData1.w,\n            h: animData1.h\n        };\n    };\n    var effectTypes = {\n        TRANSFORM_EFFECT: \"transformEFfect\"\n    };\n    function TransformElement() {}\n    TransformElement.prototype = {\n        initTransform: function initTransform1() {\n            var mat1 = new Matrix();\n            this.finalTransform = {\n                mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {\n                    o: 0\n                },\n                _matMdf: false,\n                _localMatMdf: false,\n                _opMdf: false,\n                mat: mat1,\n                localMat: mat1,\n                localOpacity: 1\n            };\n            if (this.data.ao) {\n                this.finalTransform.mProp.autoOriented = true;\n            } // TODO: check TYPE 11: Guided elements\n            if (this.data.ty !== 11) {}\n        },\n        renderTransform: function renderTransform1() {\n            this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;\n            this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;\n            if (this.hierarchy) {\n                var mat1;\n                var finalMat1 = this.finalTransform.mat;\n                var i3 = 0;\n                var len1 = this.hierarchy.length; // Checking if any of the transformation matrices in the hierarchy chain has changed.\n                if (!this.finalTransform._matMdf) {\n                    while(i3 < len1){\n                        if (this.hierarchy[i3].finalTransform.mProp._mdf) {\n                            this.finalTransform._matMdf = true;\n                            break;\n                        }\n                        i3 += 1;\n                    }\n                }\n                if (this.finalTransform._matMdf) {\n                    mat1 = this.finalTransform.mProp.v.props;\n                    finalMat1.cloneFromProps(mat1);\n                    for(i3 = 0; i3 < len1; i3 += 1){\n                        finalMat1.multiply(this.hierarchy[i3].finalTransform.mProp.v);\n                    }\n                }\n            }\n            if (this.finalTransform._matMdf) {\n                this.finalTransform._localMatMdf = this.finalTransform._matMdf;\n            }\n            if (this.finalTransform._opMdf) {\n                this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;\n            }\n        },\n        renderLocalTransform: function renderLocalTransform1() {\n            if (this.localTransforms) {\n                var i3 = 0;\n                var len1 = this.localTransforms.length;\n                this.finalTransform._localMatMdf = this.finalTransform._matMdf;\n                if (!this.finalTransform._localMatMdf || !this.finalTransform._opMdf) {\n                    while(i3 < len1){\n                        if (this.localTransforms[i3]._mdf) {\n                            this.finalTransform._localMatMdf = true;\n                        }\n                        if (this.localTransforms[i3]._opMdf && !this.finalTransform._opMdf) {\n                            this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;\n                            this.finalTransform._opMdf = true;\n                        }\n                        i3 += 1;\n                    }\n                }\n                if (this.finalTransform._localMatMdf) {\n                    var localMat1 = this.finalTransform.localMat;\n                    this.localTransforms[0].matrix.clone(localMat1);\n                    for(i3 = 1; i3 < len1; i3 += 1){\n                        var lmat1 = this.localTransforms[i3].matrix;\n                        localMat1.multiply(lmat1);\n                    }\n                    localMat1.multiply(this.finalTransform.mat);\n                }\n                if (this.finalTransform._opMdf) {\n                    var localOp1 = this.finalTransform.localOpacity;\n                    for(i3 = 0; i3 < len1; i3 += 1){\n                        localOp1 *= this.localTransforms[i3].opacity * 0.01;\n                    }\n                    this.finalTransform.localOpacity = localOp1;\n                }\n            }\n        },\n        searchEffectTransforms: function searchEffectTransforms1() {\n            if (this.renderableEffectsManager) {\n                var transformEffects1 = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);\n                if (transformEffects1.length) {\n                    this.localTransforms = [];\n                    this.finalTransform.localMat = new Matrix();\n                    var i3 = 0;\n                    var len1 = transformEffects1.length;\n                    for(i3 = 0; i3 < len1; i3 += 1){\n                        this.localTransforms.push(transformEffects1[i3]);\n                    }\n                }\n            }\n        },\n        globalToLocal: function globalToLocal1(pt5) {\n            var transforms1 = [];\n            transforms1.push(this.finalTransform);\n            var flag1 = true;\n            var comp1 = this.comp;\n            while(flag1){\n                if (comp1.finalTransform) {\n                    if (comp1.data.hasMask) {\n                        transforms1.splice(0, 0, comp1.finalTransform);\n                    }\n                    comp1 = comp1.comp;\n                } else {\n                    flag1 = false;\n                }\n            }\n            var i3;\n            var len1 = transforms1.length;\n            var ptNew1;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                ptNew1 = transforms1[i3].mat.applyToPointArray(0, 0, 0); // ptNew = transforms[i].mat.applyToPointArray(pt[0],pt[1],pt[2]);\n                pt5 = [\n                    pt5[0] - ptNew1[0],\n                    pt5[1] - ptNew1[1],\n                    0\n                ];\n            }\n            return pt5;\n        },\n        mHelper: new Matrix()\n    };\n    function MaskElement(data1, element1, globalData1) {\n        this.data = data1;\n        this.element = element1;\n        this.globalData = globalData1;\n        this.storedData = [];\n        this.masksProperties = this.data.masksProperties || [];\n        this.maskElement = null;\n        var defs1 = this.globalData.defs;\n        var i3;\n        var len1 = this.masksProperties ? this.masksProperties.length : 0;\n        this.viewData = createSizedArray(len1);\n        this.solidPath = \"\";\n        var path1;\n        var properties1 = this.masksProperties;\n        var count1 = 0;\n        var currentMasks1 = [];\n        var j3;\n        var jLen1;\n        var layerId1 = createElementID();\n        var rect1;\n        var expansor1;\n        var feMorph1;\n        var x4;\n        var maskType1 = \"clipPath\";\n        var maskRef1 = \"clip-path\";\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (properties1[i3].mode !== \"a\" && properties1[i3].mode !== \"n\" || properties1[i3].inv || properties1[i3].o.k !== 100 || properties1[i3].o.x) {\n                maskType1 = \"mask\";\n                maskRef1 = \"mask\";\n            }\n            if ((properties1[i3].mode === \"s\" || properties1[i3].mode === \"i\") && count1 === 0) {\n                rect1 = createNS(\"rect\");\n                rect1.setAttribute(\"fill\", \"#ffffff\");\n                rect1.setAttribute(\"width\", this.element.comp.data.w || 0);\n                rect1.setAttribute(\"height\", this.element.comp.data.h || 0);\n                currentMasks1.push(rect1);\n            } else {\n                rect1 = null;\n            }\n            path1 = createNS(\"path\");\n            if (properties1[i3].mode === \"n\") {\n                // TODO move this to a factory or to a constructor\n                this.viewData[i3] = {\n                    op: PropertyFactory.getProp(this.element, properties1[i3].o, 0, 0.01, this.element),\n                    prop: ShapePropertyFactory.getShapeProp(this.element, properties1[i3], 3),\n                    elem: path1,\n                    lastPath: \"\"\n                };\n                defs1.appendChild(path1);\n            } else {\n                count1 += 1;\n                path1.setAttribute(\"fill\", properties1[i3].mode === \"s\" ? \"#000000\" : \"#ffffff\");\n                path1.setAttribute(\"clip-rule\", \"nonzero\");\n                var filterID1;\n                if (properties1[i3].x.k !== 0) {\n                    maskType1 = \"mask\";\n                    maskRef1 = \"mask\";\n                    x4 = PropertyFactory.getProp(this.element, properties1[i3].x, 0, null, this.element);\n                    filterID1 = createElementID();\n                    expansor1 = createNS(\"filter\");\n                    expansor1.setAttribute(\"id\", filterID1);\n                    feMorph1 = createNS(\"feMorphology\");\n                    feMorph1.setAttribute(\"operator\", \"erode\");\n                    feMorph1.setAttribute(\"in\", \"SourceGraphic\");\n                    feMorph1.setAttribute(\"radius\", \"0\");\n                    expansor1.appendChild(feMorph1);\n                    defs1.appendChild(expansor1);\n                    path1.setAttribute(\"stroke\", properties1[i3].mode === \"s\" ? \"#000000\" : \"#ffffff\");\n                } else {\n                    feMorph1 = null;\n                    x4 = null;\n                } // TODO move this to a factory or to a constructor\n                this.storedData[i3] = {\n                    elem: path1,\n                    x: x4,\n                    expan: feMorph1,\n                    lastPath: \"\",\n                    lastOperator: \"\",\n                    filterId: filterID1,\n                    lastRadius: 0\n                };\n                if (properties1[i3].mode === \"i\") {\n                    jLen1 = currentMasks1.length;\n                    var g3 = createNS(\"g\");\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        g3.appendChild(currentMasks1[j3]);\n                    }\n                    var mask1 = createNS(\"mask\");\n                    mask1.setAttribute(\"mask-type\", \"alpha\");\n                    mask1.setAttribute(\"id\", layerId1 + \"_\" + count1);\n                    mask1.appendChild(path1);\n                    defs1.appendChild(mask1);\n                    g3.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + layerId1 + \"_\" + count1 + \")\");\n                    currentMasks1.length = 0;\n                    currentMasks1.push(g3);\n                } else {\n                    currentMasks1.push(path1);\n                }\n                if (properties1[i3].inv && !this.solidPath) {\n                    this.solidPath = this.createLayerSolidPath();\n                } // TODO move this to a factory or to a constructor\n                this.viewData[i3] = {\n                    elem: path1,\n                    lastPath: \"\",\n                    op: PropertyFactory.getProp(this.element, properties1[i3].o, 0, 0.01, this.element),\n                    prop: ShapePropertyFactory.getShapeProp(this.element, properties1[i3], 3),\n                    invRect: rect1\n                };\n                if (!this.viewData[i3].prop.k) {\n                    this.drawPath(properties1[i3], this.viewData[i3].prop.v, this.viewData[i3]);\n                }\n            }\n        }\n        this.maskElement = createNS(maskType1);\n        len1 = currentMasks1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            this.maskElement.appendChild(currentMasks1[i3]);\n        }\n        if (count1 > 0) {\n            this.maskElement.setAttribute(\"id\", layerId1);\n            this.element.maskedElement.setAttribute(maskRef1, \"url(\" + getLocationHref() + \"#\" + layerId1 + \")\");\n            defs1.appendChild(this.maskElement);\n        }\n        if (this.viewData.length) {\n            this.element.addRenderableComponent(this);\n        }\n    }\n    MaskElement.prototype.getMaskProperty = function(pos1) {\n        return this.viewData[pos1].prop;\n    };\n    MaskElement.prototype.renderFrame = function(isFirstFrame1) {\n        var finalMat1 = this.element.finalTransform.mat;\n        var i3;\n        var len1 = this.masksProperties.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.viewData[i3].prop._mdf || isFirstFrame1) {\n                this.drawPath(this.masksProperties[i3], this.viewData[i3].prop.v, this.viewData[i3]);\n            }\n            if (this.viewData[i3].op._mdf || isFirstFrame1) {\n                this.viewData[i3].elem.setAttribute(\"fill-opacity\", this.viewData[i3].op.v);\n            }\n            if (this.masksProperties[i3].mode !== \"n\") {\n                if (this.viewData[i3].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame1)) {\n                    this.viewData[i3].invRect.setAttribute(\"transform\", finalMat1.getInverseMatrix().to2dCSS());\n                }\n                if (this.storedData[i3].x && (this.storedData[i3].x._mdf || isFirstFrame1)) {\n                    var feMorph1 = this.storedData[i3].expan;\n                    if (this.storedData[i3].x.v < 0) {\n                        if (this.storedData[i3].lastOperator !== \"erode\") {\n                            this.storedData[i3].lastOperator = \"erode\";\n                            this.storedData[i3].elem.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + this.storedData[i3].filterId + \")\");\n                        }\n                        feMorph1.setAttribute(\"radius\", -this.storedData[i3].x.v);\n                    } else {\n                        if (this.storedData[i3].lastOperator !== \"dilate\") {\n                            this.storedData[i3].lastOperator = \"dilate\";\n                            this.storedData[i3].elem.setAttribute(\"filter\", null);\n                        }\n                        this.storedData[i3].elem.setAttribute(\"stroke-width\", this.storedData[i3].x.v * 2);\n                    }\n                }\n            }\n        }\n    };\n    MaskElement.prototype.getMaskelement = function() {\n        return this.maskElement;\n    };\n    MaskElement.prototype.createLayerSolidPath = function() {\n        var path1 = \"M0,0 \";\n        path1 += \" h\" + this.globalData.compSize.w;\n        path1 += \" v\" + this.globalData.compSize.h;\n        path1 += \" h-\" + this.globalData.compSize.w;\n        path1 += \" v-\" + this.globalData.compSize.h + \" \";\n        return path1;\n    };\n    MaskElement.prototype.drawPath = function(pathData1, pathNodes1, viewData1) {\n        var pathString1 = \" M\" + pathNodes1.v[0][0] + \",\" + pathNodes1.v[0][1];\n        var i3;\n        var len1;\n        len1 = pathNodes1._length;\n        for(i3 = 1; i3 < len1; i3 += 1){\n            // pathString += \" C\"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + \" \"+pathNodes.i[i][0]+','+pathNodes.i[i][1] + \" \"+pathNodes.v[i][0]+','+pathNodes.v[i][1];\n            pathString1 += \" C\" + pathNodes1.o[i3 - 1][0] + \",\" + pathNodes1.o[i3 - 1][1] + \" \" + pathNodes1.i[i3][0] + \",\" + pathNodes1.i[i3][1] + \" \" + pathNodes1.v[i3][0] + \",\" + pathNodes1.v[i3][1];\n        } // pathString += \" C\"+pathNodes.o[i-1][0]+','+pathNodes.o[i-1][1] + \" \"+pathNodes.i[0][0]+','+pathNodes.i[0][1] + \" \"+pathNodes.v[0][0]+','+pathNodes.v[0][1];\n        if (pathNodes1.c && len1 > 1) {\n            pathString1 += \" C\" + pathNodes1.o[i3 - 1][0] + \",\" + pathNodes1.o[i3 - 1][1] + \" \" + pathNodes1.i[0][0] + \",\" + pathNodes1.i[0][1] + \" \" + pathNodes1.v[0][0] + \",\" + pathNodes1.v[0][1];\n        } // pathNodes.__renderedString = pathString;\n        if (viewData1.lastPath !== pathString1) {\n            var pathShapeValue1 = \"\";\n            if (viewData1.elem) {\n                if (pathNodes1.c) {\n                    pathShapeValue1 = pathData1.inv ? this.solidPath + pathString1 : pathString1;\n                }\n                viewData1.elem.setAttribute(\"d\", pathShapeValue1);\n            }\n            viewData1.lastPath = pathString1;\n        }\n    };\n    MaskElement.prototype.destroy = function() {\n        this.element = null;\n        this.globalData = null;\n        this.maskElement = null;\n        this.data = null;\n        this.masksProperties = null;\n    };\n    var filtersFactory = function() {\n        var ob1 = {};\n        ob1.createFilter = createFilter1;\n        ob1.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter1;\n        function createFilter1(filId1, skipCoordinates1) {\n            var fil1 = createNS(\"filter\");\n            fil1.setAttribute(\"id\", filId1);\n            if (skipCoordinates1 !== true) {\n                fil1.setAttribute(\"filterUnits\", \"objectBoundingBox\");\n                fil1.setAttribute(\"x\", \"0%\");\n                fil1.setAttribute(\"y\", \"0%\");\n                fil1.setAttribute(\"width\", \"100%\");\n                fil1.setAttribute(\"height\", \"100%\");\n            }\n            return fil1;\n        }\n        function createAlphaToLuminanceFilter1() {\n            var feColorMatrix1 = createNS(\"feColorMatrix\");\n            feColorMatrix1.setAttribute(\"type\", \"matrix\");\n            feColorMatrix1.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n            feColorMatrix1.setAttribute(\"values\", \"0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1\");\n            return feColorMatrix1;\n        }\n        return ob1;\n    }();\n    var featureSupport = function() {\n        var ob1 = {\n            maskType: true,\n            svgLumaHidden: true,\n            offscreenCanvas: typeof OffscreenCanvas !== \"undefined\"\n        };\n        if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\\/\\d./i.test(navigator.userAgent)) {\n            ob1.maskType = false;\n        }\n        if (/firefox/i.test(navigator.userAgent)) {\n            ob1.svgLumaHidden = false;\n        }\n        return ob1;\n    }();\n    var registeredEffects$1 = {};\n    var idPrefix = \"filter_result_\";\n    function SVGEffects(elem3) {\n        var i3;\n        var source1 = \"SourceGraphic\";\n        var len1 = elem3.data.ef ? elem3.data.ef.length : 0;\n        var filId1 = createElementID();\n        var fil1 = filtersFactory.createFilter(filId1, true);\n        var count1 = 0;\n        this.filters = [];\n        var filterManager1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            filterManager1 = null;\n            var type1 = elem3.data.ef[i3].ty;\n            if (registeredEffects$1[type1]) {\n                var Effect1 = registeredEffects$1[type1].effect;\n                filterManager1 = new Effect1(fil1, elem3.effectsManager.effectElements[i3], elem3, idPrefix + count1, source1);\n                source1 = idPrefix + count1;\n                if (registeredEffects$1[type1].countsAsEffect) {\n                    count1 += 1;\n                }\n            }\n            if (filterManager1) {\n                this.filters.push(filterManager1);\n            }\n        }\n        if (count1) {\n            elem3.globalData.defs.appendChild(fil1);\n            elem3.layerElement.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + filId1 + \")\");\n        }\n        if (this.filters.length) {\n            elem3.addRenderableComponent(this);\n        }\n    }\n    SVGEffects.prototype.renderFrame = function(_isFirstFrame1) {\n        var i3;\n        var len1 = this.filters.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            this.filters[i3].renderFrame(_isFirstFrame1);\n        }\n    };\n    SVGEffects.prototype.getEffects = function(type1) {\n        var i3;\n        var len1 = this.filters.length;\n        var effects1 = [];\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.filters[i3].type === type1) {\n                effects1.push(this.filters[i3]);\n            }\n        }\n        return effects1;\n    };\n    function registerEffect$1(id1, effect1, countsAsEffect1) {\n        registeredEffects$1[id1] = {\n            effect: effect1,\n            countsAsEffect: countsAsEffect1\n        };\n    }\n    function SVGBaseElement() {}\n    SVGBaseElement.prototype = {\n        initRendererElement: function initRendererElement1() {\n            this.layerElement = createNS(\"g\");\n        },\n        createContainerElements: function createContainerElements1() {\n            this.matteElement = createNS(\"g\");\n            this.transformedElement = this.layerElement;\n            this.maskedElement = this.layerElement;\n            this._sizeChanged = false;\n            var layerElementParent1 = null; // If this layer acts as a mask for the following layer\n            if (this.data.td) {\n                this.matteMasks = {};\n                var gg1 = createNS(\"g\");\n                gg1.setAttribute(\"id\", this.layerId);\n                gg1.appendChild(this.layerElement);\n                layerElementParent1 = gg1;\n                this.globalData.defs.appendChild(gg1);\n            } else if (this.data.tt) {\n                this.matteElement.appendChild(this.layerElement);\n                layerElementParent1 = this.matteElement;\n                this.baseElement = this.matteElement;\n            } else {\n                this.baseElement = this.layerElement;\n            }\n            if (this.data.ln) {\n                this.layerElement.setAttribute(\"id\", this.data.ln);\n            }\n            if (this.data.cl) {\n                this.layerElement.setAttribute(\"class\", this.data.cl);\n            } // Clipping compositions to hide content that exceeds boundaries. If collapsed transformations is on, component should not be clipped\n            if (this.data.ty === 0 && !this.data.hd) {\n                var cp1 = createNS(\"clipPath\");\n                var pt5 = createNS(\"path\");\n                pt5.setAttribute(\"d\", \"M0,0 L\" + this.data.w + \",0 L\" + this.data.w + \",\" + this.data.h + \" L0,\" + this.data.h + \"z\");\n                var clipId1 = createElementID();\n                cp1.setAttribute(\"id\", clipId1);\n                cp1.appendChild(pt5);\n                this.globalData.defs.appendChild(cp1);\n                if (this.checkMasks()) {\n                    var cpGroup1 = createNS(\"g\");\n                    cpGroup1.setAttribute(\"clip-path\", \"url(\" + getLocationHref() + \"#\" + clipId1 + \")\");\n                    cpGroup1.appendChild(this.layerElement);\n                    this.transformedElement = cpGroup1;\n                    if (layerElementParent1) {\n                        layerElementParent1.appendChild(this.transformedElement);\n                    } else {\n                        this.baseElement = this.transformedElement;\n                    }\n                } else {\n                    this.layerElement.setAttribute(\"clip-path\", \"url(\" + getLocationHref() + \"#\" + clipId1 + \")\");\n                }\n            }\n            if (this.data.bm !== 0) {\n                this.setBlendMode();\n            }\n        },\n        renderElement: function renderElement1() {\n            if (this.finalTransform._localMatMdf) {\n                this.transformedElement.setAttribute(\"transform\", this.finalTransform.localMat.to2dCSS());\n            }\n            if (this.finalTransform._opMdf) {\n                this.transformedElement.setAttribute(\"opacity\", this.finalTransform.localOpacity);\n            }\n        },\n        destroyBaseElement: function destroyBaseElement1() {\n            this.layerElement = null;\n            this.matteElement = null;\n            this.maskManager.destroy();\n        },\n        getBaseElement: function getBaseElement1() {\n            if (this.data.hd) {\n                return null;\n            }\n            return this.baseElement;\n        },\n        createRenderableComponents: function createRenderableComponents1() {\n            this.maskManager = new MaskElement(this.data, this, this.globalData);\n            this.renderableEffectsManager = new SVGEffects(this);\n            this.searchEffectTransforms();\n        },\n        getMatte: function getMatte1(matteType1) {\n            // This should not be a common case. But for backward compatibility, we'll create the matte object.\n            // It solves animations that have two consecutive layers marked as matte masks.\n            // Which is an undefined behavior in AE.\n            if (!this.matteMasks) {\n                this.matteMasks = {};\n            }\n            if (!this.matteMasks[matteType1]) {\n                var id1 = this.layerId + \"_\" + matteType1;\n                var filId1;\n                var fil1;\n                var useElement1;\n                var gg1;\n                if (matteType1 === 1 || matteType1 === 3) {\n                    var masker1 = createNS(\"mask\");\n                    masker1.setAttribute(\"id\", id1);\n                    masker1.setAttribute(\"mask-type\", matteType1 === 3 ? \"luminance\" : \"alpha\");\n                    useElement1 = createNS(\"use\");\n                    useElement1.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", \"#\" + this.layerId);\n                    masker1.appendChild(useElement1);\n                    this.globalData.defs.appendChild(masker1);\n                    if (!featureSupport.maskType && matteType1 === 1) {\n                        masker1.setAttribute(\"mask-type\", \"luminance\");\n                        filId1 = createElementID();\n                        fil1 = filtersFactory.createFilter(filId1);\n                        this.globalData.defs.appendChild(fil1);\n                        fil1.appendChild(filtersFactory.createAlphaToLuminanceFilter());\n                        gg1 = createNS(\"g\");\n                        gg1.appendChild(useElement1);\n                        masker1.appendChild(gg1);\n                        gg1.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + filId1 + \")\");\n                    }\n                } else if (matteType1 === 2) {\n                    var maskGroup1 = createNS(\"mask\");\n                    maskGroup1.setAttribute(\"id\", id1);\n                    maskGroup1.setAttribute(\"mask-type\", \"alpha\");\n                    var maskGrouper1 = createNS(\"g\");\n                    maskGroup1.appendChild(maskGrouper1);\n                    filId1 = createElementID();\n                    fil1 = filtersFactory.createFilter(filId1); /// /\n                    var feCTr1 = createNS(\"feComponentTransfer\");\n                    feCTr1.setAttribute(\"in\", \"SourceGraphic\");\n                    fil1.appendChild(feCTr1);\n                    var feFunc1 = createNS(\"feFuncA\");\n                    feFunc1.setAttribute(\"type\", \"table\");\n                    feFunc1.setAttribute(\"tableValues\", \"1.0 0.0\");\n                    feCTr1.appendChild(feFunc1); /// /\n                    this.globalData.defs.appendChild(fil1);\n                    var alphaRect1 = createNS(\"rect\");\n                    alphaRect1.setAttribute(\"width\", this.comp.data.w);\n                    alphaRect1.setAttribute(\"height\", this.comp.data.h);\n                    alphaRect1.setAttribute(\"x\", \"0\");\n                    alphaRect1.setAttribute(\"y\", \"0\");\n                    alphaRect1.setAttribute(\"fill\", \"#ffffff\");\n                    alphaRect1.setAttribute(\"opacity\", \"0\");\n                    maskGrouper1.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + filId1 + \")\");\n                    maskGrouper1.appendChild(alphaRect1);\n                    useElement1 = createNS(\"use\");\n                    useElement1.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", \"#\" + this.layerId);\n                    maskGrouper1.appendChild(useElement1);\n                    if (!featureSupport.maskType) {\n                        maskGroup1.setAttribute(\"mask-type\", \"luminance\");\n                        fil1.appendChild(filtersFactory.createAlphaToLuminanceFilter());\n                        gg1 = createNS(\"g\");\n                        maskGrouper1.appendChild(alphaRect1);\n                        gg1.appendChild(this.layerElement);\n                        maskGrouper1.appendChild(gg1);\n                    }\n                    this.globalData.defs.appendChild(maskGroup1);\n                }\n                this.matteMasks[matteType1] = id1;\n            }\n            return this.matteMasks[matteType1];\n        },\n        setMatte: function setMatte1(id1) {\n            if (!this.matteElement) {\n                return;\n            }\n            this.matteElement.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + id1 + \")\");\n        }\n    };\n    /**\r\n   * @file\r\n   * Handles AE's layer parenting property.\r\n   *\r\n   */ function HierarchyElement() {}\n    HierarchyElement.prototype = {\n        /**\r\n       * @function\r\n       * Initializes hierarchy properties\r\n       *\r\n       */ initHierarchy: function initHierarchy1() {\n            // element's parent list\n            this.hierarchy = []; // if element is parent of another layer _isParent will be true\n            this._isParent = false;\n            this.checkParenting();\n        },\n        /**\r\n       * @function\r\n       * Sets layer's hierarchy.\r\n       * @param {array} hierarch\r\n       * layer's parent list\r\n       *\r\n       */ setHierarchy: function setHierarchy1(hierarchy1) {\n            this.hierarchy = hierarchy1;\n        },\n        /**\r\n       * @function\r\n       * Sets layer as parent.\r\n       *\r\n       */ setAsParent: function setAsParent1() {\n            this._isParent = true;\n        },\n        /**\r\n       * @function\r\n       * Searches layer's parenting chain\r\n       *\r\n       */ checkParenting: function checkParenting1() {\n            if (this.data.parent !== undefined) {\n                this.comp.buildElementParenting(this, this.data.parent, []);\n            }\n        }\n    };\n    function RenderableDOMElement() {}\n    (function() {\n        var _prototype1 = {\n            initElement: function initElement1(data1, globalData1, comp1) {\n                this.initFrame();\n                this.initBaseData(data1, globalData1, comp1);\n                this.initTransform(data1, globalData1, comp1);\n                this.initHierarchy();\n                this.initRenderable();\n                this.initRendererElement();\n                this.createContainerElements();\n                this.createRenderableComponents();\n                this.createContent();\n                this.hide();\n            },\n            hide: function hide1() {\n                // console.log('HIDE', this);\n                if (!this.hidden && (!this.isInRange || this.isTransparent)) {\n                    var elem3 = this.baseElement || this.layerElement;\n                    elem3.style.display = \"none\";\n                    this.hidden = true;\n                }\n            },\n            show: function show1() {\n                // console.log('SHOW', this);\n                if (this.isInRange && !this.isTransparent) {\n                    if (!this.data.hd) {\n                        var elem3 = this.baseElement || this.layerElement;\n                        elem3.style.display = \"block\";\n                    }\n                    this.hidden = false;\n                    this._isFirstFrame = true;\n                }\n            },\n            renderFrame: function renderFrame1() {\n                // If it is exported as hidden (data.hd === true) no need to render\n                // If it is not visible no need to render\n                if (this.data.hd || this.hidden) {\n                    return;\n                }\n                this.renderTransform();\n                this.renderRenderable();\n                this.renderLocalTransform();\n                this.renderElement();\n                this.renderInnerContent();\n                if (this._isFirstFrame) {\n                    this._isFirstFrame = false;\n                }\n            },\n            renderInnerContent: function renderInnerContent1() {},\n            prepareFrame: function prepareFrame1(num1) {\n                this._mdf = false;\n                this.prepareRenderableFrame(num1);\n                this.prepareProperties(num1, this.isInRange);\n                this.checkTransparency();\n            },\n            destroy: function destroy1() {\n                this.innerElem = null;\n                this.destroyBaseElement();\n            }\n        };\n        extendPrototype([\n            RenderableElement,\n            createProxyFunction(_prototype1)\n        ], RenderableDOMElement);\n    })();\n    function IImageElement(data1, globalData1, comp1) {\n        this.assetData = globalData1.getAssetData(data1.refId);\n        if (this.assetData && this.assetData.sid) {\n            this.assetData = globalData1.slotManager.getProp(this.assetData);\n        }\n        this.initElement(data1, globalData1, comp1);\n        this.sourceRect = {\n            top: 0,\n            left: 0,\n            width: this.assetData.w,\n            height: this.assetData.h\n        };\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        SVGBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableDOMElement\n    ], IImageElement);\n    IImageElement.prototype.createContent = function() {\n        var assetPath1 = this.globalData.getAssetsPath(this.assetData);\n        this.innerElem = createNS(\"image\");\n        this.innerElem.setAttribute(\"width\", this.assetData.w + \"px\");\n        this.innerElem.setAttribute(\"height\", this.assetData.h + \"px\");\n        this.innerElem.setAttribute(\"preserveAspectRatio\", this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);\n        this.innerElem.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", assetPath1);\n        this.layerElement.appendChild(this.innerElem);\n    };\n    IImageElement.prototype.sourceRectAtTime = function() {\n        return this.sourceRect;\n    };\n    function ProcessedElement(element1, position1) {\n        this.elem = element1;\n        this.pos = position1;\n    }\n    function IShapeElement() {}\n    IShapeElement.prototype = {\n        addShapeToModifiers: function addShapeToModifiers1(data1) {\n            var i3;\n            var len1 = this.shapeModifiers.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                this.shapeModifiers[i3].addShape(data1);\n            }\n        },\n        isShapeInAnimatedModifiers: function isShapeInAnimatedModifiers1(data1) {\n            var i3 = 0;\n            var len1 = this.shapeModifiers.length;\n            while(i3 < len1){\n                if (this.shapeModifiers[i3].isAnimatedWithShape(data1)) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        renderModifiers: function renderModifiers1() {\n            if (!this.shapeModifiers.length) {\n                return;\n            }\n            var i3;\n            var len1 = this.shapes.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                this.shapes[i3].sh.reset();\n            }\n            len1 = this.shapeModifiers.length;\n            var shouldBreakProcess1;\n            for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n                shouldBreakProcess1 = this.shapeModifiers[i3].processShapes(this._isFirstFrame); // workaround to fix cases where a repeater resets the shape so the following processes get called twice\n                // TODO: find a better solution for this\n                if (shouldBreakProcess1) {\n                    break;\n                }\n            }\n        },\n        searchProcessedElement: function searchProcessedElement1(elem3) {\n            var elements1 = this.processedElements;\n            var i3 = 0;\n            var len1 = elements1.length;\n            while(i3 < len1){\n                if (elements1[i3].elem === elem3) {\n                    return elements1[i3].pos;\n                }\n                i3 += 1;\n            }\n            return 0;\n        },\n        addProcessedElement: function addProcessedElement1(elem3, pos1) {\n            var elements1 = this.processedElements;\n            var i3 = elements1.length;\n            while(i3){\n                i3 -= 1;\n                if (elements1[i3].elem === elem3) {\n                    elements1[i3].pos = pos1;\n                    return;\n                }\n            }\n            elements1.push(new ProcessedElement(elem3, pos1));\n        },\n        prepareFrame: function prepareFrame1(num1) {\n            this.prepareRenderableFrame(num1);\n            this.prepareProperties(num1, this.isInRange);\n        }\n    };\n    var lineCapEnum = {\n        1: \"butt\",\n        2: \"round\",\n        3: \"square\"\n    };\n    var lineJoinEnum = {\n        1: \"miter\",\n        2: \"round\",\n        3: \"bevel\"\n    };\n    function SVGShapeData(transformers1, level1, shape3) {\n        this.caches = [];\n        this.styles = [];\n        this.transformers = transformers1;\n        this.lStr = \"\";\n        this.sh = shape3;\n        this.lvl = level1; // TODO find if there are some cases where _isAnimated can be false.\n        // For now, since shapes add up with other shapes. They have to be calculated every time.\n        // One way of finding out is checking if all styles associated to this shape depend only of this shape\n        this._isAnimated = !!shape3.k; // TODO: commenting this for now since all shapes are animated\n        var i3 = 0;\n        var len1 = transformers1.length;\n        while(i3 < len1){\n            if (transformers1[i3].mProps.dynamicProperties.length) {\n                this._isAnimated = true;\n                break;\n            }\n            i3 += 1;\n        }\n    }\n    SVGShapeData.prototype.setAsAnimated = function() {\n        this._isAnimated = true;\n    };\n    function SVGStyleData(data1, level1) {\n        this.data = data1;\n        this.type = data1.ty;\n        this.d = \"\";\n        this.lvl = level1;\n        this._mdf = false;\n        this.closed = data1.hd === true;\n        this.pElem = createNS(\"path\");\n        this.msElem = null;\n    }\n    SVGStyleData.prototype.reset = function() {\n        this.d = \"\";\n        this._mdf = false;\n    };\n    function DashProperty(elem3, data1, renderer1, container1) {\n        this.elem = elem3;\n        this.frameId = -1;\n        this.dataProps = createSizedArray(data1.length);\n        this.renderer = renderer1;\n        this.k = false;\n        this.dashStr = \"\";\n        this.dashArray = createTypedArray(\"float32\", data1.length ? data1.length - 1 : 0);\n        this.dashoffset = createTypedArray(\"float32\", 1);\n        this.initDynamicPropertyContainer(container1);\n        var i3;\n        var len1 = data1.length || 0;\n        var prop1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            prop1 = PropertyFactory.getProp(elem3, data1[i3].v, 0, 0, this);\n            this.k = prop1.k || this.k;\n            this.dataProps[i3] = {\n                n: data1[i3].n,\n                p: prop1\n            };\n        }\n        if (!this.k) {\n            this.getValue(true);\n        }\n        this._isAnimated = this.k;\n    }\n    DashProperty.prototype.getValue = function(forceRender1) {\n        if (this.elem.globalData.frameId === this.frameId && !forceRender1) {\n            return;\n        }\n        this.frameId = this.elem.globalData.frameId;\n        this.iterateDynamicProperties();\n        this._mdf = this._mdf || forceRender1;\n        if (this._mdf) {\n            var i3 = 0;\n            var len1 = this.dataProps.length;\n            if (this.renderer === \"svg\") {\n                this.dashStr = \"\";\n            }\n            for(i3 = 0; i3 < len1; i3 += 1){\n                if (this.dataProps[i3].n !== \"o\") {\n                    if (this.renderer === \"svg\") {\n                        this.dashStr += \" \" + this.dataProps[i3].p.v;\n                    } else {\n                        this.dashArray[i3] = this.dataProps[i3].p.v;\n                    }\n                } else {\n                    this.dashoffset[0] = this.dataProps[i3].p.v;\n                }\n            }\n        }\n    };\n    extendPrototype([\n        DynamicPropertyContainer\n    ], DashProperty);\n    function SVGStrokeStyleData(elem3, data1, styleOb1) {\n        this.initDynamicPropertyContainer(elem3);\n        this.getValue = this.iterateDynamicProperties;\n        this.o = PropertyFactory.getProp(elem3, data1.o, 0, 0.01, this);\n        this.w = PropertyFactory.getProp(elem3, data1.w, 0, null, this);\n        this.d = new DashProperty(elem3, data1.d || {}, \"svg\", this);\n        this.c = PropertyFactory.getProp(elem3, data1.c, 1, 255, this);\n        this.style = styleOb1;\n        this._isAnimated = !!this._isAnimated;\n    }\n    extendPrototype([\n        DynamicPropertyContainer\n    ], SVGStrokeStyleData);\n    function SVGFillStyleData(elem3, data1, styleOb1) {\n        this.initDynamicPropertyContainer(elem3);\n        this.getValue = this.iterateDynamicProperties;\n        this.o = PropertyFactory.getProp(elem3, data1.o, 0, 0.01, this);\n        this.c = PropertyFactory.getProp(elem3, data1.c, 1, 255, this);\n        this.style = styleOb1;\n    }\n    extendPrototype([\n        DynamicPropertyContainer\n    ], SVGFillStyleData);\n    function SVGNoStyleData(elem3, data1, styleOb1) {\n        this.initDynamicPropertyContainer(elem3);\n        this.getValue = this.iterateDynamicProperties;\n        this.style = styleOb1;\n    }\n    extendPrototype([\n        DynamicPropertyContainer\n    ], SVGNoStyleData);\n    function GradientProperty(elem3, data1, container1) {\n        this.data = data1;\n        this.c = createTypedArray(\"uint8c\", data1.p * 4);\n        var cLength1 = data1.k.k[0].s ? data1.k.k[0].s.length - data1.p * 4 : data1.k.k.length - data1.p * 4;\n        this.o = createTypedArray(\"float32\", cLength1);\n        this._cmdf = false;\n        this._omdf = false;\n        this._collapsable = this.checkCollapsable();\n        this._hasOpacity = cLength1;\n        this.initDynamicPropertyContainer(container1);\n        this.prop = PropertyFactory.getProp(elem3, data1.k, 1, null, this);\n        this.k = this.prop.k;\n        this.getValue(true);\n    }\n    GradientProperty.prototype.comparePoints = function(values1, points1) {\n        var i3 = 0;\n        var len1 = this.o.length / 2;\n        var diff1;\n        while(i3 < len1){\n            diff1 = Math.abs(values1[i3 * 4] - values1[points1 * 4 + i3 * 2]);\n            if (diff1 > 0.01) {\n                return false;\n            }\n            i3 += 1;\n        }\n        return true;\n    };\n    GradientProperty.prototype.checkCollapsable = function() {\n        if (this.o.length / 2 !== this.c.length / 4) {\n            return false;\n        }\n        if (this.data.k.k[0].s) {\n            var i3 = 0;\n            var len1 = this.data.k.k.length;\n            while(i3 < len1){\n                if (!this.comparePoints(this.data.k.k[i3].s, this.data.p)) {\n                    return false;\n                }\n                i3 += 1;\n            }\n        } else if (!this.comparePoints(this.data.k.k, this.data.p)) {\n            return false;\n        }\n        return true;\n    };\n    GradientProperty.prototype.getValue = function(forceRender1) {\n        this.prop.getValue();\n        this._mdf = false;\n        this._cmdf = false;\n        this._omdf = false;\n        if (this.prop._mdf || forceRender1) {\n            var i3;\n            var len1 = this.data.p * 4;\n            var mult1;\n            var val3;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                mult1 = i3 % 4 === 0 ? 100 : 255;\n                val3 = Math.round(this.prop.v[i3] * mult1);\n                if (this.c[i3] !== val3) {\n                    this.c[i3] = val3;\n                    this._cmdf = !forceRender1;\n                }\n            }\n            if (this.o.length) {\n                len1 = this.prop.v.length;\n                for(i3 = this.data.p * 4; i3 < len1; i3 += 1){\n                    mult1 = i3 % 2 === 0 ? 100 : 1;\n                    val3 = i3 % 2 === 0 ? Math.round(this.prop.v[i3] * 100) : this.prop.v[i3];\n                    if (this.o[i3 - this.data.p * 4] !== val3) {\n                        this.o[i3 - this.data.p * 4] = val3;\n                        this._omdf = !forceRender1;\n                    }\n                }\n            }\n            this._mdf = !forceRender1;\n        }\n    };\n    extendPrototype([\n        DynamicPropertyContainer\n    ], GradientProperty);\n    function SVGGradientFillStyleData(elem3, data1, styleOb1) {\n        this.initDynamicPropertyContainer(elem3);\n        this.getValue = this.iterateDynamicProperties;\n        this.initGradientData(elem3, data1, styleOb1);\n    }\n    SVGGradientFillStyleData.prototype.initGradientData = function(elem3, data1, styleOb1) {\n        this.o = PropertyFactory.getProp(elem3, data1.o, 0, 0.01, this);\n        this.s = PropertyFactory.getProp(elem3, data1.s, 1, null, this);\n        this.e = PropertyFactory.getProp(elem3, data1.e, 1, null, this);\n        this.h = PropertyFactory.getProp(elem3, data1.h || {\n            k: 0\n        }, 0, 0.01, this);\n        this.a = PropertyFactory.getProp(elem3, data1.a || {\n            k: 0\n        }, 0, degToRads, this);\n        this.g = new GradientProperty(elem3, data1.g, this);\n        this.style = styleOb1;\n        this.stops = [];\n        this.setGradientData(styleOb1.pElem, data1);\n        this.setGradientOpacity(data1, styleOb1);\n        this._isAnimated = !!this._isAnimated;\n    };\n    SVGGradientFillStyleData.prototype.setGradientData = function(pathElement1, data1) {\n        var gradientId1 = createElementID();\n        var gfill1 = createNS(data1.t === 1 ? \"linearGradient\" : \"radialGradient\");\n        gfill1.setAttribute(\"id\", gradientId1);\n        gfill1.setAttribute(\"spreadMethod\", \"pad\");\n        gfill1.setAttribute(\"gradientUnits\", \"userSpaceOnUse\");\n        var stops1 = [];\n        var stop1;\n        var j3;\n        var jLen1;\n        jLen1 = data1.g.p * 4;\n        for(j3 = 0; j3 < jLen1; j3 += 4){\n            stop1 = createNS(\"stop\");\n            gfill1.appendChild(stop1);\n            stops1.push(stop1);\n        }\n        pathElement1.setAttribute(data1.ty === \"gf\" ? \"fill\" : \"stroke\", \"url(\" + getLocationHref() + \"#\" + gradientId1 + \")\");\n        this.gf = gfill1;\n        this.cst = stops1;\n    };\n    SVGGradientFillStyleData.prototype.setGradientOpacity = function(data1, styleOb1) {\n        if (this.g._hasOpacity && !this.g._collapsable) {\n            var stop1;\n            var j3;\n            var jLen1;\n            var mask1 = createNS(\"mask\");\n            var maskElement1 = createNS(\"path\");\n            mask1.appendChild(maskElement1);\n            var opacityId1 = createElementID();\n            var maskId1 = createElementID();\n            mask1.setAttribute(\"id\", maskId1);\n            var opFill1 = createNS(data1.t === 1 ? \"linearGradient\" : \"radialGradient\");\n            opFill1.setAttribute(\"id\", opacityId1);\n            opFill1.setAttribute(\"spreadMethod\", \"pad\");\n            opFill1.setAttribute(\"gradientUnits\", \"userSpaceOnUse\");\n            jLen1 = data1.g.k.k[0].s ? data1.g.k.k[0].s.length : data1.g.k.k.length;\n            var stops1 = this.stops;\n            for(j3 = data1.g.p * 4; j3 < jLen1; j3 += 2){\n                stop1 = createNS(\"stop\");\n                stop1.setAttribute(\"stop-color\", \"rgb(255,255,255)\");\n                opFill1.appendChild(stop1);\n                stops1.push(stop1);\n            }\n            maskElement1.setAttribute(data1.ty === \"gf\" ? \"fill\" : \"stroke\", \"url(\" + getLocationHref() + \"#\" + opacityId1 + \")\");\n            if (data1.ty === \"gs\") {\n                maskElement1.setAttribute(\"stroke-linecap\", lineCapEnum[data1.lc || 2]);\n                maskElement1.setAttribute(\"stroke-linejoin\", lineJoinEnum[data1.lj || 2]);\n                if (data1.lj === 1) {\n                    maskElement1.setAttribute(\"stroke-miterlimit\", data1.ml);\n                }\n            }\n            this.of = opFill1;\n            this.ms = mask1;\n            this.ost = stops1;\n            this.maskId = maskId1;\n            styleOb1.msElem = maskElement1;\n        }\n    };\n    extendPrototype([\n        DynamicPropertyContainer\n    ], SVGGradientFillStyleData);\n    function SVGGradientStrokeStyleData(elem3, data1, styleOb1) {\n        this.initDynamicPropertyContainer(elem3);\n        this.getValue = this.iterateDynamicProperties;\n        this.w = PropertyFactory.getProp(elem3, data1.w, 0, null, this);\n        this.d = new DashProperty(elem3, data1.d || {}, \"svg\", this);\n        this.initGradientData(elem3, data1, styleOb1);\n        this._isAnimated = !!this._isAnimated;\n    }\n    extendPrototype([\n        SVGGradientFillStyleData,\n        DynamicPropertyContainer\n    ], SVGGradientStrokeStyleData);\n    function ShapeGroupData() {\n        this.it = [];\n        this.prevViewData = [];\n        this.gr = createNS(\"g\");\n    }\n    function SVGTransformData(mProps1, op1, container1) {\n        this.transform = {\n            mProps: mProps1,\n            op: op1,\n            container: container1\n        };\n        this.elements = [];\n        this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;\n    }\n    var buildShapeString = function buildShapeString1(pathNodes1, length1, closed1, mat1) {\n        if (length1 === 0) {\n            return \"\";\n        }\n        var _o1 = pathNodes1.o;\n        var _i1 = pathNodes1.i;\n        var _v1 = pathNodes1.v;\n        var i3;\n        var shapeString1 = \" M\" + mat1.applyToPointStringified(_v1[0][0], _v1[0][1]);\n        for(i3 = 1; i3 < length1; i3 += 1){\n            shapeString1 += \" C\" + mat1.applyToPointStringified(_o1[i3 - 1][0], _o1[i3 - 1][1]) + \" \" + mat1.applyToPointStringified(_i1[i3][0], _i1[i3][1]) + \" \" + mat1.applyToPointStringified(_v1[i3][0], _v1[i3][1]);\n        }\n        if (closed1 && length1) {\n            shapeString1 += \" C\" + mat1.applyToPointStringified(_o1[i3 - 1][0], _o1[i3 - 1][1]) + \" \" + mat1.applyToPointStringified(_i1[0][0], _i1[0][1]) + \" \" + mat1.applyToPointStringified(_v1[0][0], _v1[0][1]);\n            shapeString1 += \"z\";\n        }\n        return shapeString1;\n    };\n    var SVGElementsRenderer = function() {\n        var _identityMatrix1 = new Matrix();\n        var _matrixHelper1 = new Matrix();\n        var ob1 = {\n            createRenderFunction: createRenderFunction1\n        };\n        function createRenderFunction1(data1) {\n            switch(data1.ty){\n                case \"fl\":\n                    return renderFill1;\n                case \"gf\":\n                    return renderGradient1;\n                case \"gs\":\n                    return renderGradientStroke1;\n                case \"st\":\n                    return renderStroke1;\n                case \"sh\":\n                case \"el\":\n                case \"rc\":\n                case \"sr\":\n                    return renderPath1;\n                case \"tr\":\n                    return renderContentTransform1;\n                case \"no\":\n                    return renderNoop1;\n                default:\n                    return null;\n            }\n        }\n        function renderContentTransform1(styleData1, itemData1, isFirstFrame1) {\n            if (isFirstFrame1 || itemData1.transform.op._mdf) {\n                itemData1.transform.container.setAttribute(\"opacity\", itemData1.transform.op.v);\n            }\n            if (isFirstFrame1 || itemData1.transform.mProps._mdf) {\n                itemData1.transform.container.setAttribute(\"transform\", itemData1.transform.mProps.v.to2dCSS());\n            }\n        }\n        function renderNoop1() {}\n        function renderPath1(styleData1, itemData1, isFirstFrame1) {\n            var j3;\n            var jLen1;\n            var pathStringTransformed1;\n            var redraw1;\n            var pathNodes1;\n            var l3;\n            var lLen1 = itemData1.styles.length;\n            var lvl1 = itemData1.lvl;\n            var paths1;\n            var mat1;\n            var iterations1;\n            var k3;\n            for(l3 = 0; l3 < lLen1; l3 += 1){\n                redraw1 = itemData1.sh._mdf || isFirstFrame1;\n                if (itemData1.styles[l3].lvl < lvl1) {\n                    mat1 = _matrixHelper1.reset();\n                    iterations1 = lvl1 - itemData1.styles[l3].lvl;\n                    k3 = itemData1.transformers.length - 1;\n                    while(!redraw1 && iterations1 > 0){\n                        redraw1 = itemData1.transformers[k3].mProps._mdf || redraw1;\n                        iterations1 -= 1;\n                        k3 -= 1;\n                    }\n                    if (redraw1) {\n                        iterations1 = lvl1 - itemData1.styles[l3].lvl;\n                        k3 = itemData1.transformers.length - 1;\n                        while(iterations1 > 0){\n                            mat1.multiply(itemData1.transformers[k3].mProps.v);\n                            iterations1 -= 1;\n                            k3 -= 1;\n                        }\n                    }\n                } else {\n                    mat1 = _identityMatrix1;\n                }\n                paths1 = itemData1.sh.paths;\n                jLen1 = paths1._length;\n                if (redraw1) {\n                    pathStringTransformed1 = \"\";\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        pathNodes1 = paths1.shapes[j3];\n                        if (pathNodes1 && pathNodes1._length) {\n                            pathStringTransformed1 += buildShapeString(pathNodes1, pathNodes1._length, pathNodes1.c, mat1);\n                        }\n                    }\n                    itemData1.caches[l3] = pathStringTransformed1;\n                } else {\n                    pathStringTransformed1 = itemData1.caches[l3];\n                }\n                itemData1.styles[l3].d += styleData1.hd === true ? \"\" : pathStringTransformed1;\n                itemData1.styles[l3]._mdf = redraw1 || itemData1.styles[l3]._mdf;\n            }\n        }\n        function renderFill1(styleData1, itemData1, isFirstFrame1) {\n            var styleElem1 = itemData1.style;\n            if (itemData1.c._mdf || isFirstFrame1) {\n                styleElem1.pElem.setAttribute(\"fill\", \"rgb(\" + bmFloor(itemData1.c.v[0]) + \",\" + bmFloor(itemData1.c.v[1]) + \",\" + bmFloor(itemData1.c.v[2]) + \")\");\n            }\n            if (itemData1.o._mdf || isFirstFrame1) {\n                styleElem1.pElem.setAttribute(\"fill-opacity\", itemData1.o.v);\n            }\n        }\n        function renderGradientStroke1(styleData1, itemData1, isFirstFrame1) {\n            renderGradient1(styleData1, itemData1, isFirstFrame1);\n            renderStroke1(styleData1, itemData1, isFirstFrame1);\n        }\n        function renderGradient1(styleData1, itemData1, isFirstFrame1) {\n            var gfill1 = itemData1.gf;\n            var hasOpacity1 = itemData1.g._hasOpacity;\n            var pt11 = itemData1.s.v;\n            var pt21 = itemData1.e.v;\n            if (itemData1.o._mdf || isFirstFrame1) {\n                var attr3 = styleData1.ty === \"gf\" ? \"fill-opacity\" : \"stroke-opacity\";\n                itemData1.style.pElem.setAttribute(attr3, itemData1.o.v);\n            }\n            if (itemData1.s._mdf || isFirstFrame1) {\n                var attr11 = styleData1.t === 1 ? \"x1\" : \"cx\";\n                var attr21 = attr11 === \"x1\" ? \"y1\" : \"cy\";\n                gfill1.setAttribute(attr11, pt11[0]);\n                gfill1.setAttribute(attr21, pt11[1]);\n                if (hasOpacity1 && !itemData1.g._collapsable) {\n                    itemData1.of.setAttribute(attr11, pt11[0]);\n                    itemData1.of.setAttribute(attr21, pt11[1]);\n                }\n            }\n            var stops1;\n            var i3;\n            var len1;\n            var stop1;\n            if (itemData1.g._cmdf || isFirstFrame1) {\n                stops1 = itemData1.cst;\n                var cValues1 = itemData1.g.c;\n                len1 = stops1.length;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    stop1 = stops1[i3];\n                    stop1.setAttribute(\"offset\", cValues1[i3 * 4] + \"%\");\n                    stop1.setAttribute(\"stop-color\", \"rgb(\" + cValues1[i3 * 4 + 1] + \",\" + cValues1[i3 * 4 + 2] + \",\" + cValues1[i3 * 4 + 3] + \")\");\n                }\n            }\n            if (hasOpacity1 && (itemData1.g._omdf || isFirstFrame1)) {\n                var oValues1 = itemData1.g.o;\n                if (itemData1.g._collapsable) {\n                    stops1 = itemData1.cst;\n                } else {\n                    stops1 = itemData1.ost;\n                }\n                len1 = stops1.length;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    stop1 = stops1[i3];\n                    if (!itemData1.g._collapsable) {\n                        stop1.setAttribute(\"offset\", oValues1[i3 * 2] + \"%\");\n                    }\n                    stop1.setAttribute(\"stop-opacity\", oValues1[i3 * 2 + 1]);\n                }\n            }\n            if (styleData1.t === 1) {\n                if (itemData1.e._mdf || isFirstFrame1) {\n                    gfill1.setAttribute(\"x2\", pt21[0]);\n                    gfill1.setAttribute(\"y2\", pt21[1]);\n                    if (hasOpacity1 && !itemData1.g._collapsable) {\n                        itemData1.of.setAttribute(\"x2\", pt21[0]);\n                        itemData1.of.setAttribute(\"y2\", pt21[1]);\n                    }\n                }\n            } else {\n                var rad1;\n                if (itemData1.s._mdf || itemData1.e._mdf || isFirstFrame1) {\n                    rad1 = Math.sqrt(Math.pow(pt11[0] - pt21[0], 2) + Math.pow(pt11[1] - pt21[1], 2));\n                    gfill1.setAttribute(\"r\", rad1);\n                    if (hasOpacity1 && !itemData1.g._collapsable) {\n                        itemData1.of.setAttribute(\"r\", rad1);\n                    }\n                }\n                if (itemData1.e._mdf || itemData1.h._mdf || itemData1.a._mdf || isFirstFrame1) {\n                    if (!rad1) {\n                        rad1 = Math.sqrt(Math.pow(pt11[0] - pt21[0], 2) + Math.pow(pt11[1] - pt21[1], 2));\n                    }\n                    var ang1 = Math.atan2(pt21[1] - pt11[1], pt21[0] - pt11[0]);\n                    var percent1 = itemData1.h.v;\n                    if (percent1 >= 1) {\n                        percent1 = 0.99;\n                    } else if (percent1 <= -1) {\n                        percent1 = -0.99;\n                    }\n                    var dist4 = rad1 * percent1;\n                    var x4 = Math.cos(ang1 + itemData1.a.v) * dist4 + pt11[0];\n                    var y4 = Math.sin(ang1 + itemData1.a.v) * dist4 + pt11[1];\n                    gfill1.setAttribute(\"fx\", x4);\n                    gfill1.setAttribute(\"fy\", y4);\n                    if (hasOpacity1 && !itemData1.g._collapsable) {\n                        itemData1.of.setAttribute(\"fx\", x4);\n                        itemData1.of.setAttribute(\"fy\", y4);\n                    }\n                } // gfill.setAttribute('fy','200');\n            }\n        }\n        function renderStroke1(styleData1, itemData1, isFirstFrame1) {\n            var styleElem1 = itemData1.style;\n            var d3 = itemData1.d;\n            if (d3 && (d3._mdf || isFirstFrame1) && d3.dashStr) {\n                styleElem1.pElem.setAttribute(\"stroke-dasharray\", d3.dashStr);\n                styleElem1.pElem.setAttribute(\"stroke-dashoffset\", d3.dashoffset[0]);\n            }\n            if (itemData1.c && (itemData1.c._mdf || isFirstFrame1)) {\n                styleElem1.pElem.setAttribute(\"stroke\", \"rgb(\" + bmFloor(itemData1.c.v[0]) + \",\" + bmFloor(itemData1.c.v[1]) + \",\" + bmFloor(itemData1.c.v[2]) + \")\");\n            }\n            if (itemData1.o._mdf || isFirstFrame1) {\n                styleElem1.pElem.setAttribute(\"stroke-opacity\", itemData1.o.v);\n            }\n            if (itemData1.w._mdf || isFirstFrame1) {\n                styleElem1.pElem.setAttribute(\"stroke-width\", itemData1.w.v);\n                if (styleElem1.msElem) {\n                    styleElem1.msElem.setAttribute(\"stroke-width\", itemData1.w.v);\n                }\n            }\n        }\n        return ob1;\n    }();\n    function SVGShapeElement(data1, globalData1, comp1) {\n        // List of drawable elements\n        this.shapes = []; // Full shape data\n        this.shapesData = data1.shapes; // List of styles that will be applied to shapes\n        this.stylesList = []; // List of modifiers that will be applied to shapes\n        this.shapeModifiers = []; // List of items in shape tree\n        this.itemsData = []; // List of items in previous shape tree\n        this.processedElements = []; // List of animated components\n        this.animatedContents = [];\n        this.initElement(data1, globalData1, comp1); // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.\n        // List of elements that have been created\n        this.prevViewData = []; // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        SVGBaseElement,\n        IShapeElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableDOMElement\n    ], SVGShapeElement);\n    SVGShapeElement.prototype.initSecondaryElement = function() {};\n    SVGShapeElement.prototype.identityMatrix = new Matrix();\n    SVGShapeElement.prototype.buildExpressionInterface = function() {};\n    SVGShapeElement.prototype.createContent = function() {\n        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);\n        this.filterUniqueShapes();\n    };\n    /*\r\n  This method searches for multiple shapes that affect a single element and one of them is animated\r\n  */ SVGShapeElement.prototype.filterUniqueShapes = function() {\n        var i3;\n        var len1 = this.shapes.length;\n        var shape3;\n        var j3;\n        var jLen1 = this.stylesList.length;\n        var style1;\n        var tempShapes1 = [];\n        var areAnimated1 = false;\n        for(j3 = 0; j3 < jLen1; j3 += 1){\n            style1 = this.stylesList[j3];\n            areAnimated1 = false;\n            tempShapes1.length = 0;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                shape3 = this.shapes[i3];\n                if (shape3.styles.indexOf(style1) !== -1) {\n                    tempShapes1.push(shape3);\n                    areAnimated1 = shape3._isAnimated || areAnimated1;\n                }\n            }\n            if (tempShapes1.length > 1 && areAnimated1) {\n                this.setShapesAsAnimated(tempShapes1);\n            }\n        }\n    };\n    SVGShapeElement.prototype.setShapesAsAnimated = function(shapes1) {\n        var i3;\n        var len1 = shapes1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            shapes1[i3].setAsAnimated();\n        }\n    };\n    SVGShapeElement.prototype.createStyleElement = function(data1, level1) {\n        // TODO: prevent drawing of hidden styles\n        var elementData1;\n        var styleOb1 = new SVGStyleData(data1, level1);\n        var pathElement1 = styleOb1.pElem;\n        if (data1.ty === \"st\") {\n            elementData1 = new SVGStrokeStyleData(this, data1, styleOb1);\n        } else if (data1.ty === \"fl\") {\n            elementData1 = new SVGFillStyleData(this, data1, styleOb1);\n        } else if (data1.ty === \"gf\" || data1.ty === \"gs\") {\n            var GradientConstructor1 = data1.ty === \"gf\" ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;\n            elementData1 = new GradientConstructor1(this, data1, styleOb1);\n            this.globalData.defs.appendChild(elementData1.gf);\n            if (elementData1.maskId) {\n                this.globalData.defs.appendChild(elementData1.ms);\n                this.globalData.defs.appendChild(elementData1.of);\n                pathElement1.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + elementData1.maskId + \")\");\n            }\n        } else if (data1.ty === \"no\") {\n            elementData1 = new SVGNoStyleData(this, data1, styleOb1);\n        }\n        if (data1.ty === \"st\" || data1.ty === \"gs\") {\n            pathElement1.setAttribute(\"stroke-linecap\", lineCapEnum[data1.lc || 2]);\n            pathElement1.setAttribute(\"stroke-linejoin\", lineJoinEnum[data1.lj || 2]);\n            pathElement1.setAttribute(\"fill-opacity\", \"0\");\n            if (data1.lj === 1) {\n                pathElement1.setAttribute(\"stroke-miterlimit\", data1.ml);\n            }\n        }\n        if (data1.r === 2) {\n            pathElement1.setAttribute(\"fill-rule\", \"evenodd\");\n        }\n        if (data1.ln) {\n            pathElement1.setAttribute(\"id\", data1.ln);\n        }\n        if (data1.cl) {\n            pathElement1.setAttribute(\"class\", data1.cl);\n        }\n        if (data1.bm) {\n            pathElement1.style[\"mix-blend-mode\"] = getBlendMode(data1.bm);\n        }\n        this.stylesList.push(styleOb1);\n        this.addToAnimatedContents(data1, elementData1);\n        return elementData1;\n    };\n    SVGShapeElement.prototype.createGroupElement = function(data1) {\n        var elementData1 = new ShapeGroupData();\n        if (data1.ln) {\n            elementData1.gr.setAttribute(\"id\", data1.ln);\n        }\n        if (data1.cl) {\n            elementData1.gr.setAttribute(\"class\", data1.cl);\n        }\n        if (data1.bm) {\n            elementData1.gr.style[\"mix-blend-mode\"] = getBlendMode(data1.bm);\n        }\n        return elementData1;\n    };\n    SVGShapeElement.prototype.createTransformElement = function(data1, container1) {\n        var transformProperty1 = TransformPropertyFactory.getTransformProperty(this, data1, this);\n        var elementData1 = new SVGTransformData(transformProperty1, transformProperty1.o, container1);\n        this.addToAnimatedContents(data1, elementData1);\n        return elementData1;\n    };\n    SVGShapeElement.prototype.createShapeElement = function(data1, ownTransformers1, level1) {\n        var ty1 = 4;\n        if (data1.ty === \"rc\") {\n            ty1 = 5;\n        } else if (data1.ty === \"el\") {\n            ty1 = 6;\n        } else if (data1.ty === \"sr\") {\n            ty1 = 7;\n        }\n        var shapeProperty1 = ShapePropertyFactory.getShapeProp(this, data1, ty1, this);\n        var elementData1 = new SVGShapeData(ownTransformers1, level1, shapeProperty1);\n        this.shapes.push(elementData1);\n        this.addShapeToModifiers(elementData1);\n        this.addToAnimatedContents(data1, elementData1);\n        return elementData1;\n    };\n    SVGShapeElement.prototype.addToAnimatedContents = function(data1, element1) {\n        var i3 = 0;\n        var len1 = this.animatedContents.length;\n        while(i3 < len1){\n            if (this.animatedContents[i3].element === element1) {\n                return;\n            }\n            i3 += 1;\n        }\n        this.animatedContents.push({\n            fn: SVGElementsRenderer.createRenderFunction(data1),\n            element: element1,\n            data: data1\n        });\n    };\n    SVGShapeElement.prototype.setElementStyles = function(elementData1) {\n        var arr3 = elementData1.styles;\n        var j3;\n        var jLen1 = this.stylesList.length;\n        for(j3 = 0; j3 < jLen1; j3 += 1){\n            if (!this.stylesList[j3].closed) {\n                arr3.push(this.stylesList[j3]);\n            }\n        }\n    };\n    SVGShapeElement.prototype.reloadShapes = function() {\n        this._isFirstFrame = true;\n        var i3;\n        var len1 = this.itemsData.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            this.prevViewData[i3] = this.itemsData[i3];\n        }\n        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);\n        this.filterUniqueShapes();\n        len1 = this.dynamicProperties.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            this.dynamicProperties[i3].getValue();\n        }\n        this.renderModifiers();\n    };\n    SVGShapeElement.prototype.searchShapes = function(arr3, itemsData1, prevViewData1, container1, level1, transformers1, render1) {\n        var ownTransformers1 = [].concat(transformers1);\n        var i3;\n        var len1 = arr3.length - 1;\n        var j3;\n        var jLen1;\n        var ownStyles1 = [];\n        var ownModifiers1 = [];\n        var currentTransform1;\n        var modifier1;\n        var processedPos1;\n        for(i3 = len1; i3 >= 0; i3 -= 1){\n            processedPos1 = this.searchProcessedElement(arr3[i3]);\n            if (!processedPos1) {\n                arr3[i3]._render = render1;\n            } else {\n                itemsData1[i3] = prevViewData1[processedPos1 - 1];\n            }\n            if (arr3[i3].ty === \"fl\" || arr3[i3].ty === \"st\" || arr3[i3].ty === \"gf\" || arr3[i3].ty === \"gs\" || arr3[i3].ty === \"no\") {\n                if (!processedPos1) {\n                    itemsData1[i3] = this.createStyleElement(arr3[i3], level1);\n                } else {\n                    itemsData1[i3].style.closed = false;\n                }\n                if (arr3[i3]._render) {\n                    if (itemsData1[i3].style.pElem.parentNode !== container1) {\n                        container1.appendChild(itemsData1[i3].style.pElem);\n                    }\n                }\n                ownStyles1.push(itemsData1[i3].style);\n            } else if (arr3[i3].ty === \"gr\") {\n                if (!processedPos1) {\n                    itemsData1[i3] = this.createGroupElement(arr3[i3]);\n                } else {\n                    jLen1 = itemsData1[i3].it.length;\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        itemsData1[i3].prevViewData[j3] = itemsData1[i3].it[j3];\n                    }\n                }\n                this.searchShapes(arr3[i3].it, itemsData1[i3].it, itemsData1[i3].prevViewData, itemsData1[i3].gr, level1 + 1, ownTransformers1, render1);\n                if (arr3[i3]._render) {\n                    if (itemsData1[i3].gr.parentNode !== container1) {\n                        container1.appendChild(itemsData1[i3].gr);\n                    }\n                }\n            } else if (arr3[i3].ty === \"tr\") {\n                if (!processedPos1) {\n                    itemsData1[i3] = this.createTransformElement(arr3[i3], container1);\n                }\n                currentTransform1 = itemsData1[i3].transform;\n                ownTransformers1.push(currentTransform1);\n            } else if (arr3[i3].ty === \"sh\" || arr3[i3].ty === \"rc\" || arr3[i3].ty === \"el\" || arr3[i3].ty === \"sr\") {\n                if (!processedPos1) {\n                    itemsData1[i3] = this.createShapeElement(arr3[i3], ownTransformers1, level1);\n                }\n                this.setElementStyles(itemsData1[i3]);\n            } else if (arr3[i3].ty === \"tm\" || arr3[i3].ty === \"rd\" || arr3[i3].ty === \"ms\" || arr3[i3].ty === \"pb\" || arr3[i3].ty === \"zz\" || arr3[i3].ty === \"op\") {\n                if (!processedPos1) {\n                    modifier1 = ShapeModifiers.getModifier(arr3[i3].ty);\n                    modifier1.init(this, arr3[i3]);\n                    itemsData1[i3] = modifier1;\n                    this.shapeModifiers.push(modifier1);\n                } else {\n                    modifier1 = itemsData1[i3];\n                    modifier1.closed = false;\n                }\n                ownModifiers1.push(modifier1);\n            } else if (arr3[i3].ty === \"rp\") {\n                if (!processedPos1) {\n                    modifier1 = ShapeModifiers.getModifier(arr3[i3].ty);\n                    itemsData1[i3] = modifier1;\n                    modifier1.init(this, arr3, i3, itemsData1);\n                    this.shapeModifiers.push(modifier1);\n                    render1 = false;\n                } else {\n                    modifier1 = itemsData1[i3];\n                    modifier1.closed = true;\n                }\n                ownModifiers1.push(modifier1);\n            }\n            this.addProcessedElement(arr3[i3], i3 + 1);\n        }\n        len1 = ownStyles1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            ownStyles1[i3].closed = true;\n        }\n        len1 = ownModifiers1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            ownModifiers1[i3].closed = true;\n        }\n    };\n    SVGShapeElement.prototype.renderInnerContent = function() {\n        this.renderModifiers();\n        var i3;\n        var len1 = this.stylesList.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            this.stylesList[i3].reset();\n        }\n        this.renderShape();\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.stylesList[i3]._mdf || this._isFirstFrame) {\n                if (this.stylesList[i3].msElem) {\n                    this.stylesList[i3].msElem.setAttribute(\"d\", this.stylesList[i3].d); // Adding M0 0 fixes same mask bug on all browsers\n                    this.stylesList[i3].d = \"M0 0\" + this.stylesList[i3].d;\n                }\n                this.stylesList[i3].pElem.setAttribute(\"d\", this.stylesList[i3].d || \"M0 0\");\n            }\n        }\n    };\n    SVGShapeElement.prototype.renderShape = function() {\n        var i3;\n        var len1 = this.animatedContents.length;\n        var animatedContent1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            animatedContent1 = this.animatedContents[i3];\n            if ((this._isFirstFrame || animatedContent1.element._isAnimated) && animatedContent1.data !== true) {\n                animatedContent1.fn(animatedContent1.data, animatedContent1.element, this._isFirstFrame);\n            }\n        }\n    };\n    SVGShapeElement.prototype.destroy = function() {\n        this.destroyBaseElement();\n        this.shapesData = null;\n        this.itemsData = null;\n    };\n    function LetterProps(o3, sw1, sc1, fc1, m3, p6) {\n        this.o = o3;\n        this.sw = sw1;\n        this.sc = sc1;\n        this.fc = fc1;\n        this.m = m3;\n        this.p = p6;\n        this._mdf = {\n            o: true,\n            sw: !!sw1,\n            sc: !!sc1,\n            fc: !!fc1,\n            m: true,\n            p: true\n        };\n    }\n    LetterProps.prototype.update = function(o3, sw1, sc1, fc1, m3, p6) {\n        this._mdf.o = false;\n        this._mdf.sw = false;\n        this._mdf.sc = false;\n        this._mdf.fc = false;\n        this._mdf.m = false;\n        this._mdf.p = false;\n        var updated1 = false;\n        if (this.o !== o3) {\n            this.o = o3;\n            this._mdf.o = true;\n            updated1 = true;\n        }\n        if (this.sw !== sw1) {\n            this.sw = sw1;\n            this._mdf.sw = true;\n            updated1 = true;\n        }\n        if (this.sc !== sc1) {\n            this.sc = sc1;\n            this._mdf.sc = true;\n            updated1 = true;\n        }\n        if (this.fc !== fc1) {\n            this.fc = fc1;\n            this._mdf.fc = true;\n            updated1 = true;\n        }\n        if (this.m !== m3) {\n            this.m = m3;\n            this._mdf.m = true;\n            updated1 = true;\n        }\n        if (p6.length && (this.p[0] !== p6[0] || this.p[1] !== p6[1] || this.p[4] !== p6[4] || this.p[5] !== p6[5] || this.p[12] !== p6[12] || this.p[13] !== p6[13])) {\n            this.p = p6;\n            this._mdf.p = true;\n            updated1 = true;\n        }\n        return updated1;\n    };\n    function TextProperty(elem3, data1) {\n        this._frameId = initialDefaultFrame;\n        this.pv = \"\";\n        this.v = \"\";\n        this.kf = false;\n        this._isFirstFrame = true;\n        this._mdf = false;\n        if (data1.d && data1.d.sid) {\n            data1.d = elem3.globalData.slotManager.getProp(data1.d);\n        }\n        this.data = data1;\n        this.elem = elem3;\n        this.comp = this.elem.comp;\n        this.keysIndex = 0;\n        this.canResize = false;\n        this.minimumFontSize = 1;\n        this.effectsSequence = [];\n        this.currentData = {\n            ascent: 0,\n            boxWidth: this.defaultBoxWidth,\n            f: \"\",\n            fStyle: \"\",\n            fWeight: \"\",\n            fc: \"\",\n            j: \"\",\n            justifyOffset: \"\",\n            l: [],\n            lh: 0,\n            lineWidths: [],\n            ls: \"\",\n            of: \"\",\n            s: \"\",\n            sc: \"\",\n            sw: 0,\n            t: 0,\n            tr: 0,\n            sz: 0,\n            ps: null,\n            fillColorAnim: false,\n            strokeColorAnim: false,\n            strokeWidthAnim: false,\n            yOffset: 0,\n            finalSize: 0,\n            finalText: [],\n            finalLineHeight: 0,\n            __complete: false\n        };\n        this.copyData(this.currentData, this.data.d.k[0].s);\n        if (!this.searchProperty()) {\n            this.completeTextData(this.currentData);\n        }\n    }\n    TextProperty.prototype.defaultBoxWidth = [\n        0,\n        0\n    ];\n    TextProperty.prototype.copyData = function(obj1, data1) {\n        for(var s4 in data1){\n            if (Object.prototype.hasOwnProperty.call(data1, s4)) {\n                obj1[s4] = data1[s4];\n            }\n        }\n        return obj1;\n    };\n    TextProperty.prototype.setCurrentData = function(data1) {\n        if (!data1.__complete) {\n            this.completeTextData(data1);\n        }\n        this.currentData = data1;\n        this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;\n        this._mdf = true;\n    };\n    TextProperty.prototype.searchProperty = function() {\n        return this.searchKeyframes();\n    };\n    TextProperty.prototype.searchKeyframes = function() {\n        this.kf = this.data.d.k.length > 1;\n        if (this.kf) {\n            this.addEffect(this.getKeyframeValue.bind(this));\n        }\n        return this.kf;\n    };\n    TextProperty.prototype.addEffect = function(effectFunction1) {\n        this.effectsSequence.push(effectFunction1);\n        this.elem.addDynamicProperty(this);\n    };\n    TextProperty.prototype.getValue = function(_finalValue1) {\n        if ((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue1) {\n            return;\n        }\n        this.currentData.t = this.data.d.k[this.keysIndex].s.t;\n        var currentValue1 = this.currentData;\n        var currentIndex1 = this.keysIndex;\n        if (this.lock) {\n            this.setCurrentData(this.currentData);\n            return;\n        }\n        this.lock = true;\n        this._mdf = false;\n        var i3;\n        var len1 = this.effectsSequence.length;\n        var finalValue1 = _finalValue1 || this.data.d.k[this.keysIndex].s;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            // Checking if index changed to prevent creating a new object every time the expression updates.\n            if (currentIndex1 !== this.keysIndex) {\n                finalValue1 = this.effectsSequence[i3](finalValue1, finalValue1.t);\n            } else {\n                finalValue1 = this.effectsSequence[i3](this.currentData, finalValue1.t);\n            }\n        }\n        if (currentValue1 !== finalValue1) {\n            this.setCurrentData(finalValue1);\n        }\n        this.v = this.currentData;\n        this.pv = this.v;\n        this.lock = false;\n        this.frameId = this.elem.globalData.frameId;\n    };\n    TextProperty.prototype.getKeyframeValue = function() {\n        var textKeys1 = this.data.d.k;\n        var frameNum1 = this.elem.comp.renderedFrame;\n        var i3 = 0;\n        var len1 = textKeys1.length;\n        while(i3 <= len1 - 1){\n            if (i3 === len1 - 1 || textKeys1[i3 + 1].t > frameNum1) {\n                break;\n            }\n            i3 += 1;\n        }\n        if (this.keysIndex !== i3) {\n            this.keysIndex = i3;\n        }\n        return this.data.d.k[this.keysIndex].s;\n    };\n    TextProperty.prototype.buildFinalText = function(text1) {\n        var charactersArray1 = [];\n        var i3 = 0;\n        var len1 = text1.length;\n        var charCode1;\n        var secondCharCode1;\n        var shouldCombine1 = false;\n        var shouldCombineNext1 = false;\n        var currentChars1 = \"\";\n        while(i3 < len1){\n            shouldCombine1 = shouldCombineNext1;\n            shouldCombineNext1 = false;\n            charCode1 = text1.charCodeAt(i3);\n            currentChars1 = text1.charAt(i3);\n            if (FontManager.isCombinedCharacter(charCode1)) {\n                shouldCombine1 = true; // It's a potential surrogate pair (this is the High surrogate)\n            } else if (charCode1 >= 0xD800 && charCode1 <= 0xDBFF) {\n                if (FontManager.isRegionalFlag(text1, i3)) {\n                    currentChars1 = text1.substr(i3, 14);\n                } else {\n                    secondCharCode1 = text1.charCodeAt(i3 + 1); // It's a surrogate pair (this is the Low surrogate)\n                    if (secondCharCode1 >= 0xDC00 && secondCharCode1 <= 0xDFFF) {\n                        if (FontManager.isModifier(charCode1, secondCharCode1)) {\n                            currentChars1 = text1.substr(i3, 2);\n                            shouldCombine1 = true;\n                        } else if (FontManager.isFlagEmoji(text1.substr(i3, 4))) {\n                            currentChars1 = text1.substr(i3, 4);\n                        } else {\n                            currentChars1 = text1.substr(i3, 2);\n                        }\n                    }\n                }\n            } else if (charCode1 > 0xDBFF) {\n                secondCharCode1 = text1.charCodeAt(i3 + 1);\n                if (FontManager.isVariationSelector(charCode1)) {\n                    shouldCombine1 = true;\n                }\n            } else if (FontManager.isZeroWidthJoiner(charCode1)) {\n                shouldCombine1 = true;\n                shouldCombineNext1 = true;\n            }\n            if (shouldCombine1) {\n                charactersArray1[charactersArray1.length - 1] += currentChars1;\n                shouldCombine1 = false;\n            } else {\n                charactersArray1.push(currentChars1);\n            }\n            i3 += currentChars1.length;\n        }\n        return charactersArray1;\n    };\n    TextProperty.prototype.completeTextData = function(documentData1) {\n        documentData1.__complete = true;\n        var fontManager1 = this.elem.globalData.fontManager;\n        var data1 = this.data;\n        var letters1 = [];\n        var i3;\n        var len1;\n        var newLineFlag1;\n        var index1 = 0;\n        var val3;\n        var anchorGrouping1 = data1.m.g;\n        var currentSize1 = 0;\n        var currentPos1 = 0;\n        var currentLine1 = 0;\n        var lineWidths1 = [];\n        var lineWidth1 = 0;\n        var maxLineWidth1 = 0;\n        var j3;\n        var jLen1;\n        var fontData1 = fontManager1.getFontByName(documentData1.f);\n        var charData1;\n        var cLength1 = 0;\n        var fontProps1 = getFontProperties(fontData1);\n        documentData1.fWeight = fontProps1.weight;\n        documentData1.fStyle = fontProps1.style;\n        documentData1.finalSize = documentData1.s;\n        documentData1.finalText = this.buildFinalText(documentData1.t);\n        len1 = documentData1.finalText.length;\n        documentData1.finalLineHeight = documentData1.lh;\n        var trackingOffset1 = documentData1.tr / 1000 * documentData1.finalSize;\n        var charCode1;\n        if (documentData1.sz) {\n            var flag1 = true;\n            var boxWidth1 = documentData1.sz[0];\n            var boxHeight1 = documentData1.sz[1];\n            var currentHeight1;\n            var finalText1;\n            while(flag1){\n                finalText1 = this.buildFinalText(documentData1.t);\n                currentHeight1 = 0;\n                lineWidth1 = 0;\n                len1 = finalText1.length;\n                trackingOffset1 = documentData1.tr / 1000 * documentData1.finalSize;\n                var lastSpaceIndex1 = -1;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    charCode1 = finalText1[i3].charCodeAt(0);\n                    newLineFlag1 = false;\n                    if (finalText1[i3] === \" \") {\n                        lastSpaceIndex1 = i3;\n                    } else if (charCode1 === 13 || charCode1 === 3) {\n                        lineWidth1 = 0;\n                        newLineFlag1 = true;\n                        currentHeight1 += documentData1.finalLineHeight || documentData1.finalSize * 1.2;\n                    }\n                    if (fontManager1.chars) {\n                        charData1 = fontManager1.getCharData(finalText1[i3], fontData1.fStyle, fontData1.fFamily);\n                        cLength1 = newLineFlag1 ? 0 : charData1.w * documentData1.finalSize / 100;\n                    } else {\n                        // tCanvasHelper.font = documentData.s + 'px '+ fontData.fFamily;\n                        cLength1 = fontManager1.measureText(finalText1[i3], documentData1.f, documentData1.finalSize);\n                    }\n                    if (lineWidth1 + cLength1 > boxWidth1 && finalText1[i3] !== \" \") {\n                        if (lastSpaceIndex1 === -1) {\n                            len1 += 1;\n                        } else {\n                            i3 = lastSpaceIndex1;\n                        }\n                        currentHeight1 += documentData1.finalLineHeight || documentData1.finalSize * 1.2;\n                        finalText1.splice(i3, lastSpaceIndex1 === i3 ? 1 : 0, \"\\r\"); // finalText = finalText.substr(0,i) + \"\\r\" + finalText.substr(i === lastSpaceIndex ? i + 1 : i);\n                        lastSpaceIndex1 = -1;\n                        lineWidth1 = 0;\n                    } else {\n                        lineWidth1 += cLength1;\n                        lineWidth1 += trackingOffset1;\n                    }\n                }\n                currentHeight1 += fontData1.ascent * documentData1.finalSize / 100;\n                if (this.canResize && documentData1.finalSize > this.minimumFontSize && boxHeight1 < currentHeight1) {\n                    documentData1.finalSize -= 1;\n                    documentData1.finalLineHeight = documentData1.finalSize * documentData1.lh / documentData1.s;\n                } else {\n                    documentData1.finalText = finalText1;\n                    len1 = documentData1.finalText.length;\n                    flag1 = false;\n                }\n            }\n        }\n        lineWidth1 = -trackingOffset1;\n        cLength1 = 0;\n        var uncollapsedSpaces1 = 0;\n        var currentChar1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            newLineFlag1 = false;\n            currentChar1 = documentData1.finalText[i3];\n            charCode1 = currentChar1.charCodeAt(0);\n            if (charCode1 === 13 || charCode1 === 3) {\n                uncollapsedSpaces1 = 0;\n                lineWidths1.push(lineWidth1);\n                maxLineWidth1 = lineWidth1 > maxLineWidth1 ? lineWidth1 : maxLineWidth1;\n                lineWidth1 = -2 * trackingOffset1;\n                val3 = \"\";\n                newLineFlag1 = true;\n                currentLine1 += 1;\n            } else {\n                val3 = currentChar1;\n            }\n            if (fontManager1.chars) {\n                charData1 = fontManager1.getCharData(currentChar1, fontData1.fStyle, fontManager1.getFontByName(documentData1.f).fFamily);\n                cLength1 = newLineFlag1 ? 0 : charData1.w * documentData1.finalSize / 100;\n            } else {\n                // var charWidth = fontManager.measureText(val, documentData.f, documentData.finalSize);\n                // tCanvasHelper.font = documentData.finalSize + 'px '+ fontManager.getFontByName(documentData.f).fFamily;\n                cLength1 = fontManager1.measureText(val3, documentData1.f, documentData1.finalSize);\n            } //\n            if (currentChar1 === \" \") {\n                uncollapsedSpaces1 += cLength1 + trackingOffset1;\n            } else {\n                lineWidth1 += cLength1 + trackingOffset1 + uncollapsedSpaces1;\n                uncollapsedSpaces1 = 0;\n            }\n            letters1.push({\n                l: cLength1,\n                an: cLength1,\n                add: currentSize1,\n                n: newLineFlag1,\n                anIndexes: [],\n                val: val3,\n                line: currentLine1,\n                animatorJustifyOffset: 0\n            });\n            if (anchorGrouping1 == 2) {\n                // eslint-disable-line eqeqeq\n                currentSize1 += cLength1;\n                if (val3 === \"\" || val3 === \" \" || i3 === len1 - 1) {\n                    if (val3 === \"\" || val3 === \" \") {\n                        currentSize1 -= cLength1;\n                    }\n                    while(currentPos1 <= i3){\n                        letters1[currentPos1].an = currentSize1;\n                        letters1[currentPos1].ind = index1;\n                        letters1[currentPos1].extra = cLength1;\n                        currentPos1 += 1;\n                    }\n                    index1 += 1;\n                    currentSize1 = 0;\n                }\n            } else if (anchorGrouping1 == 3) {\n                // eslint-disable-line eqeqeq\n                currentSize1 += cLength1;\n                if (val3 === \"\" || i3 === len1 - 1) {\n                    if (val3 === \"\") {\n                        currentSize1 -= cLength1;\n                    }\n                    while(currentPos1 <= i3){\n                        letters1[currentPos1].an = currentSize1;\n                        letters1[currentPos1].ind = index1;\n                        letters1[currentPos1].extra = cLength1;\n                        currentPos1 += 1;\n                    }\n                    currentSize1 = 0;\n                    index1 += 1;\n                }\n            } else {\n                letters1[index1].ind = index1;\n                letters1[index1].extra = 0;\n                index1 += 1;\n            }\n        }\n        documentData1.l = letters1;\n        maxLineWidth1 = lineWidth1 > maxLineWidth1 ? lineWidth1 : maxLineWidth1;\n        lineWidths1.push(lineWidth1);\n        if (documentData1.sz) {\n            documentData1.boxWidth = documentData1.sz[0];\n            documentData1.justifyOffset = 0;\n        } else {\n            documentData1.boxWidth = maxLineWidth1;\n            switch(documentData1.j){\n                case 1:\n                    documentData1.justifyOffset = -documentData1.boxWidth;\n                    break;\n                case 2:\n                    documentData1.justifyOffset = -documentData1.boxWidth / 2;\n                    break;\n                default:\n                    documentData1.justifyOffset = 0;\n            }\n        }\n        documentData1.lineWidths = lineWidths1;\n        var animators1 = data1.a;\n        var animatorData1;\n        var letterData1;\n        jLen1 = animators1.length;\n        var based1;\n        var ind1;\n        var indexes1 = [];\n        for(j3 = 0; j3 < jLen1; j3 += 1){\n            animatorData1 = animators1[j3];\n            if (animatorData1.a.sc) {\n                documentData1.strokeColorAnim = true;\n            }\n            if (animatorData1.a.sw) {\n                documentData1.strokeWidthAnim = true;\n            }\n            if (animatorData1.a.fc || animatorData1.a.fh || animatorData1.a.fs || animatorData1.a.fb) {\n                documentData1.fillColorAnim = true;\n            }\n            ind1 = 0;\n            based1 = animatorData1.s.b;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                letterData1 = letters1[i3];\n                letterData1.anIndexes[j3] = ind1;\n                if (based1 == 1 && letterData1.val !== \"\" || based1 == 2 && letterData1.val !== \"\" && letterData1.val !== \" \" || based1 == 3 && (letterData1.n || letterData1.val == \" \" || i3 == len1 - 1) || based1 == 4 && (letterData1.n || i3 == len1 - 1)) {\n                    // eslint-disable-line eqeqeq\n                    if (animatorData1.s.rn === 1) {\n                        indexes1.push(ind1);\n                    }\n                    ind1 += 1;\n                }\n            }\n            data1.a[j3].s.totalChars = ind1;\n            var currentInd1 = -1;\n            var newInd1;\n            if (animatorData1.s.rn === 1) {\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    letterData1 = letters1[i3];\n                    if (currentInd1 != letterData1.anIndexes[j3]) {\n                        // eslint-disable-line eqeqeq\n                        currentInd1 = letterData1.anIndexes[j3];\n                        newInd1 = indexes1.splice(Math.floor(Math.random() * indexes1.length), 1)[0];\n                    }\n                    letterData1.anIndexes[j3] = newInd1;\n                }\n            }\n        }\n        documentData1.yOffset = documentData1.finalLineHeight || documentData1.finalSize * 1.2;\n        documentData1.ls = documentData1.ls || 0;\n        documentData1.ascent = fontData1.ascent * documentData1.finalSize / 100;\n    };\n    TextProperty.prototype.updateDocumentData = function(newData1, index1) {\n        index1 = index1 === undefined ? this.keysIndex : index1;\n        var dData1 = this.copyData({}, this.data.d.k[index1].s);\n        dData1 = this.copyData(dData1, newData1);\n        this.data.d.k[index1].s = dData1;\n        this.recalculate(index1);\n        this.setCurrentData(dData1);\n        this.elem.addDynamicProperty(this);\n    };\n    TextProperty.prototype.recalculate = function(index1) {\n        var dData1 = this.data.d.k[index1].s;\n        dData1.__complete = false;\n        this.keysIndex = 0;\n        this._isFirstFrame = true;\n        this.getValue(dData1);\n    };\n    TextProperty.prototype.canResizeFont = function(_canResize1) {\n        this.canResize = _canResize1;\n        this.recalculate(this.keysIndex);\n        this.elem.addDynamicProperty(this);\n    };\n    TextProperty.prototype.setMinimumFontSize = function(_fontValue1) {\n        this.minimumFontSize = Math.floor(_fontValue1) || 1;\n        this.recalculate(this.keysIndex);\n        this.elem.addDynamicProperty(this);\n    };\n    var TextSelectorProp = function() {\n        var max1 = Math.max;\n        var min1 = Math.min;\n        var floor1 = Math.floor;\n        function TextSelectorPropFactory1(elem3, data1) {\n            this._currentTextLength = -1;\n            this.k = false;\n            this.data = data1;\n            this.elem = elem3;\n            this.comp = elem3.comp;\n            this.finalS = 0;\n            this.finalE = 0;\n            this.initDynamicPropertyContainer(elem3);\n            this.s = PropertyFactory.getProp(elem3, data1.s || {\n                k: 0\n            }, 0, 0, this);\n            if (\"e\" in data1) {\n                this.e = PropertyFactory.getProp(elem3, data1.e, 0, 0, this);\n            } else {\n                this.e = {\n                    v: 100\n                };\n            }\n            this.o = PropertyFactory.getProp(elem3, data1.o || {\n                k: 0\n            }, 0, 0, this);\n            this.xe = PropertyFactory.getProp(elem3, data1.xe || {\n                k: 0\n            }, 0, 0, this);\n            this.ne = PropertyFactory.getProp(elem3, data1.ne || {\n                k: 0\n            }, 0, 0, this);\n            this.sm = PropertyFactory.getProp(elem3, data1.sm || {\n                k: 100\n            }, 0, 0, this);\n            this.a = PropertyFactory.getProp(elem3, data1.a, 0, 0.01, this);\n            if (!this.dynamicProperties.length) {\n                this.getValue();\n            }\n        }\n        TextSelectorPropFactory1.prototype = {\n            getMult: function getMult1(ind1) {\n                if (this._currentTextLength !== this.elem.textProperty.currentData.l.length) {\n                    this.getValue();\n                }\n                var x11 = 0;\n                var y11 = 0;\n                var x21 = 1;\n                var y21 = 1;\n                if (this.ne.v > 0) {\n                    x11 = this.ne.v / 100.0;\n                } else {\n                    y11 = -this.ne.v / 100.0;\n                }\n                if (this.xe.v > 0) {\n                    x21 = 1.0 - this.xe.v / 100.0;\n                } else {\n                    y21 = 1.0 + this.xe.v / 100.0;\n                }\n                var easer1 = BezierFactory.getBezierEasing(x11, y11, x21, y21).get;\n                var mult1 = 0;\n                var s4 = this.finalS;\n                var e3 = this.finalE;\n                var type1 = this.data.sh;\n                if (type1 === 2) {\n                    if (e3 === s4) {\n                        mult1 = ind1 >= e3 ? 1 : 0;\n                    } else {\n                        mult1 = max1(0, min1(0.5 / (e3 - s4) + (ind1 - s4) / (e3 - s4), 1));\n                    }\n                    mult1 = easer1(mult1);\n                } else if (type1 === 3) {\n                    if (e3 === s4) {\n                        mult1 = ind1 >= e3 ? 0 : 1;\n                    } else {\n                        mult1 = 1 - max1(0, min1(0.5 / (e3 - s4) + (ind1 - s4) / (e3 - s4), 1));\n                    }\n                    mult1 = easer1(mult1);\n                } else if (type1 === 4) {\n                    if (e3 === s4) {\n                        mult1 = 0;\n                    } else {\n                        mult1 = max1(0, min1(0.5 / (e3 - s4) + (ind1 - s4) / (e3 - s4), 1));\n                        if (mult1 < 0.5) {\n                            mult1 *= 2;\n                        } else {\n                            mult1 = 1 - 2 * (mult1 - 0.5);\n                        }\n                    }\n                    mult1 = easer1(mult1);\n                } else if (type1 === 5) {\n                    if (e3 === s4) {\n                        mult1 = 0;\n                    } else {\n                        var tot1 = e3 - s4;\n                        /* ind += 0.5;\r\n                      mult = -4/(tot*tot)*(ind*ind)+(4/tot)*ind; */ ind1 = min1(max1(0, ind1 + 0.5 - s4), e3 - s4);\n                        var x4 = -tot1 / 2 + ind1;\n                        var a3 = tot1 / 2;\n                        mult1 = Math.sqrt(1 - x4 * x4 / (a3 * a3));\n                    }\n                    mult1 = easer1(mult1);\n                } else if (type1 === 6) {\n                    if (e3 === s4) {\n                        mult1 = 0;\n                    } else {\n                        ind1 = min1(max1(0, ind1 + 0.5 - s4), e3 - s4);\n                        mult1 = (1 + Math.cos(Math.PI + Math.PI * 2 * ind1 / (e3 - s4))) / 2; // eslint-disable-line\n                    }\n                    mult1 = easer1(mult1);\n                } else {\n                    if (ind1 >= floor1(s4)) {\n                        if (ind1 - s4 < 0) {\n                            mult1 = max1(0, min1(min1(e3, 1) - (s4 - ind1), 1));\n                        } else {\n                            mult1 = max1(0, min1(e3 - ind1, 1));\n                        }\n                    }\n                    mult1 = easer1(mult1);\n                } // Smoothness implementation.\n                // The smoothness represents a reduced range of the original [0; 1] range.\n                // if smoothness is 25%, the new range will be [0.375; 0.625]\n                // Steps are:\n                // - find the lower value of the new range (threshold)\n                // - if multiplier is smaller than that value, floor it to 0\n                // - if it is larger,\n                //     - subtract the threshold\n                //     - divide it by the smoothness (this will return the range to [0; 1])\n                // Note: If it doesn't work on some scenarios, consider applying it before the easer.\n                if (this.sm.v !== 100) {\n                    var smoothness1 = this.sm.v * 0.01;\n                    if (smoothness1 === 0) {\n                        smoothness1 = 0.00000001;\n                    }\n                    var threshold1 = 0.5 - smoothness1 * 0.5;\n                    if (mult1 < threshold1) {\n                        mult1 = 0;\n                    } else {\n                        mult1 = (mult1 - threshold1) / smoothness1;\n                        if (mult1 > 1) {\n                            mult1 = 1;\n                        }\n                    }\n                }\n                return mult1 * this.a.v;\n            },\n            getValue: function getValue1(newCharsFlag1) {\n                this.iterateDynamicProperties();\n                this._mdf = newCharsFlag1 || this._mdf;\n                this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;\n                if (newCharsFlag1 && this.data.r === 2) {\n                    this.e.v = this._currentTextLength;\n                }\n                var divisor1 = this.data.r === 2 ? 1 : 100 / this.data.totalChars;\n                var o3 = this.o.v / divisor1;\n                var s4 = this.s.v / divisor1 + o3;\n                var e3 = this.e.v / divisor1 + o3;\n                if (s4 > e3) {\n                    var _s1 = s4;\n                    s4 = e3;\n                    e3 = _s1;\n                }\n                this.finalS = s4;\n                this.finalE = e3;\n            }\n        };\n        extendPrototype([\n            DynamicPropertyContainer\n        ], TextSelectorPropFactory1);\n        function getTextSelectorProp1(elem3, data1, arr3) {\n            return new TextSelectorPropFactory1(elem3, data1, arr3);\n        }\n        return {\n            getTextSelectorProp: getTextSelectorProp1\n        };\n    }();\n    function TextAnimatorDataProperty(elem3, animatorProps1, container1) {\n        var defaultData1 = {\n            propType: false\n        };\n        var getProp1 = PropertyFactory.getProp;\n        var textAnimatorAnimatables1 = animatorProps1.a;\n        this.a = {\n            r: textAnimatorAnimatables1.r ? getProp1(elem3, textAnimatorAnimatables1.r, 0, degToRads, container1) : defaultData1,\n            rx: textAnimatorAnimatables1.rx ? getProp1(elem3, textAnimatorAnimatables1.rx, 0, degToRads, container1) : defaultData1,\n            ry: textAnimatorAnimatables1.ry ? getProp1(elem3, textAnimatorAnimatables1.ry, 0, degToRads, container1) : defaultData1,\n            sk: textAnimatorAnimatables1.sk ? getProp1(elem3, textAnimatorAnimatables1.sk, 0, degToRads, container1) : defaultData1,\n            sa: textAnimatorAnimatables1.sa ? getProp1(elem3, textAnimatorAnimatables1.sa, 0, degToRads, container1) : defaultData1,\n            s: textAnimatorAnimatables1.s ? getProp1(elem3, textAnimatorAnimatables1.s, 1, 0.01, container1) : defaultData1,\n            a: textAnimatorAnimatables1.a ? getProp1(elem3, textAnimatorAnimatables1.a, 1, 0, container1) : defaultData1,\n            o: textAnimatorAnimatables1.o ? getProp1(elem3, textAnimatorAnimatables1.o, 0, 0.01, container1) : defaultData1,\n            p: textAnimatorAnimatables1.p ? getProp1(elem3, textAnimatorAnimatables1.p, 1, 0, container1) : defaultData1,\n            sw: textAnimatorAnimatables1.sw ? getProp1(elem3, textAnimatorAnimatables1.sw, 0, 0, container1) : defaultData1,\n            sc: textAnimatorAnimatables1.sc ? getProp1(elem3, textAnimatorAnimatables1.sc, 1, 0, container1) : defaultData1,\n            fc: textAnimatorAnimatables1.fc ? getProp1(elem3, textAnimatorAnimatables1.fc, 1, 0, container1) : defaultData1,\n            fh: textAnimatorAnimatables1.fh ? getProp1(elem3, textAnimatorAnimatables1.fh, 0, 0, container1) : defaultData1,\n            fs: textAnimatorAnimatables1.fs ? getProp1(elem3, textAnimatorAnimatables1.fs, 0, 0.01, container1) : defaultData1,\n            fb: textAnimatorAnimatables1.fb ? getProp1(elem3, textAnimatorAnimatables1.fb, 0, 0.01, container1) : defaultData1,\n            t: textAnimatorAnimatables1.t ? getProp1(elem3, textAnimatorAnimatables1.t, 0, 0, container1) : defaultData1\n        };\n        this.s = TextSelectorProp.getTextSelectorProp(elem3, animatorProps1.s, container1);\n        this.s.t = animatorProps1.s.t;\n    }\n    function TextAnimatorProperty(textData1, renderType1, elem3) {\n        this._isFirstFrame = true;\n        this._hasMaskedPath = false;\n        this._frameId = -1;\n        this._textData = textData1;\n        this._renderType = renderType1;\n        this._elem = elem3;\n        this._animatorsData = createSizedArray(this._textData.a.length);\n        this._pathData = {};\n        this._moreOptions = {\n            alignment: {}\n        };\n        this.renderedLetters = [];\n        this.lettersChangedFlag = false;\n        this.initDynamicPropertyContainer(elem3);\n    }\n    TextAnimatorProperty.prototype.searchProperties = function() {\n        var i3;\n        var len1 = this._textData.a.length;\n        var animatorProps1;\n        var getProp1 = PropertyFactory.getProp;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            animatorProps1 = this._textData.a[i3];\n            this._animatorsData[i3] = new TextAnimatorDataProperty(this._elem, animatorProps1, this);\n        }\n        if (this._textData.p && \"m\" in this._textData.p) {\n            this._pathData = {\n                a: getProp1(this._elem, this._textData.p.a, 0, 0, this),\n                f: getProp1(this._elem, this._textData.p.f, 0, 0, this),\n                l: getProp1(this._elem, this._textData.p.l, 0, 0, this),\n                r: getProp1(this._elem, this._textData.p.r, 0, 0, this),\n                p: getProp1(this._elem, this._textData.p.p, 0, 0, this),\n                m: this._elem.maskManager.getMaskProperty(this._textData.p.m)\n            };\n            this._hasMaskedPath = true;\n        } else {\n            this._hasMaskedPath = false;\n        }\n        this._moreOptions.alignment = getProp1(this._elem, this._textData.m.a, 1, 0, this);\n    };\n    TextAnimatorProperty.prototype.getMeasures = function(documentData1, lettersChangedFlag1) {\n        this.lettersChangedFlag = lettersChangedFlag1;\n        if (!this._mdf && !this._isFirstFrame && !lettersChangedFlag1 && (!this._hasMaskedPath || !this._pathData.m._mdf)) {\n            return;\n        }\n        this._isFirstFrame = false;\n        var alignment1 = this._moreOptions.alignment.v;\n        var animators1 = this._animatorsData;\n        var textData1 = this._textData;\n        var matrixHelper1 = this.mHelper;\n        var renderType1 = this._renderType;\n        var renderedLettersCount1 = this.renderedLetters.length;\n        var xPos1;\n        var yPos1;\n        var i3;\n        var len1;\n        var letters1 = documentData1.l;\n        var pathInfo1;\n        var currentLength1;\n        var currentPoint1;\n        var segmentLength1;\n        var flag1;\n        var pointInd1;\n        var segmentInd1;\n        var prevPoint1;\n        var points1;\n        var segments1;\n        var partialLength1;\n        var totalLength1;\n        var perc1;\n        var tanAngle1;\n        var mask1;\n        if (this._hasMaskedPath) {\n            mask1 = this._pathData.m;\n            if (!this._pathData.n || this._pathData._mdf) {\n                var paths1 = mask1.v;\n                if (this._pathData.r.v) {\n                    paths1 = paths1.reverse();\n                } // TODO: release bezier data cached from previous pathInfo: this._pathData.pi\n                pathInfo1 = {\n                    tLength: 0,\n                    segments: []\n                };\n                len1 = paths1._length - 1;\n                var bezierData1;\n                totalLength1 = 0;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    bezierData1 = bez.buildBezierData(paths1.v[i3], paths1.v[i3 + 1], [\n                        paths1.o[i3][0] - paths1.v[i3][0],\n                        paths1.o[i3][1] - paths1.v[i3][1]\n                    ], [\n                        paths1.i[i3 + 1][0] - paths1.v[i3 + 1][0],\n                        paths1.i[i3 + 1][1] - paths1.v[i3 + 1][1]\n                    ]);\n                    pathInfo1.tLength += bezierData1.segmentLength;\n                    pathInfo1.segments.push(bezierData1);\n                    totalLength1 += bezierData1.segmentLength;\n                }\n                i3 = len1;\n                if (mask1.v.c) {\n                    bezierData1 = bez.buildBezierData(paths1.v[i3], paths1.v[0], [\n                        paths1.o[i3][0] - paths1.v[i3][0],\n                        paths1.o[i3][1] - paths1.v[i3][1]\n                    ], [\n                        paths1.i[0][0] - paths1.v[0][0],\n                        paths1.i[0][1] - paths1.v[0][1]\n                    ]);\n                    pathInfo1.tLength += bezierData1.segmentLength;\n                    pathInfo1.segments.push(bezierData1);\n                    totalLength1 += bezierData1.segmentLength;\n                }\n                this._pathData.pi = pathInfo1;\n            }\n            pathInfo1 = this._pathData.pi;\n            currentLength1 = this._pathData.f.v;\n            segmentInd1 = 0;\n            pointInd1 = 1;\n            segmentLength1 = 0;\n            flag1 = true;\n            segments1 = pathInfo1.segments;\n            if (currentLength1 < 0 && mask1.v.c) {\n                if (pathInfo1.tLength < Math.abs(currentLength1)) {\n                    currentLength1 = -Math.abs(currentLength1) % pathInfo1.tLength;\n                }\n                segmentInd1 = segments1.length - 1;\n                points1 = segments1[segmentInd1].points;\n                pointInd1 = points1.length - 1;\n                while(currentLength1 < 0){\n                    currentLength1 += points1[pointInd1].partialLength;\n                    pointInd1 -= 1;\n                    if (pointInd1 < 0) {\n                        segmentInd1 -= 1;\n                        points1 = segments1[segmentInd1].points;\n                        pointInd1 = points1.length - 1;\n                    }\n                }\n            }\n            points1 = segments1[segmentInd1].points;\n            prevPoint1 = points1[pointInd1 - 1];\n            currentPoint1 = points1[pointInd1];\n            partialLength1 = currentPoint1.partialLength;\n        }\n        len1 = letters1.length;\n        xPos1 = 0;\n        yPos1 = 0;\n        var yOff1 = documentData1.finalSize * 1.2 * 0.714;\n        var firstLine1 = true;\n        var animatorProps1;\n        var animatorSelector1;\n        var j3;\n        var jLen1;\n        var letterValue1;\n        jLen1 = animators1.length;\n        var mult1;\n        var ind1 = -1;\n        var offf1;\n        var xPathPos1;\n        var yPathPos1;\n        var initPathPos1 = currentLength1;\n        var initSegmentInd1 = segmentInd1;\n        var initPointInd1 = pointInd1;\n        var currentLine1 = -1;\n        var elemOpacity1;\n        var sc1;\n        var sw1;\n        var fc1;\n        var k3;\n        var letterSw1;\n        var letterSc1;\n        var letterFc1;\n        var letterM1 = \"\";\n        var letterP1 = this.defaultPropsArray;\n        var letterO1; //\n        if (documentData1.j === 2 || documentData1.j === 1) {\n            var animatorJustifyOffset1 = 0;\n            var animatorFirstCharOffset1 = 0;\n            var justifyOffsetMult1 = documentData1.j === 2 ? -0.5 : -1;\n            var lastIndex1 = 0;\n            var isNewLine1 = true;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                if (letters1[i3].n) {\n                    if (animatorJustifyOffset1) {\n                        animatorJustifyOffset1 += animatorFirstCharOffset1;\n                    }\n                    while(lastIndex1 < i3){\n                        letters1[lastIndex1].animatorJustifyOffset = animatorJustifyOffset1;\n                        lastIndex1 += 1;\n                    }\n                    animatorJustifyOffset1 = 0;\n                    isNewLine1 = true;\n                } else {\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        animatorProps1 = animators1[j3].a;\n                        if (animatorProps1.t.propType) {\n                            if (isNewLine1 && documentData1.j === 2) {\n                                animatorFirstCharOffset1 += animatorProps1.t.v * justifyOffsetMult1;\n                            }\n                            animatorSelector1 = animators1[j3].s;\n                            mult1 = animatorSelector1.getMult(letters1[i3].anIndexes[j3], textData1.a[j3].s.totalChars);\n                            if (mult1.length) {\n                                animatorJustifyOffset1 += animatorProps1.t.v * mult1[0] * justifyOffsetMult1;\n                            } else {\n                                animatorJustifyOffset1 += animatorProps1.t.v * mult1 * justifyOffsetMult1;\n                            }\n                        }\n                    }\n                    isNewLine1 = false;\n                }\n            }\n            if (animatorJustifyOffset1) {\n                animatorJustifyOffset1 += animatorFirstCharOffset1;\n            }\n            while(lastIndex1 < i3){\n                letters1[lastIndex1].animatorJustifyOffset = animatorJustifyOffset1;\n                lastIndex1 += 1;\n            }\n        } //\n        for(i3 = 0; i3 < len1; i3 += 1){\n            matrixHelper1.reset();\n            elemOpacity1 = 1;\n            if (letters1[i3].n) {\n                xPos1 = 0;\n                yPos1 += documentData1.yOffset;\n                yPos1 += firstLine1 ? 1 : 0;\n                currentLength1 = initPathPos1;\n                firstLine1 = false;\n                if (this._hasMaskedPath) {\n                    segmentInd1 = initSegmentInd1;\n                    pointInd1 = initPointInd1;\n                    points1 = segments1[segmentInd1].points;\n                    prevPoint1 = points1[pointInd1 - 1];\n                    currentPoint1 = points1[pointInd1];\n                    partialLength1 = currentPoint1.partialLength;\n                    segmentLength1 = 0;\n                }\n                letterM1 = \"\";\n                letterFc1 = \"\";\n                letterSw1 = \"\";\n                letterO1 = \"\";\n                letterP1 = this.defaultPropsArray;\n            } else {\n                if (this._hasMaskedPath) {\n                    if (currentLine1 !== letters1[i3].line) {\n                        switch(documentData1.j){\n                            case 1:\n                                currentLength1 += totalLength1 - documentData1.lineWidths[letters1[i3].line];\n                                break;\n                            case 2:\n                                currentLength1 += (totalLength1 - documentData1.lineWidths[letters1[i3].line]) / 2;\n                                break;\n                            default:\n                                break;\n                        }\n                        currentLine1 = letters1[i3].line;\n                    }\n                    if (ind1 !== letters1[i3].ind) {\n                        if (letters1[ind1]) {\n                            currentLength1 += letters1[ind1].extra;\n                        }\n                        currentLength1 += letters1[i3].an / 2;\n                        ind1 = letters1[i3].ind;\n                    }\n                    currentLength1 += alignment1[0] * letters1[i3].an * 0.005;\n                    var animatorOffset1 = 0;\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        animatorProps1 = animators1[j3].a;\n                        if (animatorProps1.p.propType) {\n                            animatorSelector1 = animators1[j3].s;\n                            mult1 = animatorSelector1.getMult(letters1[i3].anIndexes[j3], textData1.a[j3].s.totalChars);\n                            if (mult1.length) {\n                                animatorOffset1 += animatorProps1.p.v[0] * mult1[0];\n                            } else {\n                                animatorOffset1 += animatorProps1.p.v[0] * mult1;\n                            }\n                        }\n                        if (animatorProps1.a.propType) {\n                            animatorSelector1 = animators1[j3].s;\n                            mult1 = animatorSelector1.getMult(letters1[i3].anIndexes[j3], textData1.a[j3].s.totalChars);\n                            if (mult1.length) {\n                                animatorOffset1 += animatorProps1.a.v[0] * mult1[0];\n                            } else {\n                                animatorOffset1 += animatorProps1.a.v[0] * mult1;\n                            }\n                        }\n                    }\n                    flag1 = true; // Force alignment only works with a single line for now\n                    if (this._pathData.a.v) {\n                        currentLength1 = letters1[0].an * 0.5 + (totalLength1 - this._pathData.f.v - letters1[0].an * 0.5 - letters1[letters1.length - 1].an * 0.5) * ind1 / (len1 - 1);\n                        currentLength1 += this._pathData.f.v;\n                    }\n                    while(flag1){\n                        if (segmentLength1 + partialLength1 >= currentLength1 + animatorOffset1 || !points1) {\n                            perc1 = (currentLength1 + animatorOffset1 - segmentLength1) / currentPoint1.partialLength;\n                            xPathPos1 = prevPoint1.point[0] + (currentPoint1.point[0] - prevPoint1.point[0]) * perc1;\n                            yPathPos1 = prevPoint1.point[1] + (currentPoint1.point[1] - prevPoint1.point[1]) * perc1;\n                            matrixHelper1.translate(-alignment1[0] * letters1[i3].an * 0.005, -(alignment1[1] * yOff1) * 0.01);\n                            flag1 = false;\n                        } else if (points1) {\n                            segmentLength1 += currentPoint1.partialLength;\n                            pointInd1 += 1;\n                            if (pointInd1 >= points1.length) {\n                                pointInd1 = 0;\n                                segmentInd1 += 1;\n                                if (!segments1[segmentInd1]) {\n                                    if (mask1.v.c) {\n                                        pointInd1 = 0;\n                                        segmentInd1 = 0;\n                                        points1 = segments1[segmentInd1].points;\n                                    } else {\n                                        segmentLength1 -= currentPoint1.partialLength;\n                                        points1 = null;\n                                    }\n                                } else {\n                                    points1 = segments1[segmentInd1].points;\n                                }\n                            }\n                            if (points1) {\n                                prevPoint1 = currentPoint1;\n                                currentPoint1 = points1[pointInd1];\n                                partialLength1 = currentPoint1.partialLength;\n                            }\n                        }\n                    }\n                    offf1 = letters1[i3].an / 2 - letters1[i3].add;\n                    matrixHelper1.translate(-offf1, 0, 0);\n                } else {\n                    offf1 = letters1[i3].an / 2 - letters1[i3].add;\n                    matrixHelper1.translate(-offf1, 0, 0); // Grouping alignment\n                    matrixHelper1.translate(-alignment1[0] * letters1[i3].an * 0.005, -alignment1[1] * yOff1 * 0.01, 0);\n                }\n                for(j3 = 0; j3 < jLen1; j3 += 1){\n                    animatorProps1 = animators1[j3].a;\n                    if (animatorProps1.t.propType) {\n                        animatorSelector1 = animators1[j3].s;\n                        mult1 = animatorSelector1.getMult(letters1[i3].anIndexes[j3], textData1.a[j3].s.totalChars); // This condition is to prevent applying tracking to first character in each line. Might be better to use a boolean \"isNewLine\"\n                        if (xPos1 !== 0 || documentData1.j !== 0) {\n                            if (this._hasMaskedPath) {\n                                if (mult1.length) {\n                                    currentLength1 += animatorProps1.t.v * mult1[0];\n                                } else {\n                                    currentLength1 += animatorProps1.t.v * mult1;\n                                }\n                            } else if (mult1.length) {\n                                xPos1 += animatorProps1.t.v * mult1[0];\n                            } else {\n                                xPos1 += animatorProps1.t.v * mult1;\n                            }\n                        }\n                    }\n                }\n                if (documentData1.strokeWidthAnim) {\n                    sw1 = documentData1.sw || 0;\n                }\n                if (documentData1.strokeColorAnim) {\n                    if (documentData1.sc) {\n                        sc1 = [\n                            documentData1.sc[0],\n                            documentData1.sc[1],\n                            documentData1.sc[2]\n                        ];\n                    } else {\n                        sc1 = [\n                            0,\n                            0,\n                            0\n                        ];\n                    }\n                }\n                if (documentData1.fillColorAnim && documentData1.fc) {\n                    fc1 = [\n                        documentData1.fc[0],\n                        documentData1.fc[1],\n                        documentData1.fc[2]\n                    ];\n                }\n                for(j3 = 0; j3 < jLen1; j3 += 1){\n                    animatorProps1 = animators1[j3].a;\n                    if (animatorProps1.a.propType) {\n                        animatorSelector1 = animators1[j3].s;\n                        mult1 = animatorSelector1.getMult(letters1[i3].anIndexes[j3], textData1.a[j3].s.totalChars);\n                        if (mult1.length) {\n                            matrixHelper1.translate(-animatorProps1.a.v[0] * mult1[0], -animatorProps1.a.v[1] * mult1[1], animatorProps1.a.v[2] * mult1[2]);\n                        } else {\n                            matrixHelper1.translate(-animatorProps1.a.v[0] * mult1, -animatorProps1.a.v[1] * mult1, animatorProps1.a.v[2] * mult1);\n                        }\n                    }\n                }\n                for(j3 = 0; j3 < jLen1; j3 += 1){\n                    animatorProps1 = animators1[j3].a;\n                    if (animatorProps1.s.propType) {\n                        animatorSelector1 = animators1[j3].s;\n                        mult1 = animatorSelector1.getMult(letters1[i3].anIndexes[j3], textData1.a[j3].s.totalChars);\n                        if (mult1.length) {\n                            matrixHelper1.scale(1 + (animatorProps1.s.v[0] - 1) * mult1[0], 1 + (animatorProps1.s.v[1] - 1) * mult1[1], 1);\n                        } else {\n                            matrixHelper1.scale(1 + (animatorProps1.s.v[0] - 1) * mult1, 1 + (animatorProps1.s.v[1] - 1) * mult1, 1);\n                        }\n                    }\n                }\n                for(j3 = 0; j3 < jLen1; j3 += 1){\n                    animatorProps1 = animators1[j3].a;\n                    animatorSelector1 = animators1[j3].s;\n                    mult1 = animatorSelector1.getMult(letters1[i3].anIndexes[j3], textData1.a[j3].s.totalChars);\n                    if (animatorProps1.sk.propType) {\n                        if (mult1.length) {\n                            matrixHelper1.skewFromAxis(-animatorProps1.sk.v * mult1[0], animatorProps1.sa.v * mult1[1]);\n                        } else {\n                            matrixHelper1.skewFromAxis(-animatorProps1.sk.v * mult1, animatorProps1.sa.v * mult1);\n                        }\n                    }\n                    if (animatorProps1.r.propType) {\n                        if (mult1.length) {\n                            matrixHelper1.rotateZ(-animatorProps1.r.v * mult1[2]);\n                        } else {\n                            matrixHelper1.rotateZ(-animatorProps1.r.v * mult1);\n                        }\n                    }\n                    if (animatorProps1.ry.propType) {\n                        if (mult1.length) {\n                            matrixHelper1.rotateY(animatorProps1.ry.v * mult1[1]);\n                        } else {\n                            matrixHelper1.rotateY(animatorProps1.ry.v * mult1);\n                        }\n                    }\n                    if (animatorProps1.rx.propType) {\n                        if (mult1.length) {\n                            matrixHelper1.rotateX(animatorProps1.rx.v * mult1[0]);\n                        } else {\n                            matrixHelper1.rotateX(animatorProps1.rx.v * mult1);\n                        }\n                    }\n                    if (animatorProps1.o.propType) {\n                        if (mult1.length) {\n                            elemOpacity1 += (animatorProps1.o.v * mult1[0] - elemOpacity1) * mult1[0];\n                        } else {\n                            elemOpacity1 += (animatorProps1.o.v * mult1 - elemOpacity1) * mult1;\n                        }\n                    }\n                    if (documentData1.strokeWidthAnim && animatorProps1.sw.propType) {\n                        if (mult1.length) {\n                            sw1 += animatorProps1.sw.v * mult1[0];\n                        } else {\n                            sw1 += animatorProps1.sw.v * mult1;\n                        }\n                    }\n                    if (documentData1.strokeColorAnim && animatorProps1.sc.propType) {\n                        for(k3 = 0; k3 < 3; k3 += 1){\n                            if (mult1.length) {\n                                sc1[k3] += (animatorProps1.sc.v[k3] - sc1[k3]) * mult1[0];\n                            } else {\n                                sc1[k3] += (animatorProps1.sc.v[k3] - sc1[k3]) * mult1;\n                            }\n                        }\n                    }\n                    if (documentData1.fillColorAnim && documentData1.fc) {\n                        if (animatorProps1.fc.propType) {\n                            for(k3 = 0; k3 < 3; k3 += 1){\n                                if (mult1.length) {\n                                    fc1[k3] += (animatorProps1.fc.v[k3] - fc1[k3]) * mult1[0];\n                                } else {\n                                    fc1[k3] += (animatorProps1.fc.v[k3] - fc1[k3]) * mult1;\n                                }\n                            }\n                        }\n                        if (animatorProps1.fh.propType) {\n                            if (mult1.length) {\n                                fc1 = addHueToRGB(fc1, animatorProps1.fh.v * mult1[0]);\n                            } else {\n                                fc1 = addHueToRGB(fc1, animatorProps1.fh.v * mult1);\n                            }\n                        }\n                        if (animatorProps1.fs.propType) {\n                            if (mult1.length) {\n                                fc1 = addSaturationToRGB(fc1, animatorProps1.fs.v * mult1[0]);\n                            } else {\n                                fc1 = addSaturationToRGB(fc1, animatorProps1.fs.v * mult1);\n                            }\n                        }\n                        if (animatorProps1.fb.propType) {\n                            if (mult1.length) {\n                                fc1 = addBrightnessToRGB(fc1, animatorProps1.fb.v * mult1[0]);\n                            } else {\n                                fc1 = addBrightnessToRGB(fc1, animatorProps1.fb.v * mult1);\n                            }\n                        }\n                    }\n                }\n                for(j3 = 0; j3 < jLen1; j3 += 1){\n                    animatorProps1 = animators1[j3].a;\n                    if (animatorProps1.p.propType) {\n                        animatorSelector1 = animators1[j3].s;\n                        mult1 = animatorSelector1.getMult(letters1[i3].anIndexes[j3], textData1.a[j3].s.totalChars);\n                        if (this._hasMaskedPath) {\n                            if (mult1.length) {\n                                matrixHelper1.translate(0, animatorProps1.p.v[1] * mult1[0], -animatorProps1.p.v[2] * mult1[1]);\n                            } else {\n                                matrixHelper1.translate(0, animatorProps1.p.v[1] * mult1, -animatorProps1.p.v[2] * mult1);\n                            }\n                        } else if (mult1.length) {\n                            matrixHelper1.translate(animatorProps1.p.v[0] * mult1[0], animatorProps1.p.v[1] * mult1[1], -animatorProps1.p.v[2] * mult1[2]);\n                        } else {\n                            matrixHelper1.translate(animatorProps1.p.v[0] * mult1, animatorProps1.p.v[1] * mult1, -animatorProps1.p.v[2] * mult1);\n                        }\n                    }\n                }\n                if (documentData1.strokeWidthAnim) {\n                    letterSw1 = sw1 < 0 ? 0 : sw1;\n                }\n                if (documentData1.strokeColorAnim) {\n                    letterSc1 = \"rgb(\" + Math.round(sc1[0] * 255) + \",\" + Math.round(sc1[1] * 255) + \",\" + Math.round(sc1[2] * 255) + \")\";\n                }\n                if (documentData1.fillColorAnim && documentData1.fc) {\n                    letterFc1 = \"rgb(\" + Math.round(fc1[0] * 255) + \",\" + Math.round(fc1[1] * 255) + \",\" + Math.round(fc1[2] * 255) + \")\";\n                }\n                if (this._hasMaskedPath) {\n                    matrixHelper1.translate(0, -documentData1.ls);\n                    matrixHelper1.translate(0, alignment1[1] * yOff1 * 0.01 + yPos1, 0);\n                    if (this._pathData.p.v) {\n                        tanAngle1 = (currentPoint1.point[1] - prevPoint1.point[1]) / (currentPoint1.point[0] - prevPoint1.point[0]);\n                        var rot1 = Math.atan(tanAngle1) * 180 / Math.PI;\n                        if (currentPoint1.point[0] < prevPoint1.point[0]) {\n                            rot1 += 180;\n                        }\n                        matrixHelper1.rotate(-rot1 * Math.PI / 180);\n                    }\n                    matrixHelper1.translate(xPathPos1, yPathPos1, 0);\n                    currentLength1 -= alignment1[0] * letters1[i3].an * 0.005;\n                    if (letters1[i3 + 1] && ind1 !== letters1[i3 + 1].ind) {\n                        currentLength1 += letters1[i3].an / 2;\n                        currentLength1 += documentData1.tr * 0.001 * documentData1.finalSize;\n                    }\n                } else {\n                    matrixHelper1.translate(xPos1, yPos1, 0);\n                    if (documentData1.ps) {\n                        // matrixHelper.translate(documentData.ps[0],documentData.ps[1],0);\n                        matrixHelper1.translate(documentData1.ps[0], documentData1.ps[1] + documentData1.ascent, 0);\n                    }\n                    switch(documentData1.j){\n                        case 1:\n                            matrixHelper1.translate(letters1[i3].animatorJustifyOffset + documentData1.justifyOffset + (documentData1.boxWidth - documentData1.lineWidths[letters1[i3].line]), 0, 0);\n                            break;\n                        case 2:\n                            matrixHelper1.translate(letters1[i3].animatorJustifyOffset + documentData1.justifyOffset + (documentData1.boxWidth - documentData1.lineWidths[letters1[i3].line]) / 2, 0, 0);\n                            break;\n                        default:\n                            break;\n                    }\n                    matrixHelper1.translate(0, -documentData1.ls);\n                    matrixHelper1.translate(offf1, 0, 0);\n                    matrixHelper1.translate(alignment1[0] * letters1[i3].an * 0.005, alignment1[1] * yOff1 * 0.01, 0);\n                    xPos1 += letters1[i3].l + documentData1.tr * 0.001 * documentData1.finalSize;\n                }\n                if (renderType1 === \"html\") {\n                    letterM1 = matrixHelper1.toCSS();\n                } else if (renderType1 === \"svg\") {\n                    letterM1 = matrixHelper1.to2dCSS();\n                } else {\n                    letterP1 = [\n                        matrixHelper1.props[0],\n                        matrixHelper1.props[1],\n                        matrixHelper1.props[2],\n                        matrixHelper1.props[3],\n                        matrixHelper1.props[4],\n                        matrixHelper1.props[5],\n                        matrixHelper1.props[6],\n                        matrixHelper1.props[7],\n                        matrixHelper1.props[8],\n                        matrixHelper1.props[9],\n                        matrixHelper1.props[10],\n                        matrixHelper1.props[11],\n                        matrixHelper1.props[12],\n                        matrixHelper1.props[13],\n                        matrixHelper1.props[14],\n                        matrixHelper1.props[15]\n                    ];\n                }\n                letterO1 = elemOpacity1;\n            }\n            if (renderedLettersCount1 <= i3) {\n                letterValue1 = new LetterProps(letterO1, letterSw1, letterSc1, letterFc1, letterM1, letterP1);\n                this.renderedLetters.push(letterValue1);\n                renderedLettersCount1 += 1;\n                this.lettersChangedFlag = true;\n            } else {\n                letterValue1 = this.renderedLetters[i3];\n                this.lettersChangedFlag = letterValue1.update(letterO1, letterSw1, letterSc1, letterFc1, letterM1, letterP1) || this.lettersChangedFlag;\n            }\n        }\n    };\n    TextAnimatorProperty.prototype.getValue = function() {\n        if (this._elem.globalData.frameId === this._frameId) {\n            return;\n        }\n        this._frameId = this._elem.globalData.frameId;\n        this.iterateDynamicProperties();\n    };\n    TextAnimatorProperty.prototype.mHelper = new Matrix();\n    TextAnimatorProperty.prototype.defaultPropsArray = [];\n    extendPrototype([\n        DynamicPropertyContainer\n    ], TextAnimatorProperty);\n    function ITextElement() {}\n    ITextElement.prototype.initElement = function(data1, globalData1, comp1) {\n        this.lettersChangedFlag = true;\n        this.initFrame();\n        this.initBaseData(data1, globalData1, comp1);\n        this.textProperty = new TextProperty(this, data1.t, this.dynamicProperties);\n        this.textAnimator = new TextAnimatorProperty(data1.t, this.renderType, this);\n        this.initTransform(data1, globalData1, comp1);\n        this.initHierarchy();\n        this.initRenderable();\n        this.initRendererElement();\n        this.createContainerElements();\n        this.createRenderableComponents();\n        this.createContent();\n        this.hide();\n        this.textAnimator.searchProperties(this.dynamicProperties);\n    };\n    ITextElement.prototype.prepareFrame = function(num1) {\n        this._mdf = false;\n        this.prepareRenderableFrame(num1);\n        this.prepareProperties(num1, this.isInRange);\n    };\n    ITextElement.prototype.createPathShape = function(matrixHelper1, shapes1) {\n        var j3;\n        var jLen1 = shapes1.length;\n        var pathNodes1;\n        var shapeStr1 = \"\";\n        for(j3 = 0; j3 < jLen1; j3 += 1){\n            if (shapes1[j3].ty === \"sh\") {\n                pathNodes1 = shapes1[j3].ks.k;\n                shapeStr1 += buildShapeString(pathNodes1, pathNodes1.i.length, true, matrixHelper1);\n            }\n        }\n        return shapeStr1;\n    };\n    ITextElement.prototype.updateDocumentData = function(newData1, index1) {\n        this.textProperty.updateDocumentData(newData1, index1);\n    };\n    ITextElement.prototype.canResizeFont = function(_canResize1) {\n        this.textProperty.canResizeFont(_canResize1);\n    };\n    ITextElement.prototype.setMinimumFontSize = function(_fontSize1) {\n        this.textProperty.setMinimumFontSize(_fontSize1);\n    };\n    ITextElement.prototype.applyTextPropertiesToMatrix = function(documentData1, matrixHelper1, lineNumber1, xPos1, yPos1) {\n        if (documentData1.ps) {\n            matrixHelper1.translate(documentData1.ps[0], documentData1.ps[1] + documentData1.ascent, 0);\n        }\n        matrixHelper1.translate(0, -documentData1.ls, 0);\n        switch(documentData1.j){\n            case 1:\n                matrixHelper1.translate(documentData1.justifyOffset + (documentData1.boxWidth - documentData1.lineWidths[lineNumber1]), 0, 0);\n                break;\n            case 2:\n                matrixHelper1.translate(documentData1.justifyOffset + (documentData1.boxWidth - documentData1.lineWidths[lineNumber1]) / 2, 0, 0);\n                break;\n            default:\n                break;\n        }\n        matrixHelper1.translate(xPos1, yPos1, 0);\n    };\n    ITextElement.prototype.buildColor = function(colorData1) {\n        return \"rgb(\" + Math.round(colorData1[0] * 255) + \",\" + Math.round(colorData1[1] * 255) + \",\" + Math.round(colorData1[2] * 255) + \")\";\n    };\n    ITextElement.prototype.emptyProp = new LetterProps();\n    ITextElement.prototype.destroy = function() {};\n    ITextElement.prototype.validateText = function() {\n        if (this.textProperty._mdf || this.textProperty._isFirstFrame) {\n            this.buildNewText();\n            this.textProperty._isFirstFrame = false;\n            this.textProperty._mdf = false;\n        }\n    };\n    var emptyShapeData = {\n        shapes: []\n    };\n    function SVGTextLottieElement(data1, globalData1, comp1) {\n        this.textSpans = [];\n        this.renderType = \"svg\";\n        this.initElement(data1, globalData1, comp1);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        SVGBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableDOMElement,\n        ITextElement\n    ], SVGTextLottieElement);\n    SVGTextLottieElement.prototype.createContent = function() {\n        if (this.data.singleShape && !this.globalData.fontManager.chars) {\n            this.textContainer = createNS(\"text\");\n        }\n    };\n    SVGTextLottieElement.prototype.buildTextContents = function(textArray1) {\n        var i3 = 0;\n        var len1 = textArray1.length;\n        var textContents1 = [];\n        var currentTextContent1 = \"\";\n        while(i3 < len1){\n            if (textArray1[i3] === String.fromCharCode(13) || textArray1[i3] === String.fromCharCode(3)) {\n                textContents1.push(currentTextContent1);\n                currentTextContent1 = \"\";\n            } else {\n                currentTextContent1 += textArray1[i3];\n            }\n            i3 += 1;\n        }\n        textContents1.push(currentTextContent1);\n        return textContents1;\n    };\n    SVGTextLottieElement.prototype.buildShapeData = function(data1, scale2) {\n        // data should probably be cloned to apply scale separately to each instance of a text on different layers\n        // but since text internal content gets only rendered once and then it's never rerendered,\n        // it's probably safe not to clone data and reuse always the same instance even if the object is mutated.\n        // Avoiding cloning is preferred since cloning each character shape data is expensive\n        if (data1.shapes && data1.shapes.length) {\n            var shape3 = data1.shapes[0];\n            if (shape3.it) {\n                var shapeItem1 = shape3.it[shape3.it.length - 1];\n                if (shapeItem1.s) {\n                    shapeItem1.s.k[0] = scale2;\n                    shapeItem1.s.k[1] = scale2;\n                }\n            }\n        }\n        return data1;\n    };\n    SVGTextLottieElement.prototype.buildNewText = function() {\n        this.addDynamicProperty(this);\n        var i3;\n        var len1;\n        var documentData1 = this.textProperty.currentData;\n        this.renderedLetters = createSizedArray(documentData1 ? documentData1.l.length : 0);\n        if (documentData1.fc) {\n            this.layerElement.setAttribute(\"fill\", this.buildColor(documentData1.fc));\n        } else {\n            this.layerElement.setAttribute(\"fill\", \"rgba(0,0,0,0)\");\n        }\n        if (documentData1.sc) {\n            this.layerElement.setAttribute(\"stroke\", this.buildColor(documentData1.sc));\n            this.layerElement.setAttribute(\"stroke-width\", documentData1.sw);\n        }\n        this.layerElement.setAttribute(\"font-size\", documentData1.finalSize);\n        var fontData1 = this.globalData.fontManager.getFontByName(documentData1.f);\n        if (fontData1.fClass) {\n            this.layerElement.setAttribute(\"class\", fontData1.fClass);\n        } else {\n            this.layerElement.setAttribute(\"font-family\", fontData1.fFamily);\n            var fWeight1 = documentData1.fWeight;\n            var fStyle1 = documentData1.fStyle;\n            this.layerElement.setAttribute(\"font-style\", fStyle1);\n            this.layerElement.setAttribute(\"font-weight\", fWeight1);\n        }\n        this.layerElement.setAttribute(\"aria-label\", documentData1.t);\n        var letters1 = documentData1.l || [];\n        var usesGlyphs1 = !!this.globalData.fontManager.chars;\n        len1 = letters1.length;\n        var tSpan1;\n        var matrixHelper1 = this.mHelper;\n        var shapeStr1 = \"\";\n        var singleShape1 = this.data.singleShape;\n        var xPos1 = 0;\n        var yPos1 = 0;\n        var firstLine1 = true;\n        var trackingOffset1 = documentData1.tr * 0.001 * documentData1.finalSize;\n        if (singleShape1 && !usesGlyphs1 && !documentData1.sz) {\n            var tElement1 = this.textContainer;\n            var justify1 = \"start\";\n            switch(documentData1.j){\n                case 1:\n                    justify1 = \"end\";\n                    break;\n                case 2:\n                    justify1 = \"middle\";\n                    break;\n                default:\n                    justify1 = \"start\";\n                    break;\n            }\n            tElement1.setAttribute(\"text-anchor\", justify1);\n            tElement1.setAttribute(\"letter-spacing\", trackingOffset1);\n            var textContent1 = this.buildTextContents(documentData1.finalText);\n            len1 = textContent1.length;\n            yPos1 = documentData1.ps ? documentData1.ps[1] + documentData1.ascent : 0;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                tSpan1 = this.textSpans[i3].span || createNS(\"tspan\");\n                tSpan1.textContent = textContent1[i3];\n                tSpan1.setAttribute(\"x\", 0);\n                tSpan1.setAttribute(\"y\", yPos1);\n                tSpan1.style.display = \"inherit\";\n                tElement1.appendChild(tSpan1);\n                if (!this.textSpans[i3]) {\n                    this.textSpans[i3] = {\n                        span: null,\n                        glyph: null\n                    };\n                }\n                this.textSpans[i3].span = tSpan1;\n                yPos1 += documentData1.finalLineHeight;\n            }\n            this.layerElement.appendChild(tElement1);\n        } else {\n            var cachedSpansLength1 = this.textSpans.length;\n            var charData1;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                if (!this.textSpans[i3]) {\n                    this.textSpans[i3] = {\n                        span: null,\n                        childSpan: null,\n                        glyph: null\n                    };\n                }\n                if (!usesGlyphs1 || !singleShape1 || i3 === 0) {\n                    tSpan1 = cachedSpansLength1 > i3 ? this.textSpans[i3].span : createNS(usesGlyphs1 ? \"g\" : \"text\");\n                    if (cachedSpansLength1 <= i3) {\n                        tSpan1.setAttribute(\"stroke-linecap\", \"butt\");\n                        tSpan1.setAttribute(\"stroke-linejoin\", \"round\");\n                        tSpan1.setAttribute(\"stroke-miterlimit\", \"4\");\n                        this.textSpans[i3].span = tSpan1;\n                        if (usesGlyphs1) {\n                            var childSpan1 = createNS(\"g\");\n                            tSpan1.appendChild(childSpan1);\n                            this.textSpans[i3].childSpan = childSpan1;\n                        }\n                        this.textSpans[i3].span = tSpan1;\n                        this.layerElement.appendChild(tSpan1);\n                    }\n                    tSpan1.style.display = \"inherit\";\n                }\n                matrixHelper1.reset();\n                if (singleShape1) {\n                    if (letters1[i3].n) {\n                        xPos1 = -trackingOffset1;\n                        yPos1 += documentData1.yOffset;\n                        yPos1 += firstLine1 ? 1 : 0;\n                        firstLine1 = false;\n                    }\n                    this.applyTextPropertiesToMatrix(documentData1, matrixHelper1, letters1[i3].line, xPos1, yPos1);\n                    xPos1 += letters1[i3].l || 0; // xPos += letters[i].val === ' ' ? 0 : trackingOffset;\n                    xPos1 += trackingOffset1;\n                }\n                if (usesGlyphs1) {\n                    charData1 = this.globalData.fontManager.getCharData(documentData1.finalText[i3], fontData1.fStyle, this.globalData.fontManager.getFontByName(documentData1.f).fFamily);\n                    var glyphElement1; // t === 1 means the character has been replaced with an animated shaped\n                    if (charData1.t === 1) {\n                        glyphElement1 = new SVGCompElement(charData1.data, this.globalData, this);\n                    } else {\n                        var data1 = emptyShapeData;\n                        if (charData1.data && charData1.data.shapes) {\n                            data1 = this.buildShapeData(charData1.data, documentData1.finalSize);\n                        }\n                        glyphElement1 = new SVGShapeElement(data1, this.globalData, this);\n                    }\n                    if (this.textSpans[i3].glyph) {\n                        var glyph1 = this.textSpans[i3].glyph;\n                        this.textSpans[i3].childSpan.removeChild(glyph1.layerElement);\n                        glyph1.destroy();\n                    }\n                    this.textSpans[i3].glyph = glyphElement1;\n                    glyphElement1._debug = true;\n                    glyphElement1.prepareFrame(0);\n                    glyphElement1.renderFrame();\n                    this.textSpans[i3].childSpan.appendChild(glyphElement1.layerElement); // when using animated shapes, the layer will be scaled instead of replacing the internal scale\n                    // this might have issues with strokes and might need a different solution\n                    if (charData1.t === 1) {\n                        this.textSpans[i3].childSpan.setAttribute(\"transform\", \"scale(\" + documentData1.finalSize / 100 + \",\" + documentData1.finalSize / 100 + \")\");\n                    }\n                } else {\n                    if (singleShape1) {\n                        tSpan1.setAttribute(\"transform\", \"translate(\" + matrixHelper1.props[12] + \",\" + matrixHelper1.props[13] + \")\");\n                    }\n                    tSpan1.textContent = letters1[i3].val;\n                    tSpan1.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n                } //\n            }\n            if (singleShape1 && tSpan1) {\n                tSpan1.setAttribute(\"d\", shapeStr1);\n            }\n        }\n        while(i3 < this.textSpans.length){\n            this.textSpans[i3].span.style.display = \"none\";\n            i3 += 1;\n        }\n        this._sizeChanged = true;\n    };\n    SVGTextLottieElement.prototype.sourceRectAtTime = function() {\n        this.prepareFrame(this.comp.renderedFrame - this.data.st);\n        this.renderInnerContent();\n        if (this._sizeChanged) {\n            this._sizeChanged = false;\n            var textBox1 = this.layerElement.getBBox();\n            this.bbox = {\n                top: textBox1.y,\n                left: textBox1.x,\n                width: textBox1.width,\n                height: textBox1.height\n            };\n        }\n        return this.bbox;\n    };\n    SVGTextLottieElement.prototype.getValue = function() {\n        var i3;\n        var len1 = this.textSpans.length;\n        var glyphElement1;\n        this.renderedFrame = this.comp.renderedFrame;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            glyphElement1 = this.textSpans[i3].glyph;\n            if (glyphElement1) {\n                glyphElement1.prepareFrame(this.comp.renderedFrame - this.data.st);\n                if (glyphElement1._mdf) {\n                    this._mdf = true;\n                }\n            }\n        }\n    };\n    SVGTextLottieElement.prototype.renderInnerContent = function() {\n        this.validateText();\n        if (!this.data.singleShape || this._mdf) {\n            this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);\n            if (this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {\n                this._sizeChanged = true;\n                var i3;\n                var len1;\n                var renderedLetters1 = this.textAnimator.renderedLetters;\n                var letters1 = this.textProperty.currentData.l;\n                len1 = letters1.length;\n                var renderedLetter1;\n                var textSpan1;\n                var glyphElement1;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    if (!letters1[i3].n) {\n                        renderedLetter1 = renderedLetters1[i3];\n                        textSpan1 = this.textSpans[i3].span;\n                        glyphElement1 = this.textSpans[i3].glyph;\n                        if (glyphElement1) {\n                            glyphElement1.renderFrame();\n                        }\n                        if (renderedLetter1._mdf.m) {\n                            textSpan1.setAttribute(\"transform\", renderedLetter1.m);\n                        }\n                        if (renderedLetter1._mdf.o) {\n                            textSpan1.setAttribute(\"opacity\", renderedLetter1.o);\n                        }\n                        if (renderedLetter1._mdf.sw) {\n                            textSpan1.setAttribute(\"stroke-width\", renderedLetter1.sw);\n                        }\n                        if (renderedLetter1._mdf.sc) {\n                            textSpan1.setAttribute(\"stroke\", renderedLetter1.sc);\n                        }\n                        if (renderedLetter1._mdf.fc) {\n                            textSpan1.setAttribute(\"fill\", renderedLetter1.fc);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    function ISolidElement(data1, globalData1, comp1) {\n        this.initElement(data1, globalData1, comp1);\n    }\n    extendPrototype([\n        IImageElement\n    ], ISolidElement);\n    ISolidElement.prototype.createContent = function() {\n        var rect1 = createNS(\"rect\"); /// /rect.style.width = this.data.sw;\n        /// /rect.style.height = this.data.sh;\n        /// /rect.style.fill = this.data.sc;\n        rect1.setAttribute(\"width\", this.data.sw);\n        rect1.setAttribute(\"height\", this.data.sh);\n        rect1.setAttribute(\"fill\", this.data.sc);\n        this.layerElement.appendChild(rect1);\n    };\n    function NullElement(data1, globalData1, comp1) {\n        this.initFrame();\n        this.initBaseData(data1, globalData1, comp1);\n        this.initFrame();\n        this.initTransform(data1, globalData1, comp1);\n        this.initHierarchy();\n    }\n    NullElement.prototype.prepareFrame = function(num1) {\n        this.prepareProperties(num1, true);\n    };\n    NullElement.prototype.renderFrame = function() {};\n    NullElement.prototype.getBaseElement = function() {\n        return null;\n    };\n    NullElement.prototype.destroy = function() {};\n    NullElement.prototype.sourceRectAtTime = function() {};\n    NullElement.prototype.hide = function() {};\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        HierarchyElement,\n        FrameElement\n    ], NullElement);\n    function SVGRendererBase() {}\n    extendPrototype([\n        BaseRenderer\n    ], SVGRendererBase);\n    SVGRendererBase.prototype.createNull = function(data1) {\n        return new NullElement(data1, this.globalData, this);\n    };\n    SVGRendererBase.prototype.createShape = function(data1) {\n        return new SVGShapeElement(data1, this.globalData, this);\n    };\n    SVGRendererBase.prototype.createText = function(data1) {\n        return new SVGTextLottieElement(data1, this.globalData, this);\n    };\n    SVGRendererBase.prototype.createImage = function(data1) {\n        return new IImageElement(data1, this.globalData, this);\n    };\n    SVGRendererBase.prototype.createSolid = function(data1) {\n        return new ISolidElement(data1, this.globalData, this);\n    };\n    SVGRendererBase.prototype.configAnimation = function(animData1) {\n        this.svgElement.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n        this.svgElement.setAttribute(\"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n        if (this.renderConfig.viewBoxSize) {\n            this.svgElement.setAttribute(\"viewBox\", this.renderConfig.viewBoxSize);\n        } else {\n            this.svgElement.setAttribute(\"viewBox\", \"0 0 \" + animData1.w + \" \" + animData1.h);\n        }\n        if (!this.renderConfig.viewBoxOnly) {\n            this.svgElement.setAttribute(\"width\", animData1.w);\n            this.svgElement.setAttribute(\"height\", animData1.h);\n            this.svgElement.style.width = \"100%\";\n            this.svgElement.style.height = \"100%\";\n            this.svgElement.style.transform = \"translate3d(0,0,0)\";\n            this.svgElement.style.contentVisibility = this.renderConfig.contentVisibility;\n        }\n        if (this.renderConfig.width) {\n            this.svgElement.setAttribute(\"width\", this.renderConfig.width);\n        }\n        if (this.renderConfig.height) {\n            this.svgElement.setAttribute(\"height\", this.renderConfig.height);\n        }\n        if (this.renderConfig.className) {\n            this.svgElement.setAttribute(\"class\", this.renderConfig.className);\n        }\n        if (this.renderConfig.id) {\n            this.svgElement.setAttribute(\"id\", this.renderConfig.id);\n        }\n        if (this.renderConfig.focusable !== undefined) {\n            this.svgElement.setAttribute(\"focusable\", this.renderConfig.focusable);\n        }\n        this.svgElement.setAttribute(\"preserveAspectRatio\", this.renderConfig.preserveAspectRatio); // this.layerElement.style.transform = 'translate3d(0,0,0)';\n        // this.layerElement.style.transformOrigin = this.layerElement.style.mozTransformOrigin = this.layerElement.style.webkitTransformOrigin = this.layerElement.style['-webkit-transform'] = \"0px 0px 0px\";\n        this.animationItem.wrapper.appendChild(this.svgElement); // Mask animation\n        var defs1 = this.globalData.defs;\n        this.setupGlobalData(animData1, defs1);\n        this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;\n        this.data = animData1;\n        var maskElement1 = createNS(\"clipPath\");\n        var rect1 = createNS(\"rect\");\n        rect1.setAttribute(\"width\", animData1.w);\n        rect1.setAttribute(\"height\", animData1.h);\n        rect1.setAttribute(\"x\", 0);\n        rect1.setAttribute(\"y\", 0);\n        var maskId1 = createElementID();\n        maskElement1.setAttribute(\"id\", maskId1);\n        maskElement1.appendChild(rect1);\n        this.layerElement.setAttribute(\"clip-path\", \"url(\" + getLocationHref() + \"#\" + maskId1 + \")\");\n        defs1.appendChild(maskElement1);\n        this.layers = animData1.layers;\n        this.elements = createSizedArray(animData1.layers.length);\n    };\n    SVGRendererBase.prototype.destroy = function() {\n        if (this.animationItem.wrapper) {\n            this.animationItem.wrapper.innerText = \"\";\n        }\n        this.layerElement = null;\n        this.globalData.defs = null;\n        var i3;\n        var len1 = this.layers ? this.layers.length : 0;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.elements[i3] && this.elements[i3].destroy) {\n                this.elements[i3].destroy();\n            }\n        }\n        this.elements.length = 0;\n        this.destroyed = true;\n        this.animationItem = null;\n    };\n    SVGRendererBase.prototype.updateContainerSize = function() {};\n    SVGRendererBase.prototype.findIndexByInd = function(ind1) {\n        var i3 = 0;\n        var len1 = this.layers.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.layers[i3].ind === ind1) {\n                return i3;\n            }\n        }\n        return -1;\n    };\n    SVGRendererBase.prototype.buildItem = function(pos1) {\n        var elements1 = this.elements;\n        if (elements1[pos1] || this.layers[pos1].ty === 99) {\n            return;\n        }\n        elements1[pos1] = true;\n        var element1 = this.createItem(this.layers[pos1]);\n        elements1[pos1] = element1;\n        if (getExpressionsPlugin()) {\n            if (this.layers[pos1].ty === 0) {\n                this.globalData.projectInterface.registerComposition(element1);\n            }\n            element1.initExpressions();\n        }\n        this.appendElementInPos(element1, pos1);\n        if (this.layers[pos1].tt) {\n            var elementIndex1 = \"tp\" in this.layers[pos1] ? this.findIndexByInd(this.layers[pos1].tp) : pos1 - 1;\n            if (elementIndex1 === -1) {\n                return;\n            }\n            if (!this.elements[elementIndex1] || this.elements[elementIndex1] === true) {\n                this.buildItem(elementIndex1);\n                this.addPendingElement(element1);\n            } else {\n                var matteElement1 = elements1[elementIndex1];\n                var matteMask1 = matteElement1.getMatte(this.layers[pos1].tt);\n                element1.setMatte(matteMask1);\n            }\n        }\n    };\n    SVGRendererBase.prototype.checkPendingElements = function() {\n        while(this.pendingElements.length){\n            var element1 = this.pendingElements.pop();\n            element1.checkParenting();\n            if (element1.data.tt) {\n                var i3 = 0;\n                var len1 = this.elements.length;\n                while(i3 < len1){\n                    if (this.elements[i3] === element1) {\n                        var elementIndex1 = \"tp\" in element1.data ? this.findIndexByInd(element1.data.tp) : i3 - 1;\n                        var matteElement1 = this.elements[elementIndex1];\n                        var matteMask1 = matteElement1.getMatte(this.layers[i3].tt);\n                        element1.setMatte(matteMask1);\n                        break;\n                    }\n                    i3 += 1;\n                }\n            }\n        }\n    };\n    SVGRendererBase.prototype.renderFrame = function(num1) {\n        if (this.renderedFrame === num1 || this.destroyed) {\n            return;\n        }\n        if (num1 === null) {\n            num1 = this.renderedFrame;\n        } else {\n            this.renderedFrame = num1;\n        } // console.log('-------');\n        // console.log('FRAME ',num);\n        this.globalData.frameNum = num1;\n        this.globalData.frameId += 1;\n        this.globalData.projectInterface.currentFrame = num1;\n        this.globalData._mdf = false;\n        var i3;\n        var len1 = this.layers.length;\n        if (!this.completeLayers) {\n            this.checkLayers(num1);\n        }\n        for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n            if (this.completeLayers || this.elements[i3]) {\n                this.elements[i3].prepareFrame(num1 - this.layers[i3].st);\n            }\n        }\n        if (this.globalData._mdf) {\n            for(i3 = 0; i3 < len1; i3 += 1){\n                if (this.completeLayers || this.elements[i3]) {\n                    this.elements[i3].renderFrame();\n                }\n            }\n        }\n    };\n    SVGRendererBase.prototype.appendElementInPos = function(element1, pos1) {\n        var newElement1 = element1.getBaseElement();\n        if (!newElement1) {\n            return;\n        }\n        var i3 = 0;\n        var nextElement1;\n        while(i3 < pos1){\n            if (this.elements[i3] && this.elements[i3] !== true && this.elements[i3].getBaseElement()) {\n                nextElement1 = this.elements[i3].getBaseElement();\n            }\n            i3 += 1;\n        }\n        if (nextElement1) {\n            this.layerElement.insertBefore(newElement1, nextElement1);\n        } else {\n            this.layerElement.appendChild(newElement1);\n        }\n    };\n    SVGRendererBase.prototype.hide = function() {\n        this.layerElement.style.display = \"none\";\n    };\n    SVGRendererBase.prototype.show = function() {\n        this.layerElement.style.display = \"block\";\n    };\n    function ICompElement() {}\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableDOMElement\n    ], ICompElement);\n    ICompElement.prototype.initElement = function(data1, globalData1, comp1) {\n        this.initFrame();\n        this.initBaseData(data1, globalData1, comp1);\n        this.initTransform(data1, globalData1, comp1);\n        this.initRenderable();\n        this.initHierarchy();\n        this.initRendererElement();\n        this.createContainerElements();\n        this.createRenderableComponents();\n        if (this.data.xt || !globalData1.progressiveLoad) {\n            this.buildAllItems();\n        }\n        this.hide();\n    };\n    /* ICompElement.prototype.hide = function(){\r\n      if(!this.hidden){\r\n          this.hideElement();\r\n          var i,len = this.elements.length;\r\n          for( i = 0; i < len; i+=1 ){\r\n              if(this.elements[i]){\r\n                  this.elements[i].hide();\r\n              }\r\n          }\r\n      }\r\n  }; */ ICompElement.prototype.prepareFrame = function(num1) {\n        this._mdf = false;\n        this.prepareRenderableFrame(num1);\n        this.prepareProperties(num1, this.isInRange);\n        if (!this.isInRange && !this.data.xt) {\n            return;\n        }\n        if (!this.tm._placeholder) {\n            var timeRemapped1 = this.tm.v;\n            if (timeRemapped1 === this.data.op) {\n                timeRemapped1 = this.data.op - 1;\n            }\n            this.renderedFrame = timeRemapped1;\n        } else {\n            this.renderedFrame = num1 / this.data.sr;\n        }\n        var i3;\n        var len1 = this.elements.length;\n        if (!this.completeLayers) {\n            this.checkLayers(this.renderedFrame);\n        } // This iteration needs to be backwards because of how expressions connect between each other\n        for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n            if (this.completeLayers || this.elements[i3]) {\n                this.elements[i3].prepareFrame(this.renderedFrame - this.layers[i3].st);\n                if (this.elements[i3]._mdf) {\n                    this._mdf = true;\n                }\n            }\n        }\n    };\n    ICompElement.prototype.renderInnerContent = function() {\n        var i3;\n        var len1 = this.layers.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.completeLayers || this.elements[i3]) {\n                this.elements[i3].renderFrame();\n            }\n        }\n    };\n    ICompElement.prototype.setElements = function(elems1) {\n        this.elements = elems1;\n    };\n    ICompElement.prototype.getElements = function() {\n        return this.elements;\n    };\n    ICompElement.prototype.destroyElements = function() {\n        var i3;\n        var len1 = this.layers.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.elements[i3]) {\n                this.elements[i3].destroy();\n            }\n        }\n    };\n    ICompElement.prototype.destroy = function() {\n        this.destroyElements();\n        this.destroyBaseElement();\n    };\n    function SVGCompElement(data1, globalData1, comp1) {\n        this.layers = data1.layers;\n        this.supports3d = true;\n        this.completeLayers = false;\n        this.pendingElements = [];\n        this.elements = this.layers ? createSizedArray(this.layers.length) : [];\n        this.initElement(data1, globalData1, comp1);\n        this.tm = data1.tm ? PropertyFactory.getProp(this, data1.tm, 0, globalData1.frameRate, this) : {\n            _placeholder: true\n        };\n    }\n    extendPrototype([\n        SVGRendererBase,\n        ICompElement,\n        SVGBaseElement\n    ], SVGCompElement);\n    SVGCompElement.prototype.createComp = function(data1) {\n        return new SVGCompElement(data1, this.globalData, this);\n    };\n    function SVGRenderer(animationItem1, config1) {\n        this.animationItem = animationItem1;\n        this.layers = null;\n        this.renderedFrame = -1;\n        this.svgElement = createNS(\"svg\");\n        var ariaLabel1 = \"\";\n        if (config1 && config1.title) {\n            var titleElement1 = createNS(\"title\");\n            var titleId1 = createElementID();\n            titleElement1.setAttribute(\"id\", titleId1);\n            titleElement1.textContent = config1.title;\n            this.svgElement.appendChild(titleElement1);\n            ariaLabel1 += titleId1;\n        }\n        if (config1 && config1.description) {\n            var descElement1 = createNS(\"desc\");\n            var descId1 = createElementID();\n            descElement1.setAttribute(\"id\", descId1);\n            descElement1.textContent = config1.description;\n            this.svgElement.appendChild(descElement1);\n            ariaLabel1 += \" \" + descId1;\n        }\n        if (ariaLabel1) {\n            this.svgElement.setAttribute(\"aria-labelledby\", ariaLabel1);\n        }\n        var defs1 = createNS(\"defs\");\n        this.svgElement.appendChild(defs1);\n        var maskElement1 = createNS(\"g\");\n        this.svgElement.appendChild(maskElement1);\n        this.layerElement = maskElement1;\n        this.renderConfig = {\n            preserveAspectRatio: config1 && config1.preserveAspectRatio || \"xMidYMid meet\",\n            imagePreserveAspectRatio: config1 && config1.imagePreserveAspectRatio || \"xMidYMid slice\",\n            contentVisibility: config1 && config1.contentVisibility || \"visible\",\n            progressiveLoad: config1 && config1.progressiveLoad || false,\n            hideOnTransparent: !(config1 && config1.hideOnTransparent === false),\n            viewBoxOnly: config1 && config1.viewBoxOnly || false,\n            viewBoxSize: config1 && config1.viewBoxSize || false,\n            className: config1 && config1.className || \"\",\n            id: config1 && config1.id || \"\",\n            focusable: config1 && config1.focusable,\n            filterSize: {\n                width: config1 && config1.filterSize && config1.filterSize.width || \"100%\",\n                height: config1 && config1.filterSize && config1.filterSize.height || \"100%\",\n                x: config1 && config1.filterSize && config1.filterSize.x || \"0%\",\n                y: config1 && config1.filterSize && config1.filterSize.y || \"0%\"\n            },\n            width: config1 && config1.width,\n            height: config1 && config1.height,\n            runExpressions: !config1 || config1.runExpressions === undefined || config1.runExpressions\n        };\n        this.globalData = {\n            _mdf: false,\n            frameNum: -1,\n            defs: defs1,\n            renderConfig: this.renderConfig\n        };\n        this.elements = [];\n        this.pendingElements = [];\n        this.destroyed = false;\n        this.rendererType = \"svg\";\n    }\n    extendPrototype([\n        SVGRendererBase\n    ], SVGRenderer);\n    SVGRenderer.prototype.createComp = function(data1) {\n        return new SVGCompElement(data1, this.globalData, this);\n    };\n    function ShapeTransformManager() {\n        this.sequences = {};\n        this.sequenceList = [];\n        this.transform_key_count = 0;\n    }\n    ShapeTransformManager.prototype = {\n        addTransformSequence: function addTransformSequence1(transforms1) {\n            var i3;\n            var len1 = transforms1.length;\n            var key1 = \"_\";\n            for(i3 = 0; i3 < len1; i3 += 1){\n                key1 += transforms1[i3].transform.key + \"_\";\n            }\n            var sequence1 = this.sequences[key1];\n            if (!sequence1) {\n                sequence1 = {\n                    transforms: [].concat(transforms1),\n                    finalTransform: new Matrix(),\n                    _mdf: false\n                };\n                this.sequences[key1] = sequence1;\n                this.sequenceList.push(sequence1);\n            }\n            return sequence1;\n        },\n        processSequence: function processSequence1(sequence1, isFirstFrame1) {\n            var i3 = 0;\n            var len1 = sequence1.transforms.length;\n            var _mdf1 = isFirstFrame1;\n            while(i3 < len1 && !isFirstFrame1){\n                if (sequence1.transforms[i3].transform.mProps._mdf) {\n                    _mdf1 = true;\n                    break;\n                }\n                i3 += 1;\n            }\n            if (_mdf1) {\n                sequence1.finalTransform.reset();\n                for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n                    sequence1.finalTransform.multiply(sequence1.transforms[i3].transform.mProps.v);\n                }\n            }\n            sequence1._mdf = _mdf1;\n        },\n        processSequences: function processSequences1(isFirstFrame1) {\n            var i3;\n            var len1 = this.sequenceList.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                this.processSequence(this.sequenceList[i3], isFirstFrame1);\n            }\n        },\n        getNewKey: function getNewKey1() {\n            this.transform_key_count += 1;\n            return \"_\" + this.transform_key_count;\n        }\n    };\n    var lumaLoader = function lumaLoader1() {\n        var id1 = \"__lottie_element_luma_buffer\";\n        var lumaBuffer1 = null;\n        var lumaBufferCtx1 = null;\n        var svg1 = null; // This alternate solution has a slight delay before the filter is applied, resulting in a flicker on the first frame.\n        // Keeping this here for reference, and in the future, if offscreen canvas supports url filters, this can be used.\n        // For now, neither of them work for offscreen canvas, so canvas workers can't support the luma track matte mask.\n        // Naming it solution 2 to mark the extra comment lines.\n        /*\r\n    var svgString = [\r\n      '<svg xmlns=\"http://www.w3.org/2000/svg\">',\r\n      '<filter id=\"' + id + '\">',\r\n      '<feColorMatrix type=\"matrix\" color-interpolation-filters=\"sRGB\" values=\"',\r\n      '0.3, 0.3, 0.3, 0, 0, ',\r\n      '0.3, 0.3, 0.3, 0, 0, ',\r\n      '0.3, 0.3, 0.3, 0, 0, ',\r\n      '0.3, 0.3, 0.3, 0, 0',\r\n      '\"/>',\r\n      '</filter>',\r\n      '</svg>',\r\n    ].join('');\r\n    var blob = new Blob([svgString], { type: 'image/svg+xml' });\r\n    var url = URL.createObjectURL(blob);\r\n    */ function createLumaSvgFilter1() {\n            var _svg1 = createNS(\"svg\");\n            var fil1 = createNS(\"filter\");\n            var matrix1 = createNS(\"feColorMatrix\");\n            fil1.setAttribute(\"id\", id1);\n            matrix1.setAttribute(\"type\", \"matrix\");\n            matrix1.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n            matrix1.setAttribute(\"values\", \"0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0\");\n            fil1.appendChild(matrix1);\n            _svg1.appendChild(fil1);\n            _svg1.setAttribute(\"id\", id1 + \"_svg\");\n            if (featureSupport.svgLumaHidden) {\n                _svg1.style.display = \"none\";\n            }\n            return _svg1;\n        }\n        function loadLuma1() {\n            if (!lumaBuffer1) {\n                svg1 = createLumaSvgFilter1();\n                document.body.appendChild(svg1);\n                lumaBuffer1 = createTag(\"canvas\");\n                lumaBufferCtx1 = lumaBuffer1.getContext(\"2d\"); // lumaBufferCtx.filter = `url('${url}#__lottie_element_luma_buffer')`; // part of solution 2\n                lumaBufferCtx1.filter = \"url(#\" + id1 + \")\";\n                lumaBufferCtx1.fillStyle = \"rgba(0,0,0,0)\";\n                lumaBufferCtx1.fillRect(0, 0, 1, 1);\n            }\n        }\n        function getLuma1(canvas1) {\n            if (!lumaBuffer1) {\n                loadLuma1();\n            }\n            lumaBuffer1.width = canvas1.width;\n            lumaBuffer1.height = canvas1.height; // lumaBufferCtx.filter = `url('${url}#__lottie_element_luma_buffer')`; // part of solution 2\n            lumaBufferCtx1.filter = \"url(#\" + id1 + \")\";\n            return lumaBuffer1;\n        }\n        return {\n            load: loadLuma1,\n            get: getLuma1\n        };\n    };\n    function createCanvas(width1, height1) {\n        if (featureSupport.offscreenCanvas) {\n            return new OffscreenCanvas(width1, height1);\n        }\n        var canvas1 = createTag(\"canvas\");\n        canvas1.width = width1;\n        canvas1.height = height1;\n        return canvas1;\n    }\n    var assetLoader = function() {\n        return {\n            loadLumaCanvas: lumaLoader.load,\n            getLumaCanvas: lumaLoader.get,\n            createCanvas: createCanvas\n        };\n    }();\n    var registeredEffects = {};\n    function CVEffects(elem3) {\n        var i3;\n        var len1 = elem3.data.ef ? elem3.data.ef.length : 0;\n        this.filters = [];\n        var filterManager1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            filterManager1 = null;\n            var type1 = elem3.data.ef[i3].ty;\n            if (registeredEffects[type1]) {\n                var Effect1 = registeredEffects[type1].effect;\n                filterManager1 = new Effect1(elem3.effectsManager.effectElements[i3], elem3);\n            }\n            if (filterManager1) {\n                this.filters.push(filterManager1);\n            }\n        }\n        if (this.filters.length) {\n            elem3.addRenderableComponent(this);\n        }\n    }\n    CVEffects.prototype.renderFrame = function(_isFirstFrame1) {\n        var i3;\n        var len1 = this.filters.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            this.filters[i3].renderFrame(_isFirstFrame1);\n        }\n    };\n    CVEffects.prototype.getEffects = function(type1) {\n        var i3;\n        var len1 = this.filters.length;\n        var effects1 = [];\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.filters[i3].type === type1) {\n                effects1.push(this.filters[i3]);\n            }\n        }\n        return effects1;\n    };\n    function registerEffect(id1, effect1) {\n        registeredEffects[id1] = {\n            effect: effect1\n        };\n    }\n    function CVMaskElement(data1, element1) {\n        this.data = data1;\n        this.element = element1;\n        this.masksProperties = this.data.masksProperties || [];\n        this.viewData = createSizedArray(this.masksProperties.length);\n        var i3;\n        var len1 = this.masksProperties.length;\n        var hasMasks1 = false;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.masksProperties[i3].mode !== \"n\") {\n                hasMasks1 = true;\n            }\n            this.viewData[i3] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[i3], 3);\n        }\n        this.hasMasks = hasMasks1;\n        if (hasMasks1) {\n            this.element.addRenderableComponent(this);\n        }\n    }\n    CVMaskElement.prototype.renderFrame = function() {\n        if (!this.hasMasks) {\n            return;\n        }\n        var transform1 = this.element.finalTransform.mat;\n        var ctx1 = this.element.canvasContext;\n        var i3;\n        var len1 = this.masksProperties.length;\n        var pt5;\n        var pts1;\n        var data1;\n        ctx1.beginPath();\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.masksProperties[i3].mode !== \"n\") {\n                if (this.masksProperties[i3].inv) {\n                    ctx1.moveTo(0, 0);\n                    ctx1.lineTo(this.element.globalData.compSize.w, 0);\n                    ctx1.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h);\n                    ctx1.lineTo(0, this.element.globalData.compSize.h);\n                    ctx1.lineTo(0, 0);\n                }\n                data1 = this.viewData[i3].v;\n                pt5 = transform1.applyToPointArray(data1.v[0][0], data1.v[0][1], 0);\n                ctx1.moveTo(pt5[0], pt5[1]);\n                var j3;\n                var jLen1 = data1._length;\n                for(j3 = 1; j3 < jLen1; j3 += 1){\n                    pts1 = transform1.applyToTriplePoints(data1.o[j3 - 1], data1.i[j3], data1.v[j3]);\n                    ctx1.bezierCurveTo(pts1[0], pts1[1], pts1[2], pts1[3], pts1[4], pts1[5]);\n                }\n                pts1 = transform1.applyToTriplePoints(data1.o[j3 - 1], data1.i[0], data1.v[0]);\n                ctx1.bezierCurveTo(pts1[0], pts1[1], pts1[2], pts1[3], pts1[4], pts1[5]);\n            }\n        }\n        this.element.globalData.renderer.save(true);\n        ctx1.clip();\n    };\n    CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;\n    CVMaskElement.prototype.destroy = function() {\n        this.element = null;\n    };\n    function CVBaseElement() {}\n    var operationsMap = {\n        1: \"source-in\",\n        2: \"source-out\",\n        3: \"source-in\",\n        4: \"source-out\"\n    };\n    CVBaseElement.prototype = {\n        createElements: function createElements1() {},\n        initRendererElement: function initRendererElement1() {},\n        createContainerElements: function createContainerElements1() {\n            // If the layer is masked we will use two buffers to store each different states of the drawing\n            // This solution is not ideal for several reason. But unfortunately, because of the recursive\n            // nature of the render tree, it's the only simple way to make sure one inner mask doesn't override an outer mask.\n            // TODO: try to reduce the size of these buffers to the size of the composition contaning the layer\n            // It might be challenging because the layer most likely is transformed in some way\n            if (this.data.tt >= 1) {\n                this.buffers = [];\n                var canvasContext1 = this.globalData.canvasContext;\n                var bufferCanvas1 = assetLoader.createCanvas(canvasContext1.canvas.width, canvasContext1.canvas.height);\n                this.buffers.push(bufferCanvas1);\n                var bufferCanvas21 = assetLoader.createCanvas(canvasContext1.canvas.width, canvasContext1.canvas.height);\n                this.buffers.push(bufferCanvas21);\n                if (this.data.tt >= 3 && !document._isProxy) {\n                    assetLoader.loadLumaCanvas();\n                }\n            }\n            this.canvasContext = this.globalData.canvasContext;\n            this.transformCanvas = this.globalData.transformCanvas;\n            this.renderableEffectsManager = new CVEffects(this);\n            this.searchEffectTransforms();\n        },\n        createContent: function createContent1() {},\n        setBlendMode: function setBlendMode1() {\n            var globalData1 = this.globalData;\n            if (globalData1.blendMode !== this.data.bm) {\n                globalData1.blendMode = this.data.bm;\n                var blendModeValue1 = getBlendMode(this.data.bm);\n                globalData1.canvasContext.globalCompositeOperation = blendModeValue1;\n            }\n        },\n        createRenderableComponents: function createRenderableComponents1() {\n            this.maskManager = new CVMaskElement(this.data, this);\n            this.transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);\n        },\n        hideElement: function hideElement1() {\n            if (!this.hidden && (!this.isInRange || this.isTransparent)) {\n                this.hidden = true;\n            }\n        },\n        showElement: function showElement1() {\n            if (this.isInRange && !this.isTransparent) {\n                this.hidden = false;\n                this._isFirstFrame = true;\n                this.maskManager._isFirstFrame = true;\n            }\n        },\n        clearCanvas: function clearCanvas1(canvasContext1) {\n            canvasContext1.clearRect(this.transformCanvas.tx, this.transformCanvas.ty, this.transformCanvas.w * this.transformCanvas.sx, this.transformCanvas.h * this.transformCanvas.sy);\n        },\n        prepareLayer: function prepareLayer1() {\n            if (this.data.tt >= 1) {\n                var buffer1 = this.buffers[0];\n                var bufferCtx1 = buffer1.getContext(\"2d\");\n                this.clearCanvas(bufferCtx1); // on the first buffer we store the current state of the global drawing\n                bufferCtx1.drawImage(this.canvasContext.canvas, 0, 0); // The next four lines are to clear the canvas\n                // TODO: Check if there is a way to clear the canvas without resetting the transform\n                this.currentTransform = this.canvasContext.getTransform();\n                this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n                this.clearCanvas(this.canvasContext);\n                this.canvasContext.setTransform(this.currentTransform);\n            }\n        },\n        exitLayer: function exitLayer1() {\n            if (this.data.tt >= 1) {\n                var buffer1 = this.buffers[1]; // On the second buffer we store the current state of the global drawing\n                // that only contains the content of this layer\n                // (if it is a composition, it also includes the nested layers)\n                var bufferCtx1 = buffer1.getContext(\"2d\");\n                this.clearCanvas(bufferCtx1);\n                bufferCtx1.drawImage(this.canvasContext.canvas, 0, 0); // We clear the canvas again\n                this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);\n                this.clearCanvas(this.canvasContext);\n                this.canvasContext.setTransform(this.currentTransform); // We draw the mask\n                var mask1 = this.comp.getElementById(\"tp\" in this.data ? this.data.tp : this.data.ind - 1);\n                mask1.renderFrame(true); // We draw the second buffer (that contains the content of this layer)\n                this.canvasContext.setTransform(1, 0, 0, 1, 0, 0); // If the mask is a Luma matte, we need to do two extra painting operations\n                // the _isProxy check is to avoid drawing a fake canvas in workers that will throw an error\n                if (this.data.tt >= 3 && !document._isProxy) {\n                    // We copy the painted mask to a buffer that has a color matrix filter applied to it\n                    // that applies the rgb values to the alpha channel\n                    var lumaBuffer1 = assetLoader.getLumaCanvas(this.canvasContext.canvas);\n                    var lumaBufferCtx1 = lumaBuffer1.getContext(\"2d\");\n                    lumaBufferCtx1.drawImage(this.canvasContext.canvas, 0, 0);\n                    this.clearCanvas(this.canvasContext); // we repaint the context with the mask applied to it\n                    this.canvasContext.drawImage(lumaBuffer1, 0, 0);\n                }\n                this.canvasContext.globalCompositeOperation = operationsMap[this.data.tt];\n                this.canvasContext.drawImage(buffer1, 0, 0); // We finally draw the first buffer (that contains the content of the global drawing)\n                // We use destination-over to draw the global drawing below the current layer\n                this.canvasContext.globalCompositeOperation = \"destination-over\";\n                this.canvasContext.drawImage(this.buffers[0], 0, 0);\n                this.canvasContext.setTransform(this.currentTransform); // We reset the globalCompositeOperation to source-over, the standard type of operation\n                this.canvasContext.globalCompositeOperation = \"source-over\";\n            }\n        },\n        renderFrame: function renderFrame1(forceRender1) {\n            if (this.hidden || this.data.hd) {\n                return;\n            }\n            if (this.data.td === 1 && !forceRender1) {\n                return;\n            }\n            this.renderTransform();\n            this.renderRenderable();\n            this.renderLocalTransform();\n            this.setBlendMode();\n            var forceRealStack1 = this.data.ty === 0;\n            this.prepareLayer();\n            this.globalData.renderer.save(forceRealStack1);\n            this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props);\n            this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity);\n            this.renderInnerContent();\n            this.globalData.renderer.restore(forceRealStack1);\n            this.exitLayer();\n            if (this.maskManager.hasMasks) {\n                this.globalData.renderer.restore(true);\n            }\n            if (this._isFirstFrame) {\n                this._isFirstFrame = false;\n            }\n        },\n        destroy: function destroy1() {\n            this.canvasContext = null;\n            this.data = null;\n            this.globalData = null;\n            this.maskManager.destroy();\n        },\n        mHelper: new Matrix()\n    };\n    CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;\n    CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;\n    function CVShapeData(element1, data1, styles1, transformsManager1) {\n        this.styledShapes = [];\n        this.tr = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n        var ty1 = 4;\n        if (data1.ty === \"rc\") {\n            ty1 = 5;\n        } else if (data1.ty === \"el\") {\n            ty1 = 6;\n        } else if (data1.ty === \"sr\") {\n            ty1 = 7;\n        }\n        this.sh = ShapePropertyFactory.getShapeProp(element1, data1, ty1, element1);\n        var i3;\n        var len1 = styles1.length;\n        var styledShape1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (!styles1[i3].closed) {\n                styledShape1 = {\n                    transforms: transformsManager1.addTransformSequence(styles1[i3].transforms),\n                    trNodes: []\n                };\n                this.styledShapes.push(styledShape1);\n                styles1[i3].elements.push(styledShape1);\n            }\n        }\n    }\n    CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;\n    function CVShapeElement(data1, globalData1, comp1) {\n        this.shapes = [];\n        this.shapesData = data1.shapes;\n        this.stylesList = [];\n        this.itemsData = [];\n        this.prevViewData = [];\n        this.shapeModifiers = [];\n        this.processedElements = [];\n        this.transformsManager = new ShapeTransformManager();\n        this.initElement(data1, globalData1, comp1);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        CVBaseElement,\n        IShapeElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableElement\n    ], CVShapeElement);\n    CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;\n    CVShapeElement.prototype.transformHelper = {\n        opacity: 1,\n        _opMdf: false\n    };\n    CVShapeElement.prototype.dashResetter = [];\n    CVShapeElement.prototype.createContent = function() {\n        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);\n    };\n    CVShapeElement.prototype.createStyleElement = function(data1, transforms1) {\n        var styleElem1 = {\n            data: data1,\n            type: data1.ty,\n            preTransforms: this.transformsManager.addTransformSequence(transforms1),\n            transforms: [],\n            elements: [],\n            closed: data1.hd === true\n        };\n        var elementData1 = {};\n        if (data1.ty === \"fl\" || data1.ty === \"st\") {\n            elementData1.c = PropertyFactory.getProp(this, data1.c, 1, 255, this);\n            if (!elementData1.c.k) {\n                styleElem1.co = \"rgb(\" + bmFloor(elementData1.c.v[0]) + \",\" + bmFloor(elementData1.c.v[1]) + \",\" + bmFloor(elementData1.c.v[2]) + \")\";\n            }\n        } else if (data1.ty === \"gf\" || data1.ty === \"gs\") {\n            elementData1.s = PropertyFactory.getProp(this, data1.s, 1, null, this);\n            elementData1.e = PropertyFactory.getProp(this, data1.e, 1, null, this);\n            elementData1.h = PropertyFactory.getProp(this, data1.h || {\n                k: 0\n            }, 0, 0.01, this);\n            elementData1.a = PropertyFactory.getProp(this, data1.a || {\n                k: 0\n            }, 0, degToRads, this);\n            elementData1.g = new GradientProperty(this, data1.g, this);\n        }\n        elementData1.o = PropertyFactory.getProp(this, data1.o, 0, 0.01, this);\n        if (data1.ty === \"st\" || data1.ty === \"gs\") {\n            styleElem1.lc = lineCapEnum[data1.lc || 2];\n            styleElem1.lj = lineJoinEnum[data1.lj || 2];\n            if (data1.lj == 1) {\n                // eslint-disable-line eqeqeq\n                styleElem1.ml = data1.ml;\n            }\n            elementData1.w = PropertyFactory.getProp(this, data1.w, 0, null, this);\n            if (!elementData1.w.k) {\n                styleElem1.wi = elementData1.w.v;\n            }\n            if (data1.d) {\n                var d3 = new DashProperty(this, data1.d, \"canvas\", this);\n                elementData1.d = d3;\n                if (!elementData1.d.k) {\n                    styleElem1.da = elementData1.d.dashArray;\n                    styleElem1[\"do\"] = elementData1.d.dashoffset[0];\n                }\n            }\n        } else {\n            styleElem1.r = data1.r === 2 ? \"evenodd\" : \"nonzero\";\n        }\n        this.stylesList.push(styleElem1);\n        elementData1.style = styleElem1;\n        return elementData1;\n    };\n    CVShapeElement.prototype.createGroupElement = function() {\n        var elementData1 = {\n            it: [],\n            prevViewData: []\n        };\n        return elementData1;\n    };\n    CVShapeElement.prototype.createTransformElement = function(data1) {\n        var elementData1 = {\n            transform: {\n                opacity: 1,\n                _opMdf: false,\n                key: this.transformsManager.getNewKey(),\n                op: PropertyFactory.getProp(this, data1.o, 0, 0.01, this),\n                mProps: TransformPropertyFactory.getTransformProperty(this, data1, this)\n            }\n        };\n        return elementData1;\n    };\n    CVShapeElement.prototype.createShapeElement = function(data1) {\n        var elementData1 = new CVShapeData(this, data1, this.stylesList, this.transformsManager);\n        this.shapes.push(elementData1);\n        this.addShapeToModifiers(elementData1);\n        return elementData1;\n    };\n    CVShapeElement.prototype.reloadShapes = function() {\n        this._isFirstFrame = true;\n        var i3;\n        var len1 = this.itemsData.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            this.prevViewData[i3] = this.itemsData[i3];\n        }\n        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);\n        len1 = this.dynamicProperties.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            this.dynamicProperties[i3].getValue();\n        }\n        this.renderModifiers();\n        this.transformsManager.processSequences(this._isFirstFrame);\n    };\n    CVShapeElement.prototype.addTransformToStyleList = function(transform1) {\n        var i3;\n        var len1 = this.stylesList.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (!this.stylesList[i3].closed) {\n                this.stylesList[i3].transforms.push(transform1);\n            }\n        }\n    };\n    CVShapeElement.prototype.removeTransformFromStyleList = function() {\n        var i3;\n        var len1 = this.stylesList.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (!this.stylesList[i3].closed) {\n                this.stylesList[i3].transforms.pop();\n            }\n        }\n    };\n    CVShapeElement.prototype.closeStyles = function(styles1) {\n        var i3;\n        var len1 = styles1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            styles1[i3].closed = true;\n        }\n    };\n    CVShapeElement.prototype.searchShapes = function(arr3, itemsData1, prevViewData1, shouldRender1, transforms1) {\n        var i3;\n        var len1 = arr3.length - 1;\n        var j3;\n        var jLen1;\n        var ownStyles1 = [];\n        var ownModifiers1 = [];\n        var processedPos1;\n        var modifier1;\n        var currentTransform1;\n        var ownTransforms1 = [].concat(transforms1);\n        for(i3 = len1; i3 >= 0; i3 -= 1){\n            processedPos1 = this.searchProcessedElement(arr3[i3]);\n            if (!processedPos1) {\n                arr3[i3]._shouldRender = shouldRender1;\n            } else {\n                itemsData1[i3] = prevViewData1[processedPos1 - 1];\n            }\n            if (arr3[i3].ty === \"fl\" || arr3[i3].ty === \"st\" || arr3[i3].ty === \"gf\" || arr3[i3].ty === \"gs\") {\n                if (!processedPos1) {\n                    itemsData1[i3] = this.createStyleElement(arr3[i3], ownTransforms1);\n                } else {\n                    itemsData1[i3].style.closed = false;\n                }\n                ownStyles1.push(itemsData1[i3].style);\n            } else if (arr3[i3].ty === \"gr\") {\n                if (!processedPos1) {\n                    itemsData1[i3] = this.createGroupElement(arr3[i3]);\n                } else {\n                    jLen1 = itemsData1[i3].it.length;\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        itemsData1[i3].prevViewData[j3] = itemsData1[i3].it[j3];\n                    }\n                }\n                this.searchShapes(arr3[i3].it, itemsData1[i3].it, itemsData1[i3].prevViewData, shouldRender1, ownTransforms1);\n            } else if (arr3[i3].ty === \"tr\") {\n                if (!processedPos1) {\n                    currentTransform1 = this.createTransformElement(arr3[i3]);\n                    itemsData1[i3] = currentTransform1;\n                }\n                ownTransforms1.push(itemsData1[i3]);\n                this.addTransformToStyleList(itemsData1[i3]);\n            } else if (arr3[i3].ty === \"sh\" || arr3[i3].ty === \"rc\" || arr3[i3].ty === \"el\" || arr3[i3].ty === \"sr\") {\n                if (!processedPos1) {\n                    itemsData1[i3] = this.createShapeElement(arr3[i3]);\n                }\n            } else if (arr3[i3].ty === \"tm\" || arr3[i3].ty === \"rd\" || arr3[i3].ty === \"pb\" || arr3[i3].ty === \"zz\" || arr3[i3].ty === \"op\") {\n                if (!processedPos1) {\n                    modifier1 = ShapeModifiers.getModifier(arr3[i3].ty);\n                    modifier1.init(this, arr3[i3]);\n                    itemsData1[i3] = modifier1;\n                    this.shapeModifiers.push(modifier1);\n                } else {\n                    modifier1 = itemsData1[i3];\n                    modifier1.closed = false;\n                }\n                ownModifiers1.push(modifier1);\n            } else if (arr3[i3].ty === \"rp\") {\n                if (!processedPos1) {\n                    modifier1 = ShapeModifiers.getModifier(arr3[i3].ty);\n                    itemsData1[i3] = modifier1;\n                    modifier1.init(this, arr3, i3, itemsData1);\n                    this.shapeModifiers.push(modifier1);\n                    shouldRender1 = false;\n                } else {\n                    modifier1 = itemsData1[i3];\n                    modifier1.closed = true;\n                }\n                ownModifiers1.push(modifier1);\n            }\n            this.addProcessedElement(arr3[i3], i3 + 1);\n        }\n        this.removeTransformFromStyleList();\n        this.closeStyles(ownStyles1);\n        len1 = ownModifiers1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            ownModifiers1[i3].closed = true;\n        }\n    };\n    CVShapeElement.prototype.renderInnerContent = function() {\n        this.transformHelper.opacity = 1;\n        this.transformHelper._opMdf = false;\n        this.renderModifiers();\n        this.transformsManager.processSequences(this._isFirstFrame);\n        this.renderShape(this.transformHelper, this.shapesData, this.itemsData, true);\n    };\n    CVShapeElement.prototype.renderShapeTransform = function(parentTransform1, groupTransform1) {\n        if (parentTransform1._opMdf || groupTransform1.op._mdf || this._isFirstFrame) {\n            groupTransform1.opacity = parentTransform1.opacity;\n            groupTransform1.opacity *= groupTransform1.op.v;\n            groupTransform1._opMdf = true;\n        }\n    };\n    CVShapeElement.prototype.drawLayer = function() {\n        var i3;\n        var len1 = this.stylesList.length;\n        var j3;\n        var jLen1;\n        var k3;\n        var kLen1;\n        var elems1;\n        var nodes1;\n        var renderer1 = this.globalData.renderer;\n        var ctx1 = this.globalData.canvasContext;\n        var type1;\n        var currentStyle1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            currentStyle1 = this.stylesList[i3];\n            type1 = currentStyle1.type; // Skipping style when\n            // Stroke width equals 0\n            // style should not be rendered (extra unused repeaters)\n            // current opacity equals 0\n            // global opacity equals 0\n            if (!((type1 === \"st\" || type1 === \"gs\") && currentStyle1.wi === 0 || !currentStyle1.data._shouldRender || currentStyle1.coOp === 0 || this.globalData.currentGlobalAlpha === 0)) {\n                renderer1.save();\n                elems1 = currentStyle1.elements;\n                if (type1 === \"st\" || type1 === \"gs\") {\n                    renderer1.ctxStrokeStyle(type1 === \"st\" ? currentStyle1.co : currentStyle1.grd); // ctx.strokeStyle = type === 'st' ? currentStyle.co : currentStyle.grd;\n                    renderer1.ctxLineWidth(currentStyle1.wi); // ctx.lineWidth = currentStyle.wi;\n                    renderer1.ctxLineCap(currentStyle1.lc); // ctx.lineCap = currentStyle.lc;\n                    renderer1.ctxLineJoin(currentStyle1.lj); // ctx.lineJoin = currentStyle.lj;\n                    renderer1.ctxMiterLimit(currentStyle1.ml || 0); // ctx.miterLimit = currentStyle.ml || 0;\n                } else {\n                    renderer1.ctxFillStyle(type1 === \"fl\" ? currentStyle1.co : currentStyle1.grd); // ctx.fillStyle = type === 'fl' ? currentStyle.co : currentStyle.grd;\n                }\n                renderer1.ctxOpacity(currentStyle1.coOp);\n                if (type1 !== \"st\" && type1 !== \"gs\") {\n                    ctx1.beginPath();\n                }\n                renderer1.ctxTransform(currentStyle1.preTransforms.finalTransform.props);\n                jLen1 = elems1.length;\n                for(j3 = 0; j3 < jLen1; j3 += 1){\n                    if (type1 === \"st\" || type1 === \"gs\") {\n                        ctx1.beginPath();\n                        if (currentStyle1.da) {\n                            ctx1.setLineDash(currentStyle1.da);\n                            ctx1.lineDashOffset = currentStyle1[\"do\"];\n                        }\n                    }\n                    nodes1 = elems1[j3].trNodes;\n                    kLen1 = nodes1.length;\n                    for(k3 = 0; k3 < kLen1; k3 += 1){\n                        if (nodes1[k3].t === \"m\") {\n                            ctx1.moveTo(nodes1[k3].p[0], nodes1[k3].p[1]);\n                        } else if (nodes1[k3].t === \"c\") {\n                            ctx1.bezierCurveTo(nodes1[k3].pts[0], nodes1[k3].pts[1], nodes1[k3].pts[2], nodes1[k3].pts[3], nodes1[k3].pts[4], nodes1[k3].pts[5]);\n                        } else {\n                            ctx1.closePath();\n                        }\n                    }\n                    if (type1 === \"st\" || type1 === \"gs\") {\n                        // ctx.stroke();\n                        renderer1.ctxStroke();\n                        if (currentStyle1.da) {\n                            ctx1.setLineDash(this.dashResetter);\n                        }\n                    }\n                }\n                if (type1 !== \"st\" && type1 !== \"gs\") {\n                    // ctx.fill(currentStyle.r);\n                    this.globalData.renderer.ctxFill(currentStyle1.r);\n                }\n                renderer1.restore();\n            }\n        }\n    };\n    CVShapeElement.prototype.renderShape = function(parentTransform1, items1, data1, isMain1) {\n        var i3;\n        var len1 = items1.length - 1;\n        var groupTransform1;\n        groupTransform1 = parentTransform1;\n        for(i3 = len1; i3 >= 0; i3 -= 1){\n            if (items1[i3].ty === \"tr\") {\n                groupTransform1 = data1[i3].transform;\n                this.renderShapeTransform(parentTransform1, groupTransform1);\n            } else if (items1[i3].ty === \"sh\" || items1[i3].ty === \"el\" || items1[i3].ty === \"rc\" || items1[i3].ty === \"sr\") {\n                this.renderPath(items1[i3], data1[i3]);\n            } else if (items1[i3].ty === \"fl\") {\n                this.renderFill(items1[i3], data1[i3], groupTransform1);\n            } else if (items1[i3].ty === \"st\") {\n                this.renderStroke(items1[i3], data1[i3], groupTransform1);\n            } else if (items1[i3].ty === \"gf\" || items1[i3].ty === \"gs\") {\n                this.renderGradientFill(items1[i3], data1[i3], groupTransform1);\n            } else if (items1[i3].ty === \"gr\") {\n                this.renderShape(groupTransform1, items1[i3].it, data1[i3].it);\n            } else if (items1[i3].ty === \"tm\") {}\n        }\n        if (isMain1) {\n            this.drawLayer();\n        }\n    };\n    CVShapeElement.prototype.renderStyledShape = function(styledShape1, shape3) {\n        if (this._isFirstFrame || shape3._mdf || styledShape1.transforms._mdf) {\n            var shapeNodes1 = styledShape1.trNodes;\n            var paths1 = shape3.paths;\n            var i3;\n            var len1;\n            var j3;\n            var jLen1 = paths1._length;\n            shapeNodes1.length = 0;\n            var groupTransformMat1 = styledShape1.transforms.finalTransform;\n            for(j3 = 0; j3 < jLen1; j3 += 1){\n                var pathNodes1 = paths1.shapes[j3];\n                if (pathNodes1 && pathNodes1.v) {\n                    len1 = pathNodes1._length;\n                    for(i3 = 1; i3 < len1; i3 += 1){\n                        if (i3 === 1) {\n                            shapeNodes1.push({\n                                t: \"m\",\n                                p: groupTransformMat1.applyToPointArray(pathNodes1.v[0][0], pathNodes1.v[0][1], 0)\n                            });\n                        }\n                        shapeNodes1.push({\n                            t: \"c\",\n                            pts: groupTransformMat1.applyToTriplePoints(pathNodes1.o[i3 - 1], pathNodes1.i[i3], pathNodes1.v[i3])\n                        });\n                    }\n                    if (len1 === 1) {\n                        shapeNodes1.push({\n                            t: \"m\",\n                            p: groupTransformMat1.applyToPointArray(pathNodes1.v[0][0], pathNodes1.v[0][1], 0)\n                        });\n                    }\n                    if (pathNodes1.c && len1) {\n                        shapeNodes1.push({\n                            t: \"c\",\n                            pts: groupTransformMat1.applyToTriplePoints(pathNodes1.o[i3 - 1], pathNodes1.i[0], pathNodes1.v[0])\n                        });\n                        shapeNodes1.push({\n                            t: \"z\"\n                        });\n                    }\n                }\n            }\n            styledShape1.trNodes = shapeNodes1;\n        }\n    };\n    CVShapeElement.prototype.renderPath = function(pathData1, itemData1) {\n        if (pathData1.hd !== true && pathData1._shouldRender) {\n            var i3;\n            var len1 = itemData1.styledShapes.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                this.renderStyledShape(itemData1.styledShapes[i3], itemData1.sh);\n            }\n        }\n    };\n    CVShapeElement.prototype.renderFill = function(styleData1, itemData1, groupTransform1) {\n        var styleElem1 = itemData1.style;\n        if (itemData1.c._mdf || this._isFirstFrame) {\n            styleElem1.co = \"rgb(\" + bmFloor(itemData1.c.v[0]) + \",\" + bmFloor(itemData1.c.v[1]) + \",\" + bmFloor(itemData1.c.v[2]) + \")\";\n        }\n        if (itemData1.o._mdf || groupTransform1._opMdf || this._isFirstFrame) {\n            styleElem1.coOp = itemData1.o.v * groupTransform1.opacity;\n        }\n    };\n    CVShapeElement.prototype.renderGradientFill = function(styleData1, itemData1, groupTransform1) {\n        var styleElem1 = itemData1.style;\n        var grd1;\n        if (!styleElem1.grd || itemData1.g._mdf || itemData1.s._mdf || itemData1.e._mdf || styleData1.t !== 1 && (itemData1.h._mdf || itemData1.a._mdf)) {\n            var ctx1 = this.globalData.canvasContext;\n            var pt11 = itemData1.s.v;\n            var pt21 = itemData1.e.v;\n            if (styleData1.t === 1) {\n                grd1 = ctx1.createLinearGradient(pt11[0], pt11[1], pt21[0], pt21[1]);\n            } else {\n                var rad1 = Math.sqrt(Math.pow(pt11[0] - pt21[0], 2) + Math.pow(pt11[1] - pt21[1], 2));\n                var ang1 = Math.atan2(pt21[1] - pt11[1], pt21[0] - pt11[0]);\n                var percent1 = itemData1.h.v;\n                if (percent1 >= 1) {\n                    percent1 = 0.99;\n                } else if (percent1 <= -1) {\n                    percent1 = -0.99;\n                }\n                var dist4 = rad1 * percent1;\n                var x4 = Math.cos(ang1 + itemData1.a.v) * dist4 + pt11[0];\n                var y4 = Math.sin(ang1 + itemData1.a.v) * dist4 + pt11[1];\n                grd1 = ctx1.createRadialGradient(x4, y4, 0, pt11[0], pt11[1], rad1);\n            }\n            var i3;\n            var len1 = styleData1.g.p;\n            var cValues1 = itemData1.g.c;\n            var opacity1 = 1;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                if (itemData1.g._hasOpacity && itemData1.g._collapsable) {\n                    opacity1 = itemData1.g.o[i3 * 2 + 1];\n                }\n                grd1.addColorStop(cValues1[i3 * 4] / 100, \"rgba(\" + cValues1[i3 * 4 + 1] + \",\" + cValues1[i3 * 4 + 2] + \",\" + cValues1[i3 * 4 + 3] + \",\" + opacity1 + \")\");\n            }\n            styleElem1.grd = grd1;\n        }\n        styleElem1.coOp = itemData1.o.v * groupTransform1.opacity;\n    };\n    CVShapeElement.prototype.renderStroke = function(styleData1, itemData1, groupTransform1) {\n        var styleElem1 = itemData1.style;\n        var d3 = itemData1.d;\n        if (d3 && (d3._mdf || this._isFirstFrame)) {\n            styleElem1.da = d3.dashArray;\n            styleElem1[\"do\"] = d3.dashoffset[0];\n        }\n        if (itemData1.c._mdf || this._isFirstFrame) {\n            styleElem1.co = \"rgb(\" + bmFloor(itemData1.c.v[0]) + \",\" + bmFloor(itemData1.c.v[1]) + \",\" + bmFloor(itemData1.c.v[2]) + \")\";\n        }\n        if (itemData1.o._mdf || groupTransform1._opMdf || this._isFirstFrame) {\n            styleElem1.coOp = itemData1.o.v * groupTransform1.opacity;\n        }\n        if (itemData1.w._mdf || this._isFirstFrame) {\n            styleElem1.wi = itemData1.w.v;\n        }\n    };\n    CVShapeElement.prototype.destroy = function() {\n        this.shapesData = null;\n        this.globalData = null;\n        this.canvasContext = null;\n        this.stylesList.length = 0;\n        this.itemsData.length = 0;\n    };\n    function CVTextElement(data1, globalData1, comp1) {\n        this.textSpans = [];\n        this.yOffset = 0;\n        this.fillColorAnim = false;\n        this.strokeColorAnim = false;\n        this.strokeWidthAnim = false;\n        this.stroke = false;\n        this.fill = false;\n        this.justifyOffset = 0;\n        this.currentRender = null;\n        this.renderType = \"canvas\";\n        this.values = {\n            fill: \"rgba(0,0,0,0)\",\n            stroke: \"rgba(0,0,0,0)\",\n            sWidth: 0,\n            fValue: \"\"\n        };\n        this.initElement(data1, globalData1, comp1);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        CVBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableElement,\n        ITextElement\n    ], CVTextElement);\n    CVTextElement.prototype.tHelper = createTag(\"canvas\").getContext(\"2d\");\n    CVTextElement.prototype.buildNewText = function() {\n        var documentData1 = this.textProperty.currentData;\n        this.renderedLetters = createSizedArray(documentData1.l ? documentData1.l.length : 0);\n        var hasFill1 = false;\n        if (documentData1.fc) {\n            hasFill1 = true;\n            this.values.fill = this.buildColor(documentData1.fc);\n        } else {\n            this.values.fill = \"rgba(0,0,0,0)\";\n        }\n        this.fill = hasFill1;\n        var hasStroke1 = false;\n        if (documentData1.sc) {\n            hasStroke1 = true;\n            this.values.stroke = this.buildColor(documentData1.sc);\n            this.values.sWidth = documentData1.sw;\n        }\n        var fontData1 = this.globalData.fontManager.getFontByName(documentData1.f);\n        var i3;\n        var len1;\n        var letters1 = documentData1.l;\n        var matrixHelper1 = this.mHelper;\n        this.stroke = hasStroke1;\n        this.values.fValue = documentData1.finalSize + \"px \" + this.globalData.fontManager.getFontByName(documentData1.f).fFamily;\n        len1 = documentData1.finalText.length; // this.tHelper.font = this.values.fValue;\n        var charData1;\n        var shapeData1;\n        var k3;\n        var kLen1;\n        var shapes1;\n        var j3;\n        var jLen1;\n        var pathNodes1;\n        var commands1;\n        var pathArr1;\n        var singleShape1 = this.data.singleShape;\n        var trackingOffset1 = documentData1.tr * 0.001 * documentData1.finalSize;\n        var xPos1 = 0;\n        var yPos1 = 0;\n        var firstLine1 = true;\n        var cnt1 = 0;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            charData1 = this.globalData.fontManager.getCharData(documentData1.finalText[i3], fontData1.fStyle, this.globalData.fontManager.getFontByName(documentData1.f).fFamily);\n            shapeData1 = charData1 && charData1.data || {};\n            matrixHelper1.reset();\n            if (singleShape1 && letters1[i3].n) {\n                xPos1 = -trackingOffset1;\n                yPos1 += documentData1.yOffset;\n                yPos1 += firstLine1 ? 1 : 0;\n                firstLine1 = false;\n            }\n            shapes1 = shapeData1.shapes ? shapeData1.shapes[0].it : [];\n            jLen1 = shapes1.length;\n            matrixHelper1.scale(documentData1.finalSize / 100, documentData1.finalSize / 100);\n            if (singleShape1) {\n                this.applyTextPropertiesToMatrix(documentData1, matrixHelper1, letters1[i3].line, xPos1, yPos1);\n            }\n            commands1 = createSizedArray(jLen1 - 1);\n            var commandsCounter1 = 0;\n            for(j3 = 0; j3 < jLen1; j3 += 1){\n                if (shapes1[j3].ty === \"sh\") {\n                    kLen1 = shapes1[j3].ks.k.i.length;\n                    pathNodes1 = shapes1[j3].ks.k;\n                    pathArr1 = [];\n                    for(k3 = 1; k3 < kLen1; k3 += 1){\n                        if (k3 === 1) {\n                            pathArr1.push(matrixHelper1.applyToX(pathNodes1.v[0][0], pathNodes1.v[0][1], 0), matrixHelper1.applyToY(pathNodes1.v[0][0], pathNodes1.v[0][1], 0));\n                        }\n                        pathArr1.push(matrixHelper1.applyToX(pathNodes1.o[k3 - 1][0], pathNodes1.o[k3 - 1][1], 0), matrixHelper1.applyToY(pathNodes1.o[k3 - 1][0], pathNodes1.o[k3 - 1][1], 0), matrixHelper1.applyToX(pathNodes1.i[k3][0], pathNodes1.i[k3][1], 0), matrixHelper1.applyToY(pathNodes1.i[k3][0], pathNodes1.i[k3][1], 0), matrixHelper1.applyToX(pathNodes1.v[k3][0], pathNodes1.v[k3][1], 0), matrixHelper1.applyToY(pathNodes1.v[k3][0], pathNodes1.v[k3][1], 0));\n                    }\n                    pathArr1.push(matrixHelper1.applyToX(pathNodes1.o[k3 - 1][0], pathNodes1.o[k3 - 1][1], 0), matrixHelper1.applyToY(pathNodes1.o[k3 - 1][0], pathNodes1.o[k3 - 1][1], 0), matrixHelper1.applyToX(pathNodes1.i[0][0], pathNodes1.i[0][1], 0), matrixHelper1.applyToY(pathNodes1.i[0][0], pathNodes1.i[0][1], 0), matrixHelper1.applyToX(pathNodes1.v[0][0], pathNodes1.v[0][1], 0), matrixHelper1.applyToY(pathNodes1.v[0][0], pathNodes1.v[0][1], 0));\n                    commands1[commandsCounter1] = pathArr1;\n                    commandsCounter1 += 1;\n                }\n            }\n            if (singleShape1) {\n                xPos1 += letters1[i3].l;\n                xPos1 += trackingOffset1;\n            }\n            if (this.textSpans[cnt1]) {\n                this.textSpans[cnt1].elem = commands1;\n            } else {\n                this.textSpans[cnt1] = {\n                    elem: commands1\n                };\n            }\n            cnt1 += 1;\n        }\n    };\n    CVTextElement.prototype.renderInnerContent = function() {\n        this.validateText();\n        var ctx1 = this.canvasContext;\n        ctx1.font = this.values.fValue;\n        this.globalData.renderer.ctxLineCap(\"butt\"); // ctx.lineCap = 'butt';\n        this.globalData.renderer.ctxLineJoin(\"miter\"); // ctx.lineJoin = 'miter';\n        this.globalData.renderer.ctxMiterLimit(4); // ctx.miterLimit = 4;\n        if (!this.data.singleShape) {\n            this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);\n        }\n        var i3;\n        var len1;\n        var j3;\n        var jLen1;\n        var k3;\n        var kLen1;\n        var renderedLetters1 = this.textAnimator.renderedLetters;\n        var letters1 = this.textProperty.currentData.l;\n        len1 = letters1.length;\n        var renderedLetter1;\n        var lastFill1 = null;\n        var lastStroke1 = null;\n        var lastStrokeW1 = null;\n        var commands1;\n        var pathArr1;\n        var renderer1 = this.globalData.renderer;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (!letters1[i3].n) {\n                renderedLetter1 = renderedLetters1[i3];\n                if (renderedLetter1) {\n                    renderer1.save();\n                    renderer1.ctxTransform(renderedLetter1.p);\n                    renderer1.ctxOpacity(renderedLetter1.o);\n                }\n                if (this.fill) {\n                    if (renderedLetter1 && renderedLetter1.fc) {\n                        if (lastFill1 !== renderedLetter1.fc) {\n                            renderer1.ctxFillStyle(renderedLetter1.fc);\n                            lastFill1 = renderedLetter1.fc; // ctx.fillStyle = renderedLetter.fc;\n                        }\n                    } else if (lastFill1 !== this.values.fill) {\n                        lastFill1 = this.values.fill;\n                        renderer1.ctxFillStyle(this.values.fill); // ctx.fillStyle = this.values.fill;\n                    }\n                    commands1 = this.textSpans[i3].elem;\n                    jLen1 = commands1.length;\n                    this.globalData.canvasContext.beginPath();\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        pathArr1 = commands1[j3];\n                        kLen1 = pathArr1.length;\n                        this.globalData.canvasContext.moveTo(pathArr1[0], pathArr1[1]);\n                        for(k3 = 2; k3 < kLen1; k3 += 6){\n                            this.globalData.canvasContext.bezierCurveTo(pathArr1[k3], pathArr1[k3 + 1], pathArr1[k3 + 2], pathArr1[k3 + 3], pathArr1[k3 + 4], pathArr1[k3 + 5]);\n                        }\n                    }\n                    this.globalData.canvasContext.closePath();\n                    renderer1.ctxFill(); // this.globalData.canvasContext.fill();\n                /// ctx.fillText(this.textSpans[i].val,0,0);\n                }\n                if (this.stroke) {\n                    if (renderedLetter1 && renderedLetter1.sw) {\n                        if (lastStrokeW1 !== renderedLetter1.sw) {\n                            lastStrokeW1 = renderedLetter1.sw;\n                            renderer1.ctxLineWidth(renderedLetter1.sw); // ctx.lineWidth = renderedLetter.sw;\n                        }\n                    } else if (lastStrokeW1 !== this.values.sWidth) {\n                        lastStrokeW1 = this.values.sWidth;\n                        renderer1.ctxLineWidth(this.values.sWidth); // ctx.lineWidth = this.values.sWidth;\n                    }\n                    if (renderedLetter1 && renderedLetter1.sc) {\n                        if (lastStroke1 !== renderedLetter1.sc) {\n                            lastStroke1 = renderedLetter1.sc;\n                            renderer1.ctxStrokeStyle(renderedLetter1.sc); // ctx.strokeStyle = renderedLetter.sc;\n                        }\n                    } else if (lastStroke1 !== this.values.stroke) {\n                        lastStroke1 = this.values.stroke;\n                        renderer1.ctxStrokeStyle(this.values.stroke); // ctx.strokeStyle = this.values.stroke;\n                    }\n                    commands1 = this.textSpans[i3].elem;\n                    jLen1 = commands1.length;\n                    this.globalData.canvasContext.beginPath();\n                    for(j3 = 0; j3 < jLen1; j3 += 1){\n                        pathArr1 = commands1[j3];\n                        kLen1 = pathArr1.length;\n                        this.globalData.canvasContext.moveTo(pathArr1[0], pathArr1[1]);\n                        for(k3 = 2; k3 < kLen1; k3 += 6){\n                            this.globalData.canvasContext.bezierCurveTo(pathArr1[k3], pathArr1[k3 + 1], pathArr1[k3 + 2], pathArr1[k3 + 3], pathArr1[k3 + 4], pathArr1[k3 + 5]);\n                        }\n                    }\n                    this.globalData.canvasContext.closePath();\n                    renderer1.ctxStroke(); // this.globalData.canvasContext.stroke();\n                /// ctx.strokeText(letters[i].val,0,0);\n                }\n                if (renderedLetter1) {\n                    this.globalData.renderer.restore();\n                }\n            }\n        }\n    };\n    function CVImageElement(data1, globalData1, comp1) {\n        this.assetData = globalData1.getAssetData(data1.refId);\n        this.img = globalData1.imageLoader.getAsset(this.assetData);\n        this.initElement(data1, globalData1, comp1);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        CVBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableElement\n    ], CVImageElement);\n    CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;\n    CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;\n    CVImageElement.prototype.createContent = function() {\n        if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {\n            var canvas1 = createTag(\"canvas\");\n            canvas1.width = this.assetData.w;\n            canvas1.height = this.assetData.h;\n            var ctx1 = canvas1.getContext(\"2d\");\n            var imgW1 = this.img.width;\n            var imgH1 = this.img.height;\n            var imgRel1 = imgW1 / imgH1;\n            var canvasRel1 = this.assetData.w / this.assetData.h;\n            var widthCrop1;\n            var heightCrop1;\n            var par1 = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;\n            if (imgRel1 > canvasRel1 && par1 === \"xMidYMid slice\" || imgRel1 < canvasRel1 && par1 !== \"xMidYMid slice\") {\n                heightCrop1 = imgH1;\n                widthCrop1 = heightCrop1 * canvasRel1;\n            } else {\n                widthCrop1 = imgW1;\n                heightCrop1 = widthCrop1 / canvasRel1;\n            }\n            ctx1.drawImage(this.img, (imgW1 - widthCrop1) / 2, (imgH1 - heightCrop1) / 2, widthCrop1, heightCrop1, 0, 0, this.assetData.w, this.assetData.h);\n            this.img = canvas1;\n        }\n    };\n    CVImageElement.prototype.renderInnerContent = function() {\n        this.canvasContext.drawImage(this.img, 0, 0);\n    };\n    CVImageElement.prototype.destroy = function() {\n        this.img = null;\n    };\n    function CVSolidElement(data1, globalData1, comp1) {\n        this.initElement(data1, globalData1, comp1);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        CVBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableElement\n    ], CVSolidElement);\n    CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;\n    CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;\n    CVSolidElement.prototype.renderInnerContent = function() {\n        // var ctx = this.canvasContext;\n        this.globalData.renderer.ctxFillStyle(this.data.sc); // ctx.fillStyle = this.data.sc;\n        this.globalData.renderer.ctxFillRect(0, 0, this.data.sw, this.data.sh); // ctx.fillRect(0, 0, this.data.sw, this.data.sh);\n    //\n    };\n    function CanvasRendererBase() {}\n    extendPrototype([\n        BaseRenderer\n    ], CanvasRendererBase);\n    CanvasRendererBase.prototype.createShape = function(data1) {\n        return new CVShapeElement(data1, this.globalData, this);\n    };\n    CanvasRendererBase.prototype.createText = function(data1) {\n        return new CVTextElement(data1, this.globalData, this);\n    };\n    CanvasRendererBase.prototype.createImage = function(data1) {\n        return new CVImageElement(data1, this.globalData, this);\n    };\n    CanvasRendererBase.prototype.createSolid = function(data1) {\n        return new CVSolidElement(data1, this.globalData, this);\n    };\n    CanvasRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;\n    CanvasRendererBase.prototype.ctxTransform = function(props1) {\n        if (props1[0] === 1 && props1[1] === 0 && props1[4] === 0 && props1[5] === 1 && props1[12] === 0 && props1[13] === 0) {\n            return;\n        }\n        this.canvasContext.transform(props1[0], props1[1], props1[4], props1[5], props1[12], props1[13]);\n    };\n    CanvasRendererBase.prototype.ctxOpacity = function(op1) {\n        this.canvasContext.globalAlpha *= op1 < 0 ? 0 : op1;\n    };\n    CanvasRendererBase.prototype.ctxFillStyle = function(value3) {\n        this.canvasContext.fillStyle = value3;\n    };\n    CanvasRendererBase.prototype.ctxStrokeStyle = function(value3) {\n        this.canvasContext.strokeStyle = value3;\n    };\n    CanvasRendererBase.prototype.ctxLineWidth = function(value3) {\n        this.canvasContext.lineWidth = value3;\n    };\n    CanvasRendererBase.prototype.ctxLineCap = function(value3) {\n        this.canvasContext.lineCap = value3;\n    };\n    CanvasRendererBase.prototype.ctxLineJoin = function(value3) {\n        this.canvasContext.lineJoin = value3;\n    };\n    CanvasRendererBase.prototype.ctxMiterLimit = function(value3) {\n        this.canvasContext.miterLimit = value3;\n    };\n    CanvasRendererBase.prototype.ctxFill = function(rule1) {\n        this.canvasContext.fill(rule1);\n    };\n    CanvasRendererBase.prototype.ctxFillRect = function(x4, y4, w1, h3) {\n        this.canvasContext.fillRect(x4, y4, w1, h3);\n    };\n    CanvasRendererBase.prototype.ctxStroke = function() {\n        this.canvasContext.stroke();\n    };\n    CanvasRendererBase.prototype.reset = function() {\n        if (!this.renderConfig.clearCanvas) {\n            this.canvasContext.restore();\n            return;\n        }\n        this.contextData.reset();\n    };\n    CanvasRendererBase.prototype.save = function() {\n        this.canvasContext.save();\n    };\n    CanvasRendererBase.prototype.restore = function(actionFlag1) {\n        if (!this.renderConfig.clearCanvas) {\n            this.canvasContext.restore();\n            return;\n        }\n        if (actionFlag1) {\n            this.globalData.blendMode = \"source-over\";\n        }\n        this.contextData.restore(actionFlag1);\n    };\n    CanvasRendererBase.prototype.configAnimation = function(animData1) {\n        if (this.animationItem.wrapper) {\n            this.animationItem.container = createTag(\"canvas\");\n            var containerStyle1 = this.animationItem.container.style;\n            containerStyle1.width = \"100%\";\n            containerStyle1.height = \"100%\";\n            var origin1 = \"0px 0px 0px\";\n            containerStyle1.transformOrigin = origin1;\n            containerStyle1.mozTransformOrigin = origin1;\n            containerStyle1.webkitTransformOrigin = origin1;\n            containerStyle1[\"-webkit-transform\"] = origin1;\n            containerStyle1.contentVisibility = this.renderConfig.contentVisibility;\n            this.animationItem.wrapper.appendChild(this.animationItem.container);\n            this.canvasContext = this.animationItem.container.getContext(\"2d\");\n            if (this.renderConfig.className) {\n                this.animationItem.container.setAttribute(\"class\", this.renderConfig.className);\n            }\n            if (this.renderConfig.id) {\n                this.animationItem.container.setAttribute(\"id\", this.renderConfig.id);\n            }\n        } else {\n            this.canvasContext = this.renderConfig.context;\n        }\n        this.contextData.setContext(this.canvasContext);\n        this.data = animData1;\n        this.layers = animData1.layers;\n        this.transformCanvas = {\n            w: animData1.w,\n            h: animData1.h,\n            sx: 0,\n            sy: 0,\n            tx: 0,\n            ty: 0\n        };\n        this.setupGlobalData(animData1, document.body);\n        this.globalData.canvasContext = this.canvasContext;\n        this.globalData.renderer = this;\n        this.globalData.isDashed = false;\n        this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;\n        this.globalData.transformCanvas = this.transformCanvas;\n        this.elements = createSizedArray(animData1.layers.length);\n        this.updateContainerSize();\n    };\n    CanvasRendererBase.prototype.updateContainerSize = function(width1, height1) {\n        this.reset();\n        var elementWidth1;\n        var elementHeight1;\n        if (width1) {\n            elementWidth1 = width1;\n            elementHeight1 = height1;\n            this.canvasContext.canvas.width = elementWidth1;\n            this.canvasContext.canvas.height = elementHeight1;\n        } else {\n            if (this.animationItem.wrapper && this.animationItem.container) {\n                elementWidth1 = this.animationItem.wrapper.offsetWidth;\n                elementHeight1 = this.animationItem.wrapper.offsetHeight;\n            } else {\n                elementWidth1 = this.canvasContext.canvas.width;\n                elementHeight1 = this.canvasContext.canvas.height;\n            }\n            this.canvasContext.canvas.width = elementWidth1 * this.renderConfig.dpr;\n            this.canvasContext.canvas.height = elementHeight1 * this.renderConfig.dpr;\n        }\n        var elementRel1;\n        var animationRel1;\n        if (this.renderConfig.preserveAspectRatio.indexOf(\"meet\") !== -1 || this.renderConfig.preserveAspectRatio.indexOf(\"slice\") !== -1) {\n            var par1 = this.renderConfig.preserveAspectRatio.split(\" \");\n            var fillType1 = par1[1] || \"meet\";\n            var pos1 = par1[0] || \"xMidYMid\";\n            var xPos1 = pos1.substr(0, 4);\n            var yPos1 = pos1.substr(4);\n            elementRel1 = elementWidth1 / elementHeight1;\n            animationRel1 = this.transformCanvas.w / this.transformCanvas.h;\n            if (animationRel1 > elementRel1 && fillType1 === \"meet\" || animationRel1 < elementRel1 && fillType1 === \"slice\") {\n                this.transformCanvas.sx = elementWidth1 / (this.transformCanvas.w / this.renderConfig.dpr);\n                this.transformCanvas.sy = elementWidth1 / (this.transformCanvas.w / this.renderConfig.dpr);\n            } else {\n                this.transformCanvas.sx = elementHeight1 / (this.transformCanvas.h / this.renderConfig.dpr);\n                this.transformCanvas.sy = elementHeight1 / (this.transformCanvas.h / this.renderConfig.dpr);\n            }\n            if (xPos1 === \"xMid\" && (animationRel1 < elementRel1 && fillType1 === \"meet\" || animationRel1 > elementRel1 && fillType1 === \"slice\")) {\n                this.transformCanvas.tx = (elementWidth1 - this.transformCanvas.w * (elementHeight1 / this.transformCanvas.h)) / 2 * this.renderConfig.dpr;\n            } else if (xPos1 === \"xMax\" && (animationRel1 < elementRel1 && fillType1 === \"meet\" || animationRel1 > elementRel1 && fillType1 === \"slice\")) {\n                this.transformCanvas.tx = (elementWidth1 - this.transformCanvas.w * (elementHeight1 / this.transformCanvas.h)) * this.renderConfig.dpr;\n            } else {\n                this.transformCanvas.tx = 0;\n            }\n            if (yPos1 === \"YMid\" && (animationRel1 > elementRel1 && fillType1 === \"meet\" || animationRel1 < elementRel1 && fillType1 === \"slice\")) {\n                this.transformCanvas.ty = (elementHeight1 - this.transformCanvas.h * (elementWidth1 / this.transformCanvas.w)) / 2 * this.renderConfig.dpr;\n            } else if (yPos1 === \"YMax\" && (animationRel1 > elementRel1 && fillType1 === \"meet\" || animationRel1 < elementRel1 && fillType1 === \"slice\")) {\n                this.transformCanvas.ty = (elementHeight1 - this.transformCanvas.h * (elementWidth1 / this.transformCanvas.w)) * this.renderConfig.dpr;\n            } else {\n                this.transformCanvas.ty = 0;\n            }\n        } else if (this.renderConfig.preserveAspectRatio === \"none\") {\n            this.transformCanvas.sx = elementWidth1 / (this.transformCanvas.w / this.renderConfig.dpr);\n            this.transformCanvas.sy = elementHeight1 / (this.transformCanvas.h / this.renderConfig.dpr);\n            this.transformCanvas.tx = 0;\n            this.transformCanvas.ty = 0;\n        } else {\n            this.transformCanvas.sx = this.renderConfig.dpr;\n            this.transformCanvas.sy = this.renderConfig.dpr;\n            this.transformCanvas.tx = 0;\n            this.transformCanvas.ty = 0;\n        }\n        this.transformCanvas.props = [\n            this.transformCanvas.sx,\n            0,\n            0,\n            0,\n            0,\n            this.transformCanvas.sy,\n            0,\n            0,\n            0,\n            0,\n            1,\n            0,\n            this.transformCanvas.tx,\n            this.transformCanvas.ty,\n            0,\n            1\n        ];\n        /* var i, len = this.elements.length;\r\n      for(i=0;i<len;i+=1){\r\n          if(this.elements[i] && this.elements[i].data.ty === 0){\r\n              this.elements[i].resize(this.globalData.transformCanvas);\r\n          }\r\n      } */ this.ctxTransform(this.transformCanvas.props);\n        this.canvasContext.beginPath();\n        this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h);\n        this.canvasContext.closePath();\n        this.canvasContext.clip();\n        this.renderFrame(this.renderedFrame, true);\n    };\n    CanvasRendererBase.prototype.destroy = function() {\n        if (this.renderConfig.clearCanvas && this.animationItem.wrapper) {\n            this.animationItem.wrapper.innerText = \"\";\n        }\n        var i3;\n        var len1 = this.layers ? this.layers.length : 0;\n        for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n            if (this.elements[i3] && this.elements[i3].destroy) {\n                this.elements[i3].destroy();\n            }\n        }\n        this.elements.length = 0;\n        this.globalData.canvasContext = null;\n        this.animationItem.container = null;\n        this.destroyed = true;\n    };\n    CanvasRendererBase.prototype.renderFrame = function(num1, forceRender1) {\n        if (this.renderedFrame === num1 && this.renderConfig.clearCanvas === true && !forceRender1 || this.destroyed || num1 === -1) {\n            return;\n        }\n        this.renderedFrame = num1;\n        this.globalData.frameNum = num1 - this.animationItem._isFirstFrame;\n        this.globalData.frameId += 1;\n        this.globalData._mdf = !this.renderConfig.clearCanvas || forceRender1;\n        this.globalData.projectInterface.currentFrame = num1; // console.log('--------');\n        // console.log('NEW: ',num);\n        var i3;\n        var len1 = this.layers.length;\n        if (!this.completeLayers) {\n            this.checkLayers(num1);\n        }\n        for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n            if (this.completeLayers || this.elements[i3]) {\n                this.elements[i3].prepareFrame(num1 - this.layers[i3].st);\n            }\n        }\n        if (this.globalData._mdf) {\n            if (this.renderConfig.clearCanvas === true) {\n                this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);\n            } else {\n                this.save();\n            }\n            for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n                if (this.completeLayers || this.elements[i3]) {\n                    this.elements[i3].renderFrame();\n                }\n            }\n            if (this.renderConfig.clearCanvas !== true) {\n                this.restore();\n            }\n        }\n    };\n    CanvasRendererBase.prototype.buildItem = function(pos1) {\n        var elements1 = this.elements;\n        if (elements1[pos1] || this.layers[pos1].ty === 99) {\n            return;\n        }\n        var element1 = this.createItem(this.layers[pos1], this, this.globalData);\n        elements1[pos1] = element1;\n        element1.initExpressions();\n    /* if(this.layers[pos].ty === 0){\r\n          element.resize(this.globalData.transformCanvas);\r\n      } */ };\n    CanvasRendererBase.prototype.checkPendingElements = function() {\n        while(this.pendingElements.length){\n            var element1 = this.pendingElements.pop();\n            element1.checkParenting();\n        }\n    };\n    CanvasRendererBase.prototype.hide = function() {\n        this.animationItem.container.style.display = \"none\";\n    };\n    CanvasRendererBase.prototype.show = function() {\n        this.animationItem.container.style.display = \"block\";\n    };\n    function CanvasContext() {\n        this.opacity = -1;\n        this.transform = createTypedArray(\"float32\", 16);\n        this.fillStyle = \"\";\n        this.strokeStyle = \"\";\n        this.lineWidth = \"\";\n        this.lineCap = \"\";\n        this.lineJoin = \"\";\n        this.miterLimit = \"\";\n        this.id = Math.random();\n    }\n    function CVContextData() {\n        this.stack = [];\n        this.cArrPos = 0;\n        this.cTr = new Matrix();\n        var i3;\n        var len1 = 15;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            var canvasContext1 = new CanvasContext();\n            this.stack[i3] = canvasContext1;\n        }\n        this._length = len1;\n        this.nativeContext = null;\n        this.transformMat = new Matrix();\n        this.currentOpacity = 1; //\n        this.currentFillStyle = \"\";\n        this.appliedFillStyle = \"\"; //\n        this.currentStrokeStyle = \"\";\n        this.appliedStrokeStyle = \"\"; //\n        this.currentLineWidth = \"\";\n        this.appliedLineWidth = \"\"; //\n        this.currentLineCap = \"\";\n        this.appliedLineCap = \"\"; //\n        this.currentLineJoin = \"\";\n        this.appliedLineJoin = \"\"; //\n        this.appliedMiterLimit = \"\";\n        this.currentMiterLimit = \"\";\n    }\n    CVContextData.prototype.duplicate = function() {\n        var newLength1 = this._length * 2;\n        var i3 = 0;\n        for(i3 = this._length; i3 < newLength1; i3 += 1){\n            this.stack[i3] = new CanvasContext();\n        }\n        this._length = newLength1;\n    };\n    CVContextData.prototype.reset = function() {\n        this.cArrPos = 0;\n        this.cTr.reset();\n        this.stack[this.cArrPos].opacity = 1;\n    };\n    CVContextData.prototype.restore = function(forceRestore1) {\n        this.cArrPos -= 1;\n        var currentContext1 = this.stack[this.cArrPos];\n        var transform1 = currentContext1.transform;\n        var i3;\n        var arr3 = this.cTr.props;\n        for(i3 = 0; i3 < 16; i3 += 1){\n            arr3[i3] = transform1[i3];\n        }\n        if (forceRestore1) {\n            this.nativeContext.restore();\n            var prevStack1 = this.stack[this.cArrPos + 1];\n            this.appliedFillStyle = prevStack1.fillStyle;\n            this.appliedStrokeStyle = prevStack1.strokeStyle;\n            this.appliedLineWidth = prevStack1.lineWidth;\n            this.appliedLineCap = prevStack1.lineCap;\n            this.appliedLineJoin = prevStack1.lineJoin;\n            this.appliedMiterLimit = prevStack1.miterLimit;\n        }\n        this.nativeContext.setTransform(transform1[0], transform1[1], transform1[4], transform1[5], transform1[12], transform1[13]);\n        if (forceRestore1 || currentContext1.opacity !== -1 && this.currentOpacity !== currentContext1.opacity) {\n            this.nativeContext.globalAlpha = currentContext1.opacity;\n            this.currentOpacity = currentContext1.opacity;\n        }\n        this.currentFillStyle = currentContext1.fillStyle;\n        this.currentStrokeStyle = currentContext1.strokeStyle;\n        this.currentLineWidth = currentContext1.lineWidth;\n        this.currentLineCap = currentContext1.lineCap;\n        this.currentLineJoin = currentContext1.lineJoin;\n        this.currentMiterLimit = currentContext1.miterLimit;\n    };\n    CVContextData.prototype.save = function(saveOnNativeFlag1) {\n        if (saveOnNativeFlag1) {\n            this.nativeContext.save();\n        }\n        var props1 = this.cTr.props;\n        if (this._length <= this.cArrPos) {\n            this.duplicate();\n        }\n        var currentStack1 = this.stack[this.cArrPos];\n        var i3;\n        for(i3 = 0; i3 < 16; i3 += 1){\n            currentStack1.transform[i3] = props1[i3];\n        }\n        this.cArrPos += 1;\n        var newStack1 = this.stack[this.cArrPos];\n        newStack1.opacity = currentStack1.opacity;\n        newStack1.fillStyle = currentStack1.fillStyle;\n        newStack1.strokeStyle = currentStack1.strokeStyle;\n        newStack1.lineWidth = currentStack1.lineWidth;\n        newStack1.lineCap = currentStack1.lineCap;\n        newStack1.lineJoin = currentStack1.lineJoin;\n        newStack1.miterLimit = currentStack1.miterLimit;\n    };\n    CVContextData.prototype.setOpacity = function(value3) {\n        this.stack[this.cArrPos].opacity = value3;\n    };\n    CVContextData.prototype.setContext = function(value3) {\n        this.nativeContext = value3;\n    };\n    CVContextData.prototype.fillStyle = function(value3) {\n        if (this.stack[this.cArrPos].fillStyle !== value3) {\n            this.currentFillStyle = value3;\n            this.stack[this.cArrPos].fillStyle = value3;\n        }\n    };\n    CVContextData.prototype.strokeStyle = function(value3) {\n        if (this.stack[this.cArrPos].strokeStyle !== value3) {\n            this.currentStrokeStyle = value3;\n            this.stack[this.cArrPos].strokeStyle = value3;\n        }\n    };\n    CVContextData.prototype.lineWidth = function(value3) {\n        if (this.stack[this.cArrPos].lineWidth !== value3) {\n            this.currentLineWidth = value3;\n            this.stack[this.cArrPos].lineWidth = value3;\n        }\n    };\n    CVContextData.prototype.lineCap = function(value3) {\n        if (this.stack[this.cArrPos].lineCap !== value3) {\n            this.currentLineCap = value3;\n            this.stack[this.cArrPos].lineCap = value3;\n        }\n    };\n    CVContextData.prototype.lineJoin = function(value3) {\n        if (this.stack[this.cArrPos].lineJoin !== value3) {\n            this.currentLineJoin = value3;\n            this.stack[this.cArrPos].lineJoin = value3;\n        }\n    };\n    CVContextData.prototype.miterLimit = function(value3) {\n        if (this.stack[this.cArrPos].miterLimit !== value3) {\n            this.currentMiterLimit = value3;\n            this.stack[this.cArrPos].miterLimit = value3;\n        }\n    };\n    CVContextData.prototype.transform = function(props1) {\n        this.transformMat.cloneFromProps(props1); // Taking the last transform value from the stored stack of transforms\n        var currentTransform1 = this.cTr; // Applying the last transform value after the new transform to respect the order of transformations\n        this.transformMat.multiply(currentTransform1); // Storing the new transformed value in the stored transform\n        currentTransform1.cloneFromProps(this.transformMat.props);\n        var trProps1 = currentTransform1.props; // Applying the new transform to the canvas\n        this.nativeContext.setTransform(trProps1[0], trProps1[1], trProps1[4], trProps1[5], trProps1[12], trProps1[13]);\n    };\n    CVContextData.prototype.opacity = function(op1) {\n        var currentOpacity1 = this.stack[this.cArrPos].opacity;\n        currentOpacity1 *= op1 < 0 ? 0 : op1;\n        if (this.stack[this.cArrPos].opacity !== currentOpacity1) {\n            if (this.currentOpacity !== op1) {\n                this.nativeContext.globalAlpha = op1;\n                this.currentOpacity = op1;\n            }\n            this.stack[this.cArrPos].opacity = currentOpacity1;\n        }\n    };\n    CVContextData.prototype.fill = function(rule1) {\n        if (this.appliedFillStyle !== this.currentFillStyle) {\n            this.appliedFillStyle = this.currentFillStyle;\n            this.nativeContext.fillStyle = this.appliedFillStyle;\n        }\n        this.nativeContext.fill(rule1);\n    };\n    CVContextData.prototype.fillRect = function(x4, y4, w1, h3) {\n        if (this.appliedFillStyle !== this.currentFillStyle) {\n            this.appliedFillStyle = this.currentFillStyle;\n            this.nativeContext.fillStyle = this.appliedFillStyle;\n        }\n        this.nativeContext.fillRect(x4, y4, w1, h3);\n    };\n    CVContextData.prototype.stroke = function() {\n        if (this.appliedStrokeStyle !== this.currentStrokeStyle) {\n            this.appliedStrokeStyle = this.currentStrokeStyle;\n            this.nativeContext.strokeStyle = this.appliedStrokeStyle;\n        }\n        if (this.appliedLineWidth !== this.currentLineWidth) {\n            this.appliedLineWidth = this.currentLineWidth;\n            this.nativeContext.lineWidth = this.appliedLineWidth;\n        }\n        if (this.appliedLineCap !== this.currentLineCap) {\n            this.appliedLineCap = this.currentLineCap;\n            this.nativeContext.lineCap = this.appliedLineCap;\n        }\n        if (this.appliedLineJoin !== this.currentLineJoin) {\n            this.appliedLineJoin = this.currentLineJoin;\n            this.nativeContext.lineJoin = this.appliedLineJoin;\n        }\n        if (this.appliedMiterLimit !== this.currentMiterLimit) {\n            this.appliedMiterLimit = this.currentMiterLimit;\n            this.nativeContext.miterLimit = this.appliedMiterLimit;\n        }\n        this.nativeContext.stroke();\n    };\n    function CVCompElement(data1, globalData1, comp1) {\n        this.completeLayers = false;\n        this.layers = data1.layers;\n        this.pendingElements = [];\n        this.elements = createSizedArray(this.layers.length);\n        this.initElement(data1, globalData1, comp1);\n        this.tm = data1.tm ? PropertyFactory.getProp(this, data1.tm, 0, globalData1.frameRate, this) : {\n            _placeholder: true\n        };\n    }\n    extendPrototype([\n        CanvasRendererBase,\n        ICompElement,\n        CVBaseElement\n    ], CVCompElement);\n    CVCompElement.prototype.renderInnerContent = function() {\n        var ctx1 = this.canvasContext;\n        ctx1.beginPath();\n        ctx1.moveTo(0, 0);\n        ctx1.lineTo(this.data.w, 0);\n        ctx1.lineTo(this.data.w, this.data.h);\n        ctx1.lineTo(0, this.data.h);\n        ctx1.lineTo(0, 0);\n        ctx1.clip();\n        var i3;\n        var len1 = this.layers.length;\n        for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n            if (this.completeLayers || this.elements[i3]) {\n                this.elements[i3].renderFrame();\n            }\n        }\n    };\n    CVCompElement.prototype.destroy = function() {\n        var i3;\n        var len1 = this.layers.length;\n        for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n            if (this.elements[i3]) {\n                this.elements[i3].destroy();\n            }\n        }\n        this.layers = null;\n        this.elements = null;\n    };\n    CVCompElement.prototype.createComp = function(data1) {\n        return new CVCompElement(data1, this.globalData, this);\n    };\n    function CanvasRenderer(animationItem1, config1) {\n        this.animationItem = animationItem1;\n        this.renderConfig = {\n            clearCanvas: config1 && config1.clearCanvas !== undefined ? config1.clearCanvas : true,\n            context: config1 && config1.context || null,\n            progressiveLoad: config1 && config1.progressiveLoad || false,\n            preserveAspectRatio: config1 && config1.preserveAspectRatio || \"xMidYMid meet\",\n            imagePreserveAspectRatio: config1 && config1.imagePreserveAspectRatio || \"xMidYMid slice\",\n            contentVisibility: config1 && config1.contentVisibility || \"visible\",\n            className: config1 && config1.className || \"\",\n            id: config1 && config1.id || \"\",\n            runExpressions: !config1 || config1.runExpressions === undefined || config1.runExpressions\n        };\n        this.renderConfig.dpr = config1 && config1.dpr || 1;\n        if (this.animationItem.wrapper) {\n            this.renderConfig.dpr = config1 && config1.dpr || window.devicePixelRatio || 1;\n        }\n        this.renderedFrame = -1;\n        this.globalData = {\n            frameNum: -1,\n            _mdf: false,\n            renderConfig: this.renderConfig,\n            currentGlobalAlpha: -1\n        };\n        this.contextData = new CVContextData();\n        this.elements = [];\n        this.pendingElements = [];\n        this.transformMat = new Matrix();\n        this.completeLayers = false;\n        this.rendererType = \"canvas\";\n        if (this.renderConfig.clearCanvas) {\n            this.ctxTransform = this.contextData.transform.bind(this.contextData);\n            this.ctxOpacity = this.contextData.opacity.bind(this.contextData);\n            this.ctxFillStyle = this.contextData.fillStyle.bind(this.contextData);\n            this.ctxStrokeStyle = this.contextData.strokeStyle.bind(this.contextData);\n            this.ctxLineWidth = this.contextData.lineWidth.bind(this.contextData);\n            this.ctxLineCap = this.contextData.lineCap.bind(this.contextData);\n            this.ctxLineJoin = this.contextData.lineJoin.bind(this.contextData);\n            this.ctxMiterLimit = this.contextData.miterLimit.bind(this.contextData);\n            this.ctxFill = this.contextData.fill.bind(this.contextData);\n            this.ctxFillRect = this.contextData.fillRect.bind(this.contextData);\n            this.ctxStroke = this.contextData.stroke.bind(this.contextData);\n            this.save = this.contextData.save.bind(this.contextData);\n        }\n    }\n    extendPrototype([\n        CanvasRendererBase\n    ], CanvasRenderer);\n    CanvasRenderer.prototype.createComp = function(data1) {\n        return new CVCompElement(data1, this.globalData, this);\n    };\n    function HBaseElement() {}\n    HBaseElement.prototype = {\n        checkBlendMode: function checkBlendMode1() {},\n        initRendererElement: function initRendererElement1() {\n            this.baseElement = createTag(this.data.tg || \"div\");\n            if (this.data.hasMask) {\n                this.svgElement = createNS(\"svg\");\n                this.layerElement = createNS(\"g\");\n                this.maskedElement = this.layerElement;\n                this.svgElement.appendChild(this.layerElement);\n                this.baseElement.appendChild(this.svgElement);\n            } else {\n                this.layerElement = this.baseElement;\n            }\n            styleDiv(this.baseElement);\n        },\n        createContainerElements: function createContainerElements1() {\n            this.renderableEffectsManager = new CVEffects(this);\n            this.transformedElement = this.baseElement;\n            this.maskedElement = this.layerElement;\n            if (this.data.ln) {\n                this.layerElement.setAttribute(\"id\", this.data.ln);\n            }\n            if (this.data.cl) {\n                this.layerElement.setAttribute(\"class\", this.data.cl);\n            }\n            if (this.data.bm !== 0) {\n                this.setBlendMode();\n            }\n        },\n        renderElement: function renderElement1() {\n            var transformedElementStyle1 = this.transformedElement ? this.transformedElement.style : {};\n            if (this.finalTransform._matMdf) {\n                var matrixValue1 = this.finalTransform.mat.toCSS();\n                transformedElementStyle1.transform = matrixValue1;\n                transformedElementStyle1.webkitTransform = matrixValue1;\n            }\n            if (this.finalTransform._opMdf) {\n                transformedElementStyle1.opacity = this.finalTransform.mProp.o.v;\n            }\n        },\n        renderFrame: function renderFrame1() {\n            // If it is exported as hidden (data.hd === true) no need to render\n            // If it is not visible no need to render\n            if (this.data.hd || this.hidden) {\n                return;\n            }\n            this.renderTransform();\n            this.renderRenderable();\n            this.renderElement();\n            this.renderInnerContent();\n            if (this._isFirstFrame) {\n                this._isFirstFrame = false;\n            }\n        },\n        destroy: function destroy1() {\n            this.layerElement = null;\n            this.transformedElement = null;\n            if (this.matteElement) {\n                this.matteElement = null;\n            }\n            if (this.maskManager) {\n                this.maskManager.destroy();\n                this.maskManager = null;\n            }\n        },\n        createRenderableComponents: function createRenderableComponents1() {\n            this.maskManager = new MaskElement(this.data, this, this.globalData);\n        },\n        addEffects: function addEffects1() {},\n        setMatte: function setMatte1() {}\n    };\n    HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;\n    HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;\n    HBaseElement.prototype.buildElementParenting = BaseRenderer.prototype.buildElementParenting;\n    function HSolidElement(data1, globalData1, comp1) {\n        this.initElement(data1, globalData1, comp1);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        HBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableDOMElement\n    ], HSolidElement);\n    HSolidElement.prototype.createContent = function() {\n        var rect1;\n        if (this.data.hasMask) {\n            rect1 = createNS(\"rect\");\n            rect1.setAttribute(\"width\", this.data.sw);\n            rect1.setAttribute(\"height\", this.data.sh);\n            rect1.setAttribute(\"fill\", this.data.sc);\n            this.svgElement.setAttribute(\"width\", this.data.sw);\n            this.svgElement.setAttribute(\"height\", this.data.sh);\n        } else {\n            rect1 = createTag(\"div\");\n            rect1.style.width = this.data.sw + \"px\";\n            rect1.style.height = this.data.sh + \"px\";\n            rect1.style.backgroundColor = this.data.sc;\n        }\n        this.layerElement.appendChild(rect1);\n    };\n    function HShapeElement(data1, globalData1, comp1) {\n        // List of drawable elements\n        this.shapes = []; // Full shape data\n        this.shapesData = data1.shapes; // List of styles that will be applied to shapes\n        this.stylesList = []; // List of modifiers that will be applied to shapes\n        this.shapeModifiers = []; // List of items in shape tree\n        this.itemsData = []; // List of items in previous shape tree\n        this.processedElements = []; // List of animated components\n        this.animatedContents = [];\n        this.shapesContainer = createNS(\"g\");\n        this.initElement(data1, globalData1, comp1); // Moving any property that doesn't get too much access after initialization because of v8 way of handling more than 10 properties.\n        // List of elements that have been created\n        this.prevViewData = [];\n        this.currentBBox = {\n            x: 999999,\n            y: -999999,\n            h: 0,\n            w: 0\n        };\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        HSolidElement,\n        SVGShapeElement,\n        HBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableElement\n    ], HShapeElement);\n    HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;\n    HShapeElement.prototype.createContent = function() {\n        var cont1;\n        this.baseElement.style.fontSize = 0;\n        if (this.data.hasMask) {\n            this.layerElement.appendChild(this.shapesContainer);\n            cont1 = this.svgElement;\n        } else {\n            cont1 = createNS(\"svg\");\n            var size1 = this.comp.data ? this.comp.data : this.globalData.compSize;\n            cont1.setAttribute(\"width\", size1.w);\n            cont1.setAttribute(\"height\", size1.h);\n            cont1.appendChild(this.shapesContainer);\n            this.layerElement.appendChild(cont1);\n        }\n        this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], true);\n        this.filterUniqueShapes();\n        this.shapeCont = cont1;\n    };\n    HShapeElement.prototype.getTransformedPoint = function(transformers1, point1) {\n        var i3;\n        var len1 = transformers1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            point1 = transformers1[i3].mProps.v.applyToPointArray(point1[0], point1[1], 0);\n        }\n        return point1;\n    };\n    HShapeElement.prototype.calculateShapeBoundingBox = function(item1, boundingBox1) {\n        var shape3 = item1.sh.v;\n        var transformers1 = item1.transformers;\n        var i3;\n        var len1 = shape3._length;\n        var vPoint1;\n        var oPoint1;\n        var nextIPoint1;\n        var nextVPoint1;\n        if (len1 <= 1) {\n            return;\n        }\n        for(i3 = 0; i3 < len1 - 1; i3 += 1){\n            vPoint1 = this.getTransformedPoint(transformers1, shape3.v[i3]);\n            oPoint1 = this.getTransformedPoint(transformers1, shape3.o[i3]);\n            nextIPoint1 = this.getTransformedPoint(transformers1, shape3.i[i3 + 1]);\n            nextVPoint1 = this.getTransformedPoint(transformers1, shape3.v[i3 + 1]);\n            this.checkBounds(vPoint1, oPoint1, nextIPoint1, nextVPoint1, boundingBox1);\n        }\n        if (shape3.c) {\n            vPoint1 = this.getTransformedPoint(transformers1, shape3.v[i3]);\n            oPoint1 = this.getTransformedPoint(transformers1, shape3.o[i3]);\n            nextIPoint1 = this.getTransformedPoint(transformers1, shape3.i[0]);\n            nextVPoint1 = this.getTransformedPoint(transformers1, shape3.v[0]);\n            this.checkBounds(vPoint1, oPoint1, nextIPoint1, nextVPoint1, boundingBox1);\n        }\n    };\n    HShapeElement.prototype.checkBounds = function(vPoint1, oPoint1, nextIPoint1, nextVPoint1, boundingBox1) {\n        this.getBoundsOfCurve(vPoint1, oPoint1, nextIPoint1, nextVPoint1);\n        var bounds1 = this.shapeBoundingBox;\n        boundingBox1.x = bmMin(bounds1.left, boundingBox1.x);\n        boundingBox1.xMax = bmMax(bounds1.right, boundingBox1.xMax);\n        boundingBox1.y = bmMin(bounds1.top, boundingBox1.y);\n        boundingBox1.yMax = bmMax(bounds1.bottom, boundingBox1.yMax);\n    };\n    HShapeElement.prototype.shapeBoundingBox = {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n    };\n    HShapeElement.prototype.tempBoundingBox = {\n        x: 0,\n        xMax: 0,\n        y: 0,\n        yMax: 0,\n        width: 0,\n        height: 0\n    };\n    HShapeElement.prototype.getBoundsOfCurve = function(p01, p14, p22, p31) {\n        var bounds1 = [\n            [\n                p01[0],\n                p31[0]\n            ],\n            [\n                p01[1],\n                p31[1]\n            ]\n        ];\n        for(var a3, b3, c4, t3, b2ac1, t11, t21, i3 = 0; i3 < 2; ++i3){\n            // eslint-disable-line no-plusplus\n            b3 = 6 * p01[i3] - 12 * p14[i3] + 6 * p22[i3];\n            a3 = -3 * p01[i3] + 9 * p14[i3] - 9 * p22[i3] + 3 * p31[i3];\n            c4 = 3 * p14[i3] - 3 * p01[i3];\n            b3 |= 0; // eslint-disable-line no-bitwise\n            a3 |= 0; // eslint-disable-line no-bitwise\n            c4 |= 0; // eslint-disable-line no-bitwise\n            if (a3 === 0 && b3 === 0) {} else if (a3 === 0) {\n                t3 = -c4 / b3;\n                if (t3 > 0 && t3 < 1) {\n                    bounds1[i3].push(this.calculateF(t3, p01, p14, p22, p31, i3));\n                }\n            } else {\n                b2ac1 = b3 * b3 - 4 * c4 * a3;\n                if (b2ac1 >= 0) {\n                    t11 = (-b3 + bmSqrt(b2ac1)) / (2 * a3);\n                    if (t11 > 0 && t11 < 1) bounds1[i3].push(this.calculateF(t11, p01, p14, p22, p31, i3));\n                    t21 = (-b3 - bmSqrt(b2ac1)) / (2 * a3);\n                    if (t21 > 0 && t21 < 1) bounds1[i3].push(this.calculateF(t21, p01, p14, p22, p31, i3));\n                }\n            }\n        }\n        this.shapeBoundingBox.left = bmMin.apply(null, bounds1[0]);\n        this.shapeBoundingBox.top = bmMin.apply(null, bounds1[1]);\n        this.shapeBoundingBox.right = bmMax.apply(null, bounds1[0]);\n        this.shapeBoundingBox.bottom = bmMax.apply(null, bounds1[1]);\n    };\n    HShapeElement.prototype.calculateF = function(t3, p01, p14, p22, p31, i3) {\n        return bmPow(1 - t3, 3) * p01[i3] + 3 * bmPow(1 - t3, 2) * t3 * p14[i3] + 3 * (1 - t3) * bmPow(t3, 2) * p22[i3] + bmPow(t3, 3) * p31[i3];\n    };\n    HShapeElement.prototype.calculateBoundingBox = function(itemsData1, boundingBox1) {\n        var i3;\n        var len1 = itemsData1.length;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (itemsData1[i3] && itemsData1[i3].sh) {\n                this.calculateShapeBoundingBox(itemsData1[i3], boundingBox1);\n            } else if (itemsData1[i3] && itemsData1[i3].it) {\n                this.calculateBoundingBox(itemsData1[i3].it, boundingBox1);\n            } else if (itemsData1[i3] && itemsData1[i3].style && itemsData1[i3].w) {\n                this.expandStrokeBoundingBox(itemsData1[i3].w, boundingBox1);\n            }\n        }\n    };\n    HShapeElement.prototype.expandStrokeBoundingBox = function(widthProperty1, boundingBox1) {\n        var width1 = 0;\n        if (widthProperty1.keyframes) {\n            for(var i3 = 0; i3 < widthProperty1.keyframes.length; i3 += 1){\n                var kfw1 = widthProperty1.keyframes[i3].s;\n                if (kfw1 > width1) {\n                    width1 = kfw1;\n                }\n            }\n            width1 *= widthProperty1.mult;\n        } else {\n            width1 = widthProperty1.v * widthProperty1.mult;\n        }\n        boundingBox1.x -= width1;\n        boundingBox1.xMax += width1;\n        boundingBox1.y -= width1;\n        boundingBox1.yMax += width1;\n    };\n    HShapeElement.prototype.currentBoxContains = function(box1) {\n        return this.currentBBox.x <= box1.x && this.currentBBox.y <= box1.y && this.currentBBox.width + this.currentBBox.x >= box1.x + box1.width && this.currentBBox.height + this.currentBBox.y >= box1.y + box1.height;\n    };\n    HShapeElement.prototype.renderInnerContent = function() {\n        this._renderShapeFrame();\n        if (!this.hidden && (this._isFirstFrame || this._mdf)) {\n            var tempBoundingBox1 = this.tempBoundingBox;\n            var max1 = 999999;\n            tempBoundingBox1.x = max1;\n            tempBoundingBox1.xMax = -max1;\n            tempBoundingBox1.y = max1;\n            tempBoundingBox1.yMax = -max1;\n            this.calculateBoundingBox(this.itemsData, tempBoundingBox1);\n            tempBoundingBox1.width = tempBoundingBox1.xMax < tempBoundingBox1.x ? 0 : tempBoundingBox1.xMax - tempBoundingBox1.x;\n            tempBoundingBox1.height = tempBoundingBox1.yMax < tempBoundingBox1.y ? 0 : tempBoundingBox1.yMax - tempBoundingBox1.y; // var tempBoundingBox = this.shapeCont.getBBox();\n            if (this.currentBoxContains(tempBoundingBox1)) {\n                return;\n            }\n            var changed1 = false;\n            if (this.currentBBox.w !== tempBoundingBox1.width) {\n                this.currentBBox.w = tempBoundingBox1.width;\n                this.shapeCont.setAttribute(\"width\", tempBoundingBox1.width);\n                changed1 = true;\n            }\n            if (this.currentBBox.h !== tempBoundingBox1.height) {\n                this.currentBBox.h = tempBoundingBox1.height;\n                this.shapeCont.setAttribute(\"height\", tempBoundingBox1.height);\n                changed1 = true;\n            }\n            if (changed1 || this.currentBBox.x !== tempBoundingBox1.x || this.currentBBox.y !== tempBoundingBox1.y) {\n                this.currentBBox.w = tempBoundingBox1.width;\n                this.currentBBox.h = tempBoundingBox1.height;\n                this.currentBBox.x = tempBoundingBox1.x;\n                this.currentBBox.y = tempBoundingBox1.y;\n                this.shapeCont.setAttribute(\"viewBox\", this.currentBBox.x + \" \" + this.currentBBox.y + \" \" + this.currentBBox.w + \" \" + this.currentBBox.h);\n                var shapeStyle1 = this.shapeCont.style;\n                var shapeTransform1 = \"translate(\" + this.currentBBox.x + \"px,\" + this.currentBBox.y + \"px)\";\n                shapeStyle1.transform = shapeTransform1;\n                shapeStyle1.webkitTransform = shapeTransform1;\n            }\n        }\n    };\n    function HTextElement(data1, globalData1, comp1) {\n        this.textSpans = [];\n        this.textPaths = [];\n        this.currentBBox = {\n            x: 999999,\n            y: -999999,\n            h: 0,\n            w: 0\n        };\n        this.renderType = \"svg\";\n        this.isMasked = false;\n        this.initElement(data1, globalData1, comp1);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        HBaseElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableDOMElement,\n        ITextElement\n    ], HTextElement);\n    HTextElement.prototype.createContent = function() {\n        this.isMasked = this.checkMasks();\n        if (this.isMasked) {\n            this.renderType = \"svg\";\n            this.compW = this.comp.data.w;\n            this.compH = this.comp.data.h;\n            this.svgElement.setAttribute(\"width\", this.compW);\n            this.svgElement.setAttribute(\"height\", this.compH);\n            var g3 = createNS(\"g\");\n            this.maskedElement.appendChild(g3);\n            this.innerElem = g3;\n        } else {\n            this.renderType = \"html\";\n            this.innerElem = this.layerElement;\n        }\n        this.checkParenting();\n    };\n    HTextElement.prototype.buildNewText = function() {\n        var documentData1 = this.textProperty.currentData;\n        this.renderedLetters = createSizedArray(documentData1.l ? documentData1.l.length : 0);\n        var innerElemStyle1 = this.innerElem.style;\n        var textColor1 = documentData1.fc ? this.buildColor(documentData1.fc) : \"rgba(0,0,0,0)\";\n        innerElemStyle1.fill = textColor1;\n        innerElemStyle1.color = textColor1;\n        if (documentData1.sc) {\n            innerElemStyle1.stroke = this.buildColor(documentData1.sc);\n            innerElemStyle1.strokeWidth = documentData1.sw + \"px\";\n        }\n        var fontData1 = this.globalData.fontManager.getFontByName(documentData1.f);\n        if (!this.globalData.fontManager.chars) {\n            innerElemStyle1.fontSize = documentData1.finalSize + \"px\";\n            innerElemStyle1.lineHeight = documentData1.finalSize + \"px\";\n            if (fontData1.fClass) {\n                this.innerElem.className = fontData1.fClass;\n            } else {\n                innerElemStyle1.fontFamily = fontData1.fFamily;\n                var fWeight1 = documentData1.fWeight;\n                var fStyle1 = documentData1.fStyle;\n                innerElemStyle1.fontStyle = fStyle1;\n                innerElemStyle1.fontWeight = fWeight1;\n            }\n        }\n        var i3;\n        var len1;\n        var letters1 = documentData1.l;\n        len1 = letters1.length;\n        var tSpan1;\n        var tParent1;\n        var tCont1;\n        var matrixHelper1 = this.mHelper;\n        var shapes1;\n        var shapeStr1 = \"\";\n        var cnt1 = 0;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.globalData.fontManager.chars) {\n                if (!this.textPaths[cnt1]) {\n                    tSpan1 = createNS(\"path\");\n                    tSpan1.setAttribute(\"stroke-linecap\", lineCapEnum[1]);\n                    tSpan1.setAttribute(\"stroke-linejoin\", lineJoinEnum[2]);\n                    tSpan1.setAttribute(\"stroke-miterlimit\", \"4\");\n                } else {\n                    tSpan1 = this.textPaths[cnt1];\n                }\n                if (!this.isMasked) {\n                    if (this.textSpans[cnt1]) {\n                        tParent1 = this.textSpans[cnt1];\n                        tCont1 = tParent1.children[0];\n                    } else {\n                        tParent1 = createTag(\"div\");\n                        tParent1.style.lineHeight = 0;\n                        tCont1 = createNS(\"svg\");\n                        tCont1.appendChild(tSpan1);\n                        styleDiv(tParent1);\n                    }\n                }\n            } else if (!this.isMasked) {\n                if (this.textSpans[cnt1]) {\n                    tParent1 = this.textSpans[cnt1];\n                    tSpan1 = this.textPaths[cnt1];\n                } else {\n                    tParent1 = createTag(\"span\");\n                    styleDiv(tParent1);\n                    tSpan1 = createTag(\"span\");\n                    styleDiv(tSpan1);\n                    tParent1.appendChild(tSpan1);\n                }\n            } else {\n                tSpan1 = this.textPaths[cnt1] ? this.textPaths[cnt1] : createNS(\"text\");\n            } // tSpan.setAttribute('visibility', 'hidden');\n            if (this.globalData.fontManager.chars) {\n                var charData1 = this.globalData.fontManager.getCharData(documentData1.finalText[i3], fontData1.fStyle, this.globalData.fontManager.getFontByName(documentData1.f).fFamily);\n                var shapeData1;\n                if (charData1) {\n                    shapeData1 = charData1.data;\n                } else {\n                    shapeData1 = null;\n                }\n                matrixHelper1.reset();\n                if (shapeData1 && shapeData1.shapes && shapeData1.shapes.length) {\n                    shapes1 = shapeData1.shapes[0].it;\n                    matrixHelper1.scale(documentData1.finalSize / 100, documentData1.finalSize / 100);\n                    shapeStr1 = this.createPathShape(matrixHelper1, shapes1);\n                    tSpan1.setAttribute(\"d\", shapeStr1);\n                }\n                if (!this.isMasked) {\n                    this.innerElem.appendChild(tParent1);\n                    if (shapeData1 && shapeData1.shapes) {\n                        // document.body.appendChild is needed to get exact measure of shape\n                        document.body.appendChild(tCont1);\n                        var boundingBox1 = tCont1.getBBox();\n                        tCont1.setAttribute(\"width\", boundingBox1.width + 2);\n                        tCont1.setAttribute(\"height\", boundingBox1.height + 2);\n                        tCont1.setAttribute(\"viewBox\", boundingBox1.x - 1 + \" \" + (boundingBox1.y - 1) + \" \" + (boundingBox1.width + 2) + \" \" + (boundingBox1.height + 2));\n                        var tContStyle1 = tCont1.style;\n                        var tContTranslation1 = \"translate(\" + (boundingBox1.x - 1) + \"px,\" + (boundingBox1.y - 1) + \"px)\";\n                        tContStyle1.transform = tContTranslation1;\n                        tContStyle1.webkitTransform = tContTranslation1;\n                        letters1[i3].yOffset = boundingBox1.y - 1;\n                    } else {\n                        tCont1.setAttribute(\"width\", 1);\n                        tCont1.setAttribute(\"height\", 1);\n                    }\n                    tParent1.appendChild(tCont1);\n                } else {\n                    this.innerElem.appendChild(tSpan1);\n                }\n            } else {\n                tSpan1.textContent = letters1[i3].val;\n                tSpan1.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n                if (!this.isMasked) {\n                    this.innerElem.appendChild(tParent1); //\n                    var tStyle1 = tSpan1.style;\n                    var tSpanTranslation1 = \"translate3d(0,\" + -documentData1.finalSize / 1.2 + \"px,0)\";\n                    tStyle1.transform = tSpanTranslation1;\n                    tStyle1.webkitTransform = tSpanTranslation1;\n                } else {\n                    this.innerElem.appendChild(tSpan1);\n                }\n            } //\n            if (!this.isMasked) {\n                this.textSpans[cnt1] = tParent1;\n            } else {\n                this.textSpans[cnt1] = tSpan1;\n            }\n            this.textSpans[cnt1].style.display = \"block\";\n            this.textPaths[cnt1] = tSpan1;\n            cnt1 += 1;\n        }\n        while(cnt1 < this.textSpans.length){\n            this.textSpans[cnt1].style.display = \"none\";\n            cnt1 += 1;\n        }\n    };\n    HTextElement.prototype.renderInnerContent = function() {\n        this.validateText();\n        var svgStyle1;\n        if (this.data.singleShape) {\n            if (!this._isFirstFrame && !this.lettersChangedFlag) {\n                return;\n            }\n            if (this.isMasked && this.finalTransform._matMdf) {\n                // Todo Benchmark if using this is better than getBBox\n                this.svgElement.setAttribute(\"viewBox\", -this.finalTransform.mProp.p.v[0] + \" \" + -this.finalTransform.mProp.p.v[1] + \" \" + this.compW + \" \" + this.compH);\n                svgStyle1 = this.svgElement.style;\n                var translation1 = \"translate(\" + -this.finalTransform.mProp.p.v[0] + \"px,\" + -this.finalTransform.mProp.p.v[1] + \"px)\";\n                svgStyle1.transform = translation1;\n                svgStyle1.webkitTransform = translation1;\n            }\n        }\n        this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);\n        if (!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag) {\n            return;\n        }\n        var i3;\n        var len1;\n        var count1 = 0;\n        var renderedLetters1 = this.textAnimator.renderedLetters;\n        var letters1 = this.textProperty.currentData.l;\n        len1 = letters1.length;\n        var renderedLetter1;\n        var textSpan1;\n        var textPath1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (letters1[i3].n) {\n                count1 += 1;\n            } else {\n                textSpan1 = this.textSpans[i3];\n                textPath1 = this.textPaths[i3];\n                renderedLetter1 = renderedLetters1[count1];\n                count1 += 1;\n                if (renderedLetter1._mdf.m) {\n                    if (!this.isMasked) {\n                        textSpan1.style.webkitTransform = renderedLetter1.m;\n                        textSpan1.style.transform = renderedLetter1.m;\n                    } else {\n                        textSpan1.setAttribute(\"transform\", renderedLetter1.m);\n                    }\n                } /// /textSpan.setAttribute('opacity',renderedLetter.o);\n                textSpan1.style.opacity = renderedLetter1.o;\n                if (renderedLetter1.sw && renderedLetter1._mdf.sw) {\n                    textPath1.setAttribute(\"stroke-width\", renderedLetter1.sw);\n                }\n                if (renderedLetter1.sc && renderedLetter1._mdf.sc) {\n                    textPath1.setAttribute(\"stroke\", renderedLetter1.sc);\n                }\n                if (renderedLetter1.fc && renderedLetter1._mdf.fc) {\n                    textPath1.setAttribute(\"fill\", renderedLetter1.fc);\n                    textPath1.style.color = renderedLetter1.fc;\n                }\n            }\n        }\n        if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {\n            var boundingBox1 = this.innerElem.getBBox();\n            if (this.currentBBox.w !== boundingBox1.width) {\n                this.currentBBox.w = boundingBox1.width;\n                this.svgElement.setAttribute(\"width\", boundingBox1.width);\n            }\n            if (this.currentBBox.h !== boundingBox1.height) {\n                this.currentBBox.h = boundingBox1.height;\n                this.svgElement.setAttribute(\"height\", boundingBox1.height);\n            }\n            var margin1 = 1;\n            if (this.currentBBox.w !== boundingBox1.width + margin1 * 2 || this.currentBBox.h !== boundingBox1.height + margin1 * 2 || this.currentBBox.x !== boundingBox1.x - margin1 || this.currentBBox.y !== boundingBox1.y - margin1) {\n                this.currentBBox.w = boundingBox1.width + margin1 * 2;\n                this.currentBBox.h = boundingBox1.height + margin1 * 2;\n                this.currentBBox.x = boundingBox1.x - margin1;\n                this.currentBBox.y = boundingBox1.y - margin1;\n                this.svgElement.setAttribute(\"viewBox\", this.currentBBox.x + \" \" + this.currentBBox.y + \" \" + this.currentBBox.w + \" \" + this.currentBBox.h);\n                svgStyle1 = this.svgElement.style;\n                var svgTransform1 = \"translate(\" + this.currentBBox.x + \"px,\" + this.currentBBox.y + \"px)\";\n                svgStyle1.transform = svgTransform1;\n                svgStyle1.webkitTransform = svgTransform1;\n            }\n        }\n    };\n    function HCameraElement(data1, globalData1, comp1) {\n        this.initFrame();\n        this.initBaseData(data1, globalData1, comp1);\n        this.initHierarchy();\n        var getProp1 = PropertyFactory.getProp;\n        this.pe = getProp1(this, data1.pe, 0, 0, this);\n        if (data1.ks.p.s) {\n            this.px = getProp1(this, data1.ks.p.x, 1, 0, this);\n            this.py = getProp1(this, data1.ks.p.y, 1, 0, this);\n            this.pz = getProp1(this, data1.ks.p.z, 1, 0, this);\n        } else {\n            this.p = getProp1(this, data1.ks.p, 1, 0, this);\n        }\n        if (data1.ks.a) {\n            this.a = getProp1(this, data1.ks.a, 1, 0, this);\n        }\n        if (data1.ks.or.k.length && data1.ks.or.k[0].to) {\n            var i3;\n            var len1 = data1.ks.or.k.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                data1.ks.or.k[i3].to = null;\n                data1.ks.or.k[i3].ti = null;\n            }\n        }\n        this.or = getProp1(this, data1.ks.or, 1, degToRads, this);\n        this.or.sh = true;\n        this.rx = getProp1(this, data1.ks.rx, 0, degToRads, this);\n        this.ry = getProp1(this, data1.ks.ry, 0, degToRads, this);\n        this.rz = getProp1(this, data1.ks.rz, 0, degToRads, this);\n        this.mat = new Matrix();\n        this._prevMat = new Matrix();\n        this._isFirstFrame = true; // TODO: find a better way to make the HCamera element to be compatible with the LayerInterface and TransformInterface.\n        this.finalTransform = {\n            mProp: this\n        };\n    }\n    extendPrototype([\n        BaseElement,\n        FrameElement,\n        HierarchyElement\n    ], HCameraElement);\n    HCameraElement.prototype.setup = function() {\n        var i3;\n        var len1 = this.comp.threeDElements.length;\n        var comp1;\n        var perspectiveStyle1;\n        var containerStyle1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            // [perspectiveElem,container]\n            comp1 = this.comp.threeDElements[i3];\n            if (comp1.type === \"3d\") {\n                perspectiveStyle1 = comp1.perspectiveElem.style;\n                containerStyle1 = comp1.container.style;\n                var perspective1 = this.pe.v + \"px\";\n                var origin1 = \"0px 0px 0px\";\n                var matrix1 = \"matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)\";\n                perspectiveStyle1.perspective = perspective1;\n                perspectiveStyle1.webkitPerspective = perspective1;\n                containerStyle1.transformOrigin = origin1;\n                containerStyle1.mozTransformOrigin = origin1;\n                containerStyle1.webkitTransformOrigin = origin1;\n                perspectiveStyle1.transform = matrix1;\n                perspectiveStyle1.webkitTransform = matrix1;\n            }\n        }\n    };\n    HCameraElement.prototype.createElements = function() {};\n    HCameraElement.prototype.hide = function() {};\n    HCameraElement.prototype.renderFrame = function() {\n        var _mdf1 = this._isFirstFrame;\n        var i3;\n        var len1;\n        if (this.hierarchy) {\n            len1 = this.hierarchy.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                _mdf1 = this.hierarchy[i3].finalTransform.mProp._mdf || _mdf1;\n            }\n        }\n        if (_mdf1 || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {\n            this.mat.reset();\n            if (this.hierarchy) {\n                len1 = this.hierarchy.length - 1;\n                for(i3 = len1; i3 >= 0; i3 -= 1){\n                    var mTransf1 = this.hierarchy[i3].finalTransform.mProp;\n                    this.mat.translate(-mTransf1.p.v[0], -mTransf1.p.v[1], mTransf1.p.v[2]);\n                    this.mat.rotateX(-mTransf1.or.v[0]).rotateY(-mTransf1.or.v[1]).rotateZ(mTransf1.or.v[2]);\n                    this.mat.rotateX(-mTransf1.rx.v).rotateY(-mTransf1.ry.v).rotateZ(mTransf1.rz.v);\n                    this.mat.scale(1 / mTransf1.s.v[0], 1 / mTransf1.s.v[1], 1 / mTransf1.s.v[2]);\n                    this.mat.translate(mTransf1.a.v[0], mTransf1.a.v[1], mTransf1.a.v[2]);\n                }\n            }\n            if (this.p) {\n                this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]);\n            } else {\n                this.mat.translate(-this.px.v, -this.py.v, this.pz.v);\n            }\n            if (this.a) {\n                var diffVector1;\n                if (this.p) {\n                    diffVector1 = [\n                        this.p.v[0] - this.a.v[0],\n                        this.p.v[1] - this.a.v[1],\n                        this.p.v[2] - this.a.v[2]\n                    ];\n                } else {\n                    diffVector1 = [\n                        this.px.v - this.a.v[0],\n                        this.py.v - this.a.v[1],\n                        this.pz.v - this.a.v[2]\n                    ];\n                }\n                var mag1 = Math.sqrt(Math.pow(diffVector1[0], 2) + Math.pow(diffVector1[1], 2) + Math.pow(diffVector1[2], 2)); // var lookDir = getNormalizedPoint(getDiffVector(this.a.v,this.p.v));\n                var lookDir1 = [\n                    diffVector1[0] / mag1,\n                    diffVector1[1] / mag1,\n                    diffVector1[2] / mag1\n                ];\n                var lookLengthOnXZ1 = Math.sqrt(lookDir1[2] * lookDir1[2] + lookDir1[0] * lookDir1[0]);\n                var mRotationX1 = Math.atan2(lookDir1[1], lookLengthOnXZ1);\n                var mRotationY1 = Math.atan2(lookDir1[0], -lookDir1[2]);\n                this.mat.rotateY(mRotationY1).rotateX(-mRotationX1);\n            }\n            this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);\n            this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);\n            this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0);\n            this.mat.translate(0, 0, this.pe.v);\n            var hasMatrixChanged1 = !this._prevMat.equals(this.mat);\n            if ((hasMatrixChanged1 || this.pe._mdf) && this.comp.threeDElements) {\n                len1 = this.comp.threeDElements.length;\n                var comp1;\n                var perspectiveStyle1;\n                var containerStyle1;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    comp1 = this.comp.threeDElements[i3];\n                    if (comp1.type === \"3d\") {\n                        if (hasMatrixChanged1) {\n                            var matValue1 = this.mat.toCSS();\n                            containerStyle1 = comp1.container.style;\n                            containerStyle1.transform = matValue1;\n                            containerStyle1.webkitTransform = matValue1;\n                        }\n                        if (this.pe._mdf) {\n                            perspectiveStyle1 = comp1.perspectiveElem.style;\n                            perspectiveStyle1.perspective = this.pe.v + \"px\";\n                            perspectiveStyle1.webkitPerspective = this.pe.v + \"px\";\n                        }\n                    }\n                }\n                this.mat.clone(this._prevMat);\n            }\n        }\n        this._isFirstFrame = false;\n    };\n    HCameraElement.prototype.prepareFrame = function(num1) {\n        this.prepareProperties(num1, true);\n    };\n    HCameraElement.prototype.destroy = function() {};\n    HCameraElement.prototype.getBaseElement = function() {\n        return null;\n    };\n    function HImageElement(data1, globalData1, comp1) {\n        this.assetData = globalData1.getAssetData(data1.refId);\n        this.initElement(data1, globalData1, comp1);\n    }\n    extendPrototype([\n        BaseElement,\n        TransformElement,\n        HBaseElement,\n        HSolidElement,\n        HierarchyElement,\n        FrameElement,\n        RenderableElement\n    ], HImageElement);\n    HImageElement.prototype.createContent = function() {\n        var assetPath1 = this.globalData.getAssetsPath(this.assetData);\n        var img1 = new Image();\n        if (this.data.hasMask) {\n            this.imageElem = createNS(\"image\");\n            this.imageElem.setAttribute(\"width\", this.assetData.w + \"px\");\n            this.imageElem.setAttribute(\"height\", this.assetData.h + \"px\");\n            this.imageElem.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", assetPath1);\n            this.layerElement.appendChild(this.imageElem);\n            this.baseElement.setAttribute(\"width\", this.assetData.w);\n            this.baseElement.setAttribute(\"height\", this.assetData.h);\n        } else {\n            this.layerElement.appendChild(img1);\n        }\n        img1.crossOrigin = \"anonymous\";\n        img1.src = assetPath1;\n        if (this.data.ln) {\n            this.baseElement.setAttribute(\"id\", this.data.ln);\n        }\n    };\n    function HybridRendererBase(animationItem1, config1) {\n        this.animationItem = animationItem1;\n        this.layers = null;\n        this.renderedFrame = -1;\n        this.renderConfig = {\n            className: config1 && config1.className || \"\",\n            imagePreserveAspectRatio: config1 && config1.imagePreserveAspectRatio || \"xMidYMid slice\",\n            hideOnTransparent: !(config1 && config1.hideOnTransparent === false),\n            filterSize: {\n                width: config1 && config1.filterSize && config1.filterSize.width || \"400%\",\n                height: config1 && config1.filterSize && config1.filterSize.height || \"400%\",\n                x: config1 && config1.filterSize && config1.filterSize.x || \"-100%\",\n                y: config1 && config1.filterSize && config1.filterSize.y || \"-100%\"\n            }\n        };\n        this.globalData = {\n            _mdf: false,\n            frameNum: -1,\n            renderConfig: this.renderConfig\n        };\n        this.pendingElements = [];\n        this.elements = [];\n        this.threeDElements = [];\n        this.destroyed = false;\n        this.camera = null;\n        this.supports3d = true;\n        this.rendererType = \"html\";\n    }\n    extendPrototype([\n        BaseRenderer\n    ], HybridRendererBase);\n    HybridRendererBase.prototype.buildItem = SVGRenderer.prototype.buildItem;\n    HybridRendererBase.prototype.checkPendingElements = function() {\n        while(this.pendingElements.length){\n            var element1 = this.pendingElements.pop();\n            element1.checkParenting();\n        }\n    };\n    HybridRendererBase.prototype.appendElementInPos = function(element1, pos1) {\n        var newDOMElement1 = element1.getBaseElement();\n        if (!newDOMElement1) {\n            return;\n        }\n        var layer1 = this.layers[pos1];\n        if (!layer1.ddd || !this.supports3d) {\n            if (this.threeDElements) {\n                this.addTo3dContainer(newDOMElement1, pos1);\n            } else {\n                var i3 = 0;\n                var nextDOMElement1;\n                var nextLayer1;\n                var tmpDOMElement1;\n                while(i3 < pos1){\n                    if (this.elements[i3] && this.elements[i3] !== true && this.elements[i3].getBaseElement) {\n                        nextLayer1 = this.elements[i3];\n                        tmpDOMElement1 = this.layers[i3].ddd ? this.getThreeDContainerByPos(i3) : nextLayer1.getBaseElement();\n                        nextDOMElement1 = tmpDOMElement1 || nextDOMElement1;\n                    }\n                    i3 += 1;\n                }\n                if (nextDOMElement1) {\n                    if (!layer1.ddd || !this.supports3d) {\n                        this.layerElement.insertBefore(newDOMElement1, nextDOMElement1);\n                    }\n                } else if (!layer1.ddd || !this.supports3d) {\n                    this.layerElement.appendChild(newDOMElement1);\n                }\n            }\n        } else {\n            this.addTo3dContainer(newDOMElement1, pos1);\n        }\n    };\n    HybridRendererBase.prototype.createShape = function(data1) {\n        if (!this.supports3d) {\n            return new SVGShapeElement(data1, this.globalData, this);\n        }\n        return new HShapeElement(data1, this.globalData, this);\n    };\n    HybridRendererBase.prototype.createText = function(data1) {\n        if (!this.supports3d) {\n            return new SVGTextLottieElement(data1, this.globalData, this);\n        }\n        return new HTextElement(data1, this.globalData, this);\n    };\n    HybridRendererBase.prototype.createCamera = function(data1) {\n        this.camera = new HCameraElement(data1, this.globalData, this);\n        return this.camera;\n    };\n    HybridRendererBase.prototype.createImage = function(data1) {\n        if (!this.supports3d) {\n            return new IImageElement(data1, this.globalData, this);\n        }\n        return new HImageElement(data1, this.globalData, this);\n    };\n    HybridRendererBase.prototype.createSolid = function(data1) {\n        if (!this.supports3d) {\n            return new ISolidElement(data1, this.globalData, this);\n        }\n        return new HSolidElement(data1, this.globalData, this);\n    };\n    HybridRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;\n    HybridRendererBase.prototype.getThreeDContainerByPos = function(pos1) {\n        var i3 = 0;\n        var len1 = this.threeDElements.length;\n        while(i3 < len1){\n            if (this.threeDElements[i3].startPos <= pos1 && this.threeDElements[i3].endPos >= pos1) {\n                return this.threeDElements[i3].perspectiveElem;\n            }\n            i3 += 1;\n        }\n        return null;\n    };\n    HybridRendererBase.prototype.createThreeDContainer = function(pos1, type1) {\n        var perspectiveElem1 = createTag(\"div\");\n        var style1;\n        var containerStyle1;\n        styleDiv(perspectiveElem1);\n        var container1 = createTag(\"div\");\n        styleDiv(container1);\n        if (type1 === \"3d\") {\n            style1 = perspectiveElem1.style;\n            style1.width = this.globalData.compSize.w + \"px\";\n            style1.height = this.globalData.compSize.h + \"px\";\n            var center1 = \"50% 50%\";\n            style1.webkitTransformOrigin = center1;\n            style1.mozTransformOrigin = center1;\n            style1.transformOrigin = center1;\n            containerStyle1 = container1.style;\n            var matrix1 = \"matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)\";\n            containerStyle1.transform = matrix1;\n            containerStyle1.webkitTransform = matrix1;\n        }\n        perspectiveElem1.appendChild(container1); // this.resizerElem.appendChild(perspectiveElem);\n        var threeDContainerData1 = {\n            container: container1,\n            perspectiveElem: perspectiveElem1,\n            startPos: pos1,\n            endPos: pos1,\n            type: type1\n        };\n        this.threeDElements.push(threeDContainerData1);\n        return threeDContainerData1;\n    };\n    HybridRendererBase.prototype.build3dContainers = function() {\n        var i3;\n        var len1 = this.layers.length;\n        var lastThreeDContainerData1;\n        var currentContainer1 = \"\";\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.layers[i3].ddd && this.layers[i3].ty !== 3) {\n                if (currentContainer1 !== \"3d\") {\n                    currentContainer1 = \"3d\";\n                    lastThreeDContainerData1 = this.createThreeDContainer(i3, \"3d\");\n                }\n                lastThreeDContainerData1.endPos = Math.max(lastThreeDContainerData1.endPos, i3);\n            } else {\n                if (currentContainer1 !== \"2d\") {\n                    currentContainer1 = \"2d\";\n                    lastThreeDContainerData1 = this.createThreeDContainer(i3, \"2d\");\n                }\n                lastThreeDContainerData1.endPos = Math.max(lastThreeDContainerData1.endPos, i3);\n            }\n        }\n        len1 = this.threeDElements.length;\n        for(i3 = len1 - 1; i3 >= 0; i3 -= 1){\n            this.resizerElem.appendChild(this.threeDElements[i3].perspectiveElem);\n        }\n    };\n    HybridRendererBase.prototype.addTo3dContainer = function(elem3, pos1) {\n        var i3 = 0;\n        var len1 = this.threeDElements.length;\n        while(i3 < len1){\n            if (pos1 <= this.threeDElements[i3].endPos) {\n                var j3 = this.threeDElements[i3].startPos;\n                var nextElement1;\n                while(j3 < pos1){\n                    if (this.elements[j3] && this.elements[j3].getBaseElement) {\n                        nextElement1 = this.elements[j3].getBaseElement();\n                    }\n                    j3 += 1;\n                }\n                if (nextElement1) {\n                    this.threeDElements[i3].container.insertBefore(elem3, nextElement1);\n                } else {\n                    this.threeDElements[i3].container.appendChild(elem3);\n                }\n                break;\n            }\n            i3 += 1;\n        }\n    };\n    HybridRendererBase.prototype.configAnimation = function(animData1) {\n        var resizerElem1 = createTag(\"div\");\n        var wrapper1 = this.animationItem.wrapper;\n        var style1 = resizerElem1.style;\n        style1.width = animData1.w + \"px\";\n        style1.height = animData1.h + \"px\";\n        this.resizerElem = resizerElem1;\n        styleDiv(resizerElem1);\n        style1.transformStyle = \"flat\";\n        style1.mozTransformStyle = \"flat\";\n        style1.webkitTransformStyle = \"flat\";\n        if (this.renderConfig.className) {\n            resizerElem1.setAttribute(\"class\", this.renderConfig.className);\n        }\n        wrapper1.appendChild(resizerElem1);\n        style1.overflow = \"hidden\";\n        var svg1 = createNS(\"svg\");\n        svg1.setAttribute(\"width\", \"1\");\n        svg1.setAttribute(\"height\", \"1\");\n        styleDiv(svg1);\n        this.resizerElem.appendChild(svg1);\n        var defs1 = createNS(\"defs\");\n        svg1.appendChild(defs1);\n        this.data = animData1; // Mask animation\n        this.setupGlobalData(animData1, svg1);\n        this.globalData.defs = defs1;\n        this.layers = animData1.layers;\n        this.layerElement = this.resizerElem;\n        this.build3dContainers();\n        this.updateContainerSize();\n    };\n    HybridRendererBase.prototype.destroy = function() {\n        if (this.animationItem.wrapper) {\n            this.animationItem.wrapper.innerText = \"\";\n        }\n        this.animationItem.container = null;\n        this.globalData.defs = null;\n        var i3;\n        var len1 = this.layers ? this.layers.length : 0;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.elements[i3] && this.elements[i3].destroy) {\n                this.elements[i3].destroy();\n            }\n        }\n        this.elements.length = 0;\n        this.destroyed = true;\n        this.animationItem = null;\n    };\n    HybridRendererBase.prototype.updateContainerSize = function() {\n        var elementWidth1 = this.animationItem.wrapper.offsetWidth;\n        var elementHeight1 = this.animationItem.wrapper.offsetHeight;\n        var elementRel1 = elementWidth1 / elementHeight1;\n        var animationRel1 = this.globalData.compSize.w / this.globalData.compSize.h;\n        var sx1;\n        var sy1;\n        var tx1;\n        var ty1;\n        if (animationRel1 > elementRel1) {\n            sx1 = elementWidth1 / this.globalData.compSize.w;\n            sy1 = elementWidth1 / this.globalData.compSize.w;\n            tx1 = 0;\n            ty1 = (elementHeight1 - this.globalData.compSize.h * (elementWidth1 / this.globalData.compSize.w)) / 2;\n        } else {\n            sx1 = elementHeight1 / this.globalData.compSize.h;\n            sy1 = elementHeight1 / this.globalData.compSize.h;\n            tx1 = (elementWidth1 - this.globalData.compSize.w * (elementHeight1 / this.globalData.compSize.h)) / 2;\n            ty1 = 0;\n        }\n        var style1 = this.resizerElem.style;\n        style1.webkitTransform = \"matrix3d(\" + sx1 + \",0,0,0,0,\" + sy1 + \",0,0,0,0,1,0,\" + tx1 + \",\" + ty1 + \",0,1)\";\n        style1.transform = style1.webkitTransform;\n    };\n    HybridRendererBase.prototype.renderFrame = SVGRenderer.prototype.renderFrame;\n    HybridRendererBase.prototype.hide = function() {\n        this.resizerElem.style.display = \"none\";\n    };\n    HybridRendererBase.prototype.show = function() {\n        this.resizerElem.style.display = \"block\";\n    };\n    HybridRendererBase.prototype.initItems = function() {\n        this.buildAllItems();\n        if (this.camera) {\n            this.camera.setup();\n        } else {\n            var cWidth1 = this.globalData.compSize.w;\n            var cHeight1 = this.globalData.compSize.h;\n            var i3;\n            var len1 = this.threeDElements.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                var style1 = this.threeDElements[i3].perspectiveElem.style;\n                style1.webkitPerspective = Math.sqrt(Math.pow(cWidth1, 2) + Math.pow(cHeight1, 2)) + \"px\";\n                style1.perspective = style1.webkitPerspective;\n            }\n        }\n    };\n    HybridRendererBase.prototype.searchExtraCompositions = function(assets1) {\n        var i3;\n        var len1 = assets1.length;\n        var floatingContainer1 = createTag(\"div\");\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (assets1[i3].xt) {\n                var comp1 = this.createComp(assets1[i3], floatingContainer1, this.globalData.comp, null);\n                comp1.initExpressions();\n                this.globalData.projectInterface.registerComposition(comp1);\n            }\n        }\n    };\n    function HCompElement(data1, globalData1, comp1) {\n        this.layers = data1.layers;\n        this.supports3d = !data1.hasMask;\n        this.completeLayers = false;\n        this.pendingElements = [];\n        this.elements = this.layers ? createSizedArray(this.layers.length) : [];\n        this.initElement(data1, globalData1, comp1);\n        this.tm = data1.tm ? PropertyFactory.getProp(this, data1.tm, 0, globalData1.frameRate, this) : {\n            _placeholder: true\n        };\n    }\n    extendPrototype([\n        HybridRendererBase,\n        ICompElement,\n        HBaseElement\n    ], HCompElement);\n    HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;\n    HCompElement.prototype.createContainerElements = function() {\n        this._createBaseContainerElements(); // divElement.style.clip = 'rect(0px, '+this.data.w+'px, '+this.data.h+'px, 0px)';\n        if (this.data.hasMask) {\n            this.svgElement.setAttribute(\"width\", this.data.w);\n            this.svgElement.setAttribute(\"height\", this.data.h);\n            this.transformedElement = this.baseElement;\n        } else {\n            this.transformedElement = this.layerElement;\n        }\n    };\n    HCompElement.prototype.addTo3dContainer = function(elem3, pos1) {\n        var j3 = 0;\n        var nextElement1;\n        while(j3 < pos1){\n            if (this.elements[j3] && this.elements[j3].getBaseElement) {\n                nextElement1 = this.elements[j3].getBaseElement();\n            }\n            j3 += 1;\n        }\n        if (nextElement1) {\n            this.layerElement.insertBefore(elem3, nextElement1);\n        } else {\n            this.layerElement.appendChild(elem3);\n        }\n    };\n    HCompElement.prototype.createComp = function(data1) {\n        if (!this.supports3d) {\n            return new SVGCompElement(data1, this.globalData, this);\n        }\n        return new HCompElement(data1, this.globalData, this);\n    };\n    function HybridRenderer(animationItem1, config1) {\n        this.animationItem = animationItem1;\n        this.layers = null;\n        this.renderedFrame = -1;\n        this.renderConfig = {\n            className: config1 && config1.className || \"\",\n            imagePreserveAspectRatio: config1 && config1.imagePreserveAspectRatio || \"xMidYMid slice\",\n            hideOnTransparent: !(config1 && config1.hideOnTransparent === false),\n            filterSize: {\n                width: config1 && config1.filterSize && config1.filterSize.width || \"400%\",\n                height: config1 && config1.filterSize && config1.filterSize.height || \"400%\",\n                x: config1 && config1.filterSize && config1.filterSize.x || \"-100%\",\n                y: config1 && config1.filterSize && config1.filterSize.y || \"-100%\"\n            },\n            runExpressions: !config1 || config1.runExpressions === undefined || config1.runExpressions\n        };\n        this.globalData = {\n            _mdf: false,\n            frameNum: -1,\n            renderConfig: this.renderConfig\n        };\n        this.pendingElements = [];\n        this.elements = [];\n        this.threeDElements = [];\n        this.destroyed = false;\n        this.camera = null;\n        this.supports3d = true;\n        this.rendererType = \"html\";\n    }\n    extendPrototype([\n        HybridRendererBase\n    ], HybridRenderer);\n    HybridRenderer.prototype.createComp = function(data1) {\n        if (!this.supports3d) {\n            return new SVGCompElement(data1, this.globalData, this);\n        }\n        return new HCompElement(data1, this.globalData, this);\n    };\n    var CompExpressionInterface = function() {\n        return function(comp1) {\n            function _thisLayerFunction1(name1) {\n                var i3 = 0;\n                var len1 = comp1.layers.length;\n                while(i3 < len1){\n                    if (comp1.layers[i3].nm === name1 || comp1.layers[i3].ind === name1) {\n                        return comp1.elements[i3].layerInterface;\n                    }\n                    i3 += 1;\n                }\n                return null; // return {active:false};\n            }\n            Object.defineProperty(_thisLayerFunction1, \"_name\", {\n                value: comp1.data.nm\n            });\n            _thisLayerFunction1.layer = _thisLayerFunction1;\n            _thisLayerFunction1.pixelAspect = 1;\n            _thisLayerFunction1.height = comp1.data.h || comp1.globalData.compSize.h;\n            _thisLayerFunction1.width = comp1.data.w || comp1.globalData.compSize.w;\n            _thisLayerFunction1.pixelAspect = 1;\n            _thisLayerFunction1.frameDuration = 1 / comp1.globalData.frameRate;\n            _thisLayerFunction1.displayStartTime = 0;\n            _thisLayerFunction1.numLayers = comp1.layers.length;\n            return _thisLayerFunction1;\n        };\n    }();\n    function _typeof$2(obj1) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof$2 = function _typeof1(obj1) {\n                return typeof obj1;\n            };\n        } else {\n            _typeof$2 = function _typeof1(obj1) {\n                return obj1 && typeof Symbol === \"function\" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? \"symbol\" : typeof obj1;\n            };\n        }\n        return _typeof$2(obj1);\n    }\n    /* eslint-disable */ /*\r\n   Copyright 2014 David Bau.\r\n\r\n   Permission is hereby granted, free of charge, to any person obtaining\r\n   a copy of this software and associated documentation files (the\r\n   \"Software\"), to deal in the Software without restriction, including\r\n   without limitation the rights to use, copy, modify, merge, publish,\r\n   distribute, sublicense, and/or sell copies of the Software, and to\r\n   permit persons to whom the Software is furnished to do so, subject to\r\n   the following conditions:\r\n\r\n   The above copyright notice and this permission notice shall be\r\n   included in all copies or substantial portions of the Software.\r\n\r\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n   */ function seedRandom(pool1, math1) {\n        //\n        // The following constants are related to IEEE 754 limits.\n        //\n        var global1 = this, width1 = 256, // each RC4 output is 0 <= x < 256\n        chunks1 = 6, // at least six RC4 outputs for each double\n        digits1 = 52, // there are 52 significant digits in a double\n        rngname1 = \"random\", // rngname: name for Math.random and Math.seedrandom\n        startdenom1 = math1.pow(width1, chunks1), significance1 = math1.pow(2, digits1), overflow1 = significance1 * 2, mask1 = width1 - 1, nodecrypto1; // node.js crypto module, initialized at the bottom.\n        //\n        // seedrandom()\n        // This is the seedrandom function described above.\n        //\n        function seedrandom1(seed1, options1, callback1) {\n            var key1 = [];\n            options1 = options1 === true ? {\n                entropy: true\n            } : options1 || {}; // Flatten the seed string or build one from local entropy if needed.\n            var shortseed1 = mixkey1(flatten1(options1.entropy ? [\n                seed1,\n                tostring1(pool1)\n            ] : seed1 === null ? autoseed1() : seed1, 3), key1); // Use the seed to initialize an ARC4 generator.\n            var arc41 = new ARC41(key1); // This function returns a random double in [0, 1) that contains\n            // randomness in every bit of the mantissa of the IEEE 754 value.\n            var prng1 = function prng1() {\n                var n3 = arc41.g(chunks1), // Start with a numerator n < 2 ^ 48\n                d3 = startdenom1, //   and denominator d = 2 ^ 48.\n                x4 = 0; //   and no 'extra last byte'.\n                while(n3 < significance1){\n                    // Fill up all significant digits by\n                    n3 = (n3 + x4) * width1; //   shifting numerator and\n                    d3 *= width1; //   denominator and generating a\n                    x4 = arc41.g(1); //   new least-significant-byte.\n                }\n                while(n3 >= overflow1){\n                    // To avoid rounding up, before adding\n                    n3 /= 2; //   last byte, shift everything\n                    d3 /= 2; //   right using integer math until\n                    x4 >>>= 1; //   we have exactly the desired bits.\n                }\n                return (n3 + x4) / d3; // Form the number within [0, 1).\n            };\n            prng1.int32 = function() {\n                return arc41.g(4) | 0;\n            };\n            prng1.quick = function() {\n                return arc41.g(4) / 0x100000000;\n            };\n            prng1[\"double\"] = prng1; // Mix the randomness into accumulated entropy.\n            mixkey1(tostring1(arc41.S), pool1); // Calling convention: what to return as a function of prng, seed, is_math.\n            return (options1.pass || callback1 || function(prng1, seed1, is_math_call1, state1) {\n                if (state1) {\n                    // Load the arc4 state from the given state if it has an S array.\n                    if (state1.S) {\n                        copy1(state1, arc41);\n                    } // Only provide the .state method if requested via options.state.\n                    prng1.state = function() {\n                        return copy1(arc41, {});\n                    };\n                } // If called as a method of Math (Math.seedrandom()), mutate\n                // Math.random because that is how seedrandom.js has worked since v1.0.\n                if (is_math_call1) {\n                    math1[rngname1] = prng1;\n                    return seed1;\n                } else return prng1;\n            })(prng1, shortseed1, \"global\" in options1 ? options1.global : this == math1, options1.state);\n        }\n        math1[\"seed\" + rngname1] = seedrandom1; //\n        // ARC4\n        //\n        // An ARC4 implementation.  The constructor takes a key in the form of\n        // an array of at most (width) integers that should be 0 <= x < (width).\n        //\n        // The g(count) method returns a pseudorandom integer that concatenates\n        // the next (count) outputs from ARC4.  Its return value is a number x\n        // that is in the range 0 <= x < (width ^ count).\n        //\n        function ARC41(key1) {\n            var t3, keylen1 = key1.length, me1 = this, i3 = 0, j3 = me1.i = me1.j = 0, s4 = me1.S = []; // The empty key [] is treated as [0].\n            if (!keylen1) {\n                key1 = [\n                    keylen1++\n                ];\n            } // Set up S using the standard key scheduling algorithm.\n            while(i3 < width1){\n                s4[i3] = i3++;\n            }\n            for(i3 = 0; i3 < width1; i3++){\n                s4[i3] = s4[j3 = mask1 & j3 + key1[i3 % keylen1] + (t3 = s4[i3])];\n                s4[j3] = t3;\n            } // The \"g\" method returns the next (count) outputs as one number.\n            me1.g = function(count1) {\n                // Using instance members instead of closure state nearly doubles speed.\n                var t3, r1 = 0, i3 = me1.i, j3 = me1.j, s4 = me1.S;\n                while(count1--){\n                    t3 = s4[i3 = mask1 & i3 + 1];\n                    r1 = r1 * width1 + s4[mask1 & (s4[i3] = s4[j3 = mask1 & j3 + t3]) + (s4[j3] = t3)];\n                }\n                me1.i = i3;\n                me1.j = j3;\n                return r1; // For robust unpredictability, the function call below automatically\n            // discards an initial batch of values.  This is called RC4-drop[256].\n            // See http://google.com/search?q=rsa+fluhrer+response&btnI\n            };\n        } //\n        // copy()\n        // Copies internal state of ARC4 to or from a plain object.\n        //\n        function copy1(f3, t3) {\n            t3.i = f3.i;\n            t3.j = f3.j;\n            t3.S = f3.S.slice();\n            return t3;\n        } //\n        // flatten()\n        // Converts an object tree to nested arrays of strings.\n        //\n        function flatten1(obj1, depth1) {\n            var result1 = [], typ1 = _typeof$2(obj1), prop1;\n            if (depth1 && typ1 == \"object\") {\n                for(prop1 in obj1){\n                    try {\n                        result1.push(flatten1(obj1[prop1], depth1 - 1));\n                    } catch (e3) {}\n                }\n            }\n            return result1.length ? result1 : typ1 == \"string\" ? obj1 : obj1 + \"\\x00\";\n        } //\n        // mixkey()\n        // Mixes a string seed into a key that is an array of integers, and\n        // returns a shortened string seed that is equivalent to the result key.\n        //\n        function mixkey1(seed1, key1) {\n            var stringseed1 = seed1 + \"\", smear1, j3 = 0;\n            while(j3 < stringseed1.length){\n                key1[mask1 & j3] = mask1 & (smear1 ^= key1[mask1 & j3] * 19) + stringseed1.charCodeAt(j3++);\n            }\n            return tostring1(key1);\n        } //\n        // autoseed()\n        // Returns an object for autoseeding, using window.crypto and Node crypto\n        // module if available.\n        //\n        function autoseed1() {\n            try {\n                if (nodecrypto1) {\n                    return tostring1(nodecrypto1.randomBytes(width1));\n                }\n                var out1 = new Uint8Array(width1);\n                (global1.crypto || global1.msCrypto).getRandomValues(out1);\n                return tostring1(out1);\n            } catch (e3) {\n                var browser1 = global1.navigator, plugins1 = browser1 && browser1.plugins;\n                return [\n                    +new Date(),\n                    global1,\n                    plugins1,\n                    global1.screen,\n                    tostring1(pool1)\n                ];\n            }\n        } //\n        // tostring()\n        // Converts an array of charcodes to a string\n        //\n        function tostring1(a3) {\n            return String.fromCharCode.apply(0, a3);\n        } //\n        // When seedrandom.js is loaded, we immediately mix a few bits\n        // from the built-in RNG into the entropy pool.  Because we do\n        // not want to interfere with deterministic PRNG state later,\n        // seedrandom will not call math.random on its own again after\n        // initialization.\n        //\n        mixkey1(math1.random(), pool1); //\n    // Nodejs and AMD support: export the implementation as a module using\n    // either convention.\n    //\n    // End anonymous scope, and pass initial values.\n    }\n    ;\n    function initialize$2(BMMath1) {\n        seedRandom([], BMMath1);\n    }\n    var propTypes = {\n        SHAPE: \"shape\"\n    };\n    function _typeof$1(obj1) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof$1 = function _typeof1(obj1) {\n                return typeof obj1;\n            };\n        } else {\n            _typeof$1 = function _typeof1(obj1) {\n                return obj1 && typeof Symbol === \"function\" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? \"symbol\" : typeof obj1;\n            };\n        }\n        return _typeof$1(obj1);\n    }\n    var ExpressionManager = function() {\n        \"use strict\";\n        var ob = {};\n        var Math = BMMath;\n        var window = null;\n        var document = null;\n        var XMLHttpRequest = null;\n        var fetch = null;\n        var frames = null;\n        var _lottieGlobal = {};\n        initialize$2(BMMath);\n        function resetFrame() {\n            _lottieGlobal = {};\n        }\n        function $bm_isInstanceOfArray(arr3) {\n            return arr3.constructor === Array || arr3.constructor === Float32Array;\n        }\n        function isNumerable(tOfV1, v5) {\n            return tOfV1 === \"number\" || v5 instanceof Number || tOfV1 === \"boolean\" || tOfV1 === \"string\";\n        }\n        function $bm_neg(a3) {\n            var tOfA1 = _typeof$1(a3);\n            if (tOfA1 === \"number\" || a3 instanceof Number || tOfA1 === \"boolean\") {\n                return -a3;\n            }\n            if ($bm_isInstanceOfArray(a3)) {\n                var i3;\n                var lenA1 = a3.length;\n                var retArr1 = [];\n                for(i3 = 0; i3 < lenA1; i3 += 1){\n                    retArr1[i3] = -a3[i3];\n                }\n                return retArr1;\n            }\n            if (a3.propType) {\n                return a3.v;\n            }\n            return -a3;\n        }\n        var easeInBez = BezierFactory.getBezierEasing(0.333, 0, 0.833, 0.833, \"easeIn\").get;\n        var easeOutBez = BezierFactory.getBezierEasing(0.167, 0.167, 0.667, 1, \"easeOut\").get;\n        var easeInOutBez = BezierFactory.getBezierEasing(0.33, 0, 0.667, 1, \"easeInOut\").get;\n        function sum(a3, b3) {\n            var tOfA1 = _typeof$1(a3);\n            var tOfB1 = _typeof$1(b3);\n            if (isNumerable(tOfA1, a3) && isNumerable(tOfB1, b3) || tOfA1 === \"string\" || tOfB1 === \"string\") {\n                return a3 + b3;\n            }\n            if ($bm_isInstanceOfArray(a3) && isNumerable(tOfB1, b3)) {\n                a3 = a3.slice(0);\n                a3[0] += b3;\n                return a3;\n            }\n            if (isNumerable(tOfA1, a3) && $bm_isInstanceOfArray(b3)) {\n                b3 = b3.slice(0);\n                b3[0] = a3 + b3[0];\n                return b3;\n            }\n            if ($bm_isInstanceOfArray(a3) && $bm_isInstanceOfArray(b3)) {\n                var i3 = 0;\n                var lenA1 = a3.length;\n                var lenB1 = b3.length;\n                var retArr1 = [];\n                while(i3 < lenA1 || i3 < lenB1){\n                    if ((typeof a3[i3] === \"number\" || a3[i3] instanceof Number) && (typeof b3[i3] === \"number\" || b3[i3] instanceof Number)) {\n                        retArr1[i3] = a3[i3] + b3[i3];\n                    } else {\n                        retArr1[i3] = b3[i3] === undefined ? a3[i3] : a3[i3] || b3[i3];\n                    }\n                    i3 += 1;\n                }\n                return retArr1;\n            }\n            return 0;\n        }\n        var add = sum;\n        function sub(a3, b3) {\n            var tOfA1 = _typeof$1(a3);\n            var tOfB1 = _typeof$1(b3);\n            if (isNumerable(tOfA1, a3) && isNumerable(tOfB1, b3)) {\n                if (tOfA1 === \"string\") {\n                    a3 = parseInt(a3, 10);\n                }\n                if (tOfB1 === \"string\") {\n                    b3 = parseInt(b3, 10);\n                }\n                return a3 - b3;\n            }\n            if ($bm_isInstanceOfArray(a3) && isNumerable(tOfB1, b3)) {\n                a3 = a3.slice(0);\n                a3[0] -= b3;\n                return a3;\n            }\n            if (isNumerable(tOfA1, a3) && $bm_isInstanceOfArray(b3)) {\n                b3 = b3.slice(0);\n                b3[0] = a3 - b3[0];\n                return b3;\n            }\n            if ($bm_isInstanceOfArray(a3) && $bm_isInstanceOfArray(b3)) {\n                var i3 = 0;\n                var lenA1 = a3.length;\n                var lenB1 = b3.length;\n                var retArr1 = [];\n                while(i3 < lenA1 || i3 < lenB1){\n                    if ((typeof a3[i3] === \"number\" || a3[i3] instanceof Number) && (typeof b3[i3] === \"number\" || b3[i3] instanceof Number)) {\n                        retArr1[i3] = a3[i3] - b3[i3];\n                    } else {\n                        retArr1[i3] = b3[i3] === undefined ? a3[i3] : a3[i3] || b3[i3];\n                    }\n                    i3 += 1;\n                }\n                return retArr1;\n            }\n            return 0;\n        }\n        function mul(a3, b3) {\n            var tOfA1 = _typeof$1(a3);\n            var tOfB1 = _typeof$1(b3);\n            var arr3;\n            if (isNumerable(tOfA1, a3) && isNumerable(tOfB1, b3)) {\n                return a3 * b3;\n            }\n            var i3;\n            var len1;\n            if ($bm_isInstanceOfArray(a3) && isNumerable(tOfB1, b3)) {\n                len1 = a3.length;\n                arr3 = createTypedArray(\"float32\", len1);\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    arr3[i3] = a3[i3] * b3;\n                }\n                return arr3;\n            }\n            if (isNumerable(tOfA1, a3) && $bm_isInstanceOfArray(b3)) {\n                len1 = b3.length;\n                arr3 = createTypedArray(\"float32\", len1);\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    arr3[i3] = a3 * b3[i3];\n                }\n                return arr3;\n            }\n            return 0;\n        }\n        function div(a3, b3) {\n            var tOfA1 = _typeof$1(a3);\n            var tOfB1 = _typeof$1(b3);\n            var arr3;\n            if (isNumerable(tOfA1, a3) && isNumerable(tOfB1, b3)) {\n                return a3 / b3;\n            }\n            var i3;\n            var len1;\n            if ($bm_isInstanceOfArray(a3) && isNumerable(tOfB1, b3)) {\n                len1 = a3.length;\n                arr3 = createTypedArray(\"float32\", len1);\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    arr3[i3] = a3[i3] / b3;\n                }\n                return arr3;\n            }\n            if (isNumerable(tOfA1, a3) && $bm_isInstanceOfArray(b3)) {\n                len1 = b3.length;\n                arr3 = createTypedArray(\"float32\", len1);\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    arr3[i3] = a3 / b3[i3];\n                }\n                return arr3;\n            }\n            return 0;\n        }\n        function mod(a3, b3) {\n            if (typeof a3 === \"string\") {\n                a3 = parseInt(a3, 10);\n            }\n            if (typeof b3 === \"string\") {\n                b3 = parseInt(b3, 10);\n            }\n            return a3 % b3;\n        }\n        var $bm_sum = sum;\n        var $bm_sub = sub;\n        var $bm_mul = mul;\n        var $bm_div = div;\n        var $bm_mod = mod;\n        function clamp(num1, min1, max1) {\n            if (min1 > max1) {\n                var mm1 = max1;\n                max1 = min1;\n                min1 = mm1;\n            }\n            return Math.min(Math.max(num1, min1), max1);\n        }\n        function radiansToDegrees(val3) {\n            return val3 / degToRads;\n        }\n        var radians_to_degrees = radiansToDegrees;\n        function degreesToRadians(val3) {\n            return val3 * degToRads;\n        }\n        var degrees_to_radians = radiansToDegrees;\n        var helperLengthArray = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n        function length(arr11, arr21) {\n            if (typeof arr11 === \"number\" || arr11 instanceof Number) {\n                arr21 = arr21 || 0;\n                return Math.abs(arr11 - arr21);\n            }\n            if (!arr21) {\n                arr21 = helperLengthArray;\n            }\n            var i3;\n            var len1 = Math.min(arr11.length, arr21.length);\n            var addedLength1 = 0;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                addedLength1 += Math.pow(arr21[i3] - arr11[i3], 2);\n            }\n            return Math.sqrt(addedLength1);\n        }\n        function normalize(vec1) {\n            return div(vec1, length(vec1));\n        }\n        function rgbToHsl(val3) {\n            var r1 = val3[0];\n            var g3 = val3[1];\n            var b3 = val3[2];\n            var max1 = Math.max(r1, g3, b3);\n            var min1 = Math.min(r1, g3, b3);\n            var h3;\n            var s4;\n            var l3 = (max1 + min1) / 2;\n            if (max1 === min1) {\n                h3 = 0; // achromatic\n                s4 = 0; // achromatic\n            } else {\n                var d3 = max1 - min1;\n                s4 = l3 > 0.5 ? d3 / (2 - max1 - min1) : d3 / (max1 + min1);\n                switch(max1){\n                    case r1:\n                        h3 = (g3 - b3) / d3 + (g3 < b3 ? 6 : 0);\n                        break;\n                    case g3:\n                        h3 = (b3 - r1) / d3 + 2;\n                        break;\n                    case b3:\n                        h3 = (r1 - g3) / d3 + 4;\n                        break;\n                    default:\n                        break;\n                }\n                h3 /= 6;\n            }\n            return [\n                h3,\n                s4,\n                l3,\n                val3[3]\n            ];\n        }\n        function hue2rgb(p6, q1, t3) {\n            if (t3 < 0) t3 += 1;\n            if (t3 > 1) t3 -= 1;\n            if (t3 < 1 / 6) return p6 + (q1 - p6) * 6 * t3;\n            if (t3 < 1 / 2) return q1;\n            if (t3 < 2 / 3) return p6 + (q1 - p6) * (2 / 3 - t3) * 6;\n            return p6;\n        }\n        function hslToRgb(val3) {\n            var h3 = val3[0];\n            var s4 = val3[1];\n            var l3 = val3[2];\n            var r1;\n            var g3;\n            var b3;\n            if (s4 === 0) {\n                r1 = l3; // achromatic\n                b3 = l3; // achromatic\n                g3 = l3; // achromatic\n            } else {\n                var q1 = l3 < 0.5 ? l3 * (1 + s4) : l3 + s4 - l3 * s4;\n                var p6 = 2 * l3 - q1;\n                r1 = hue2rgb(p6, q1, h3 + 1 / 3);\n                g3 = hue2rgb(p6, q1, h3);\n                b3 = hue2rgb(p6, q1, h3 - 1 / 3);\n            }\n            return [\n                r1,\n                g3,\n                b3,\n                val3[3]\n            ];\n        }\n        function linear(t3, tMin1, tMax1, value11, value21) {\n            if (value11 === undefined || value21 === undefined) {\n                value11 = tMin1;\n                value21 = tMax1;\n                tMin1 = 0;\n                tMax1 = 1;\n            }\n            if (tMax1 < tMin1) {\n                var _tMin1 = tMax1;\n                tMax1 = tMin1;\n                tMin1 = _tMin1;\n            }\n            if (t3 <= tMin1) {\n                return value11;\n            }\n            if (t3 >= tMax1) {\n                return value21;\n            }\n            var perc1 = tMax1 === tMin1 ? 0 : (t3 - tMin1) / (tMax1 - tMin1);\n            if (!value11.length) {\n                return value11 + (value21 - value11) * perc1;\n            }\n            var i3;\n            var len1 = value11.length;\n            var arr3 = createTypedArray(\"float32\", len1);\n            for(i3 = 0; i3 < len1; i3 += 1){\n                arr3[i3] = value11[i3] + (value21[i3] - value11[i3]) * perc1;\n            }\n            return arr3;\n        }\n        function random(min1, max1) {\n            if (max1 === undefined) {\n                if (min1 === undefined) {\n                    min1 = 0;\n                    max1 = 1;\n                } else {\n                    max1 = min1;\n                    min1 = undefined;\n                }\n            }\n            if (max1.length) {\n                var i3;\n                var len1 = max1.length;\n                if (!min1) {\n                    min1 = createTypedArray(\"float32\", len1);\n                }\n                var arr3 = createTypedArray(\"float32\", len1);\n                var rnd1 = BMMath.random();\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    arr3[i3] = min1[i3] + rnd1 * (max1[i3] - min1[i3]);\n                }\n                return arr3;\n            }\n            if (min1 === undefined) {\n                min1 = 0;\n            }\n            var rndm1 = BMMath.random();\n            return min1 + rndm1 * (max1 - min1);\n        }\n        function createPath(points1, inTangents1, outTangents1, closed1) {\n            var i3;\n            var len1 = points1.length;\n            var path1 = shapePool.newElement();\n            path1.setPathData(!!closed1, len1);\n            var arrPlaceholder1 = [\n                0,\n                0\n            ];\n            var inVertexPoint1;\n            var outVertexPoint1;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                inVertexPoint1 = inTangents1 && inTangents1[i3] ? inTangents1[i3] : arrPlaceholder1;\n                outVertexPoint1 = outTangents1 && outTangents1[i3] ? outTangents1[i3] : arrPlaceholder1;\n                path1.setTripleAt(points1[i3][0], points1[i3][1], outVertexPoint1[0] + points1[i3][0], outVertexPoint1[1] + points1[i3][1], inVertexPoint1[0] + points1[i3][0], inVertexPoint1[1] + points1[i3][1], i3, true);\n            }\n            return path1;\n        }\n        function initiateExpression(elem, data, property) {\n            // Bail out if we don't want expressions\n            function noOp(_value1) {\n                return _value1;\n            }\n            if (!elem.globalData.renderConfig.runExpressions) {\n                return noOp;\n            }\n            var val = data.x;\n            var needsVelocity = /velocity(?![\\w\\d])/.test(val);\n            var _needsRandom = val.indexOf(\"random\") !== -1;\n            var elemType = elem.data.ty;\n            var transform;\n            var $bm_transform;\n            var content;\n            var effect;\n            var thisProperty = property;\n            thisProperty.valueAtTime = thisProperty.getValueAtTime;\n            Object.defineProperty(thisProperty, \"value\", {\n                get: function get1() {\n                    return thisProperty.v;\n                }\n            });\n            elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate;\n            elem.comp.displayStartTime = 0;\n            var inPoint = elem.data.ip / elem.comp.globalData.frameRate;\n            var outPoint = elem.data.op / elem.comp.globalData.frameRate;\n            var width = elem.data.sw ? elem.data.sw : 0;\n            var height = elem.data.sh ? elem.data.sh : 0;\n            var name = elem.data.nm;\n            var loopIn;\n            var loop_in;\n            var loopOut;\n            var loop_out;\n            var smooth;\n            var toWorld;\n            var fromWorld;\n            var fromComp;\n            var toComp;\n            var fromCompToSurface;\n            var position;\n            var rotation;\n            var anchorPoint;\n            var scale;\n            var thisLayer;\n            var thisComp;\n            var mask;\n            var valueAtTime;\n            var velocityAtTime;\n            var scoped_bm_rt; // val = val.replace(/(\\\\?\"|')((http)(s)?(:\\/))?\\/.*?(\\\\?\"|')/g, \"\\\"\\\"\"); // deter potential network calls\n            var expression_function = eval(\"[function _expression_function(){\" + val + \";scoped_bm_rt=$bm_rt}]\")[0]; // eslint-disable-line no-eval\n            var numKeys = property.kf ? data.k.length : 0;\n            var active = !this.data || this.data.hd !== true;\n            var wiggle = (function wiggle1(freq1, amp1) {\n                var iWiggle1;\n                var j3;\n                var lenWiggle1 = this.pv.length ? this.pv.length : 1;\n                var addedAmps1 = createTypedArray(\"float32\", lenWiggle1);\n                freq1 = 5;\n                var iterations1 = Math.floor(time * freq1);\n                iWiggle1 = 0;\n                j3 = 0;\n                while(iWiggle1 < iterations1){\n                    // var rnd = BMMath.random();\n                    for(j3 = 0; j3 < lenWiggle1; j3 += 1){\n                        addedAmps1[j3] += -amp1 + amp1 * 2 * BMMath.random(); // addedAmps[j] += -amp + amp*2*rnd;\n                    }\n                    iWiggle1 += 1;\n                } // var rnd2 = BMMath.random();\n                var periods1 = time * freq1;\n                var perc1 = periods1 - Math.floor(periods1);\n                var arr3 = createTypedArray(\"float32\", lenWiggle1);\n                if (lenWiggle1 > 1) {\n                    for(j3 = 0; j3 < lenWiggle1; j3 += 1){\n                        arr3[j3] = this.pv[j3] + addedAmps1[j3] + (-amp1 + amp1 * 2 * BMMath.random()) * perc1; // arr[j] = this.pv[j] + addedAmps[j] + (-amp + amp*2*rnd)*perc;\n                    // arr[i] = this.pv[i] + addedAmp + amp1*perc + amp2*(1-perc);\n                    }\n                    return arr3;\n                }\n                return this.pv + addedAmps1[0] + (-amp1 + amp1 * 2 * BMMath.random()) * perc1;\n            }).bind(this);\n            if (thisProperty.loopIn) {\n                loopIn = thisProperty.loopIn.bind(thisProperty);\n                loop_in = loopIn;\n            }\n            if (thisProperty.loopOut) {\n                loopOut = thisProperty.loopOut.bind(thisProperty);\n                loop_out = loopOut;\n            }\n            if (thisProperty.smooth) {\n                smooth = thisProperty.smooth.bind(thisProperty);\n            }\n            function loopInDuration(type1, duration1) {\n                return loopIn(type1, duration1, true);\n            }\n            function loopOutDuration(type1, duration1) {\n                return loopOut(type1, duration1, true);\n            }\n            if (this.getValueAtTime) {\n                valueAtTime = this.getValueAtTime.bind(this);\n            }\n            if (this.getVelocityAtTime) {\n                velocityAtTime = this.getVelocityAtTime.bind(this);\n            }\n            var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);\n            function lookAt(elem11, elem21) {\n                var fVec1 = [\n                    elem21[0] - elem11[0],\n                    elem21[1] - elem11[1],\n                    elem21[2] - elem11[2]\n                ];\n                var pitch1 = Math.atan2(fVec1[0], Math.sqrt(fVec1[1] * fVec1[1] + fVec1[2] * fVec1[2])) / degToRads;\n                var yaw1 = -Math.atan2(fVec1[1], fVec1[2]) / degToRads;\n                return [\n                    yaw1,\n                    pitch1,\n                    0\n                ];\n            }\n            function easeOut(t3, tMin1, tMax1, val11, val21) {\n                return applyEase(easeOutBez, t3, tMin1, tMax1, val11, val21);\n            }\n            function easeIn(t3, tMin1, tMax1, val11, val21) {\n                return applyEase(easeInBez, t3, tMin1, tMax1, val11, val21);\n            }\n            function ease(t3, tMin1, tMax1, val11, val21) {\n                return applyEase(easeInOutBez, t3, tMin1, tMax1, val11, val21);\n            }\n            function applyEase(fn1, t3, tMin1, tMax1, val11, val21) {\n                if (val11 === undefined) {\n                    val11 = tMin1;\n                    val21 = tMax1;\n                } else {\n                    t3 = (t3 - tMin1) / (tMax1 - tMin1);\n                }\n                if (t3 > 1) {\n                    t3 = 1;\n                } else if (t3 < 0) {\n                    t3 = 0;\n                }\n                var mult1 = fn1(t3);\n                if ($bm_isInstanceOfArray(val11)) {\n                    var iKey1;\n                    var lenKey1 = val11.length;\n                    var arr3 = createTypedArray(\"float32\", lenKey1);\n                    for(iKey1 = 0; iKey1 < lenKey1; iKey1 += 1){\n                        arr3[iKey1] = (val21[iKey1] - val11[iKey1]) * mult1 + val11[iKey1];\n                    }\n                    return arr3;\n                }\n                return (val21 - val11) * mult1 + val11;\n            }\n            function nearestKey(time1) {\n                var iKey1;\n                var lenKey1 = data.k.length;\n                var index1;\n                var keyTime1;\n                if (!data.k.length || typeof data.k[0] === \"number\") {\n                    index1 = 0;\n                    keyTime1 = 0;\n                } else {\n                    index1 = -1;\n                    time1 *= elem.comp.globalData.frameRate;\n                    if (time1 < data.k[0].t) {\n                        index1 = 1;\n                        keyTime1 = data.k[0].t;\n                    } else {\n                        for(iKey1 = 0; iKey1 < lenKey1 - 1; iKey1 += 1){\n                            if (time1 === data.k[iKey1].t) {\n                                index1 = iKey1 + 1;\n                                keyTime1 = data.k[iKey1].t;\n                                break;\n                            } else if (time1 > data.k[iKey1].t && time1 < data.k[iKey1 + 1].t) {\n                                if (time1 - data.k[iKey1].t > data.k[iKey1 + 1].t - time1) {\n                                    index1 = iKey1 + 2;\n                                    keyTime1 = data.k[iKey1 + 1].t;\n                                } else {\n                                    index1 = iKey1 + 1;\n                                    keyTime1 = data.k[iKey1].t;\n                                }\n                                break;\n                            }\n                        }\n                        if (index1 === -1) {\n                            index1 = iKey1 + 1;\n                            keyTime1 = data.k[iKey1].t;\n                        }\n                    }\n                }\n                var obKey1 = {};\n                obKey1.index = index1;\n                obKey1.time = keyTime1 / elem.comp.globalData.frameRate;\n                return obKey1;\n            }\n            function key(ind1) {\n                var obKey1;\n                var iKey1;\n                var lenKey1;\n                if (!data.k.length || typeof data.k[0] === \"number\") {\n                    throw new Error(\"The property has no keyframe at index \" + ind1);\n                }\n                ind1 -= 1;\n                obKey1 = {\n                    time: data.k[ind1].t / elem.comp.globalData.frameRate,\n                    value: []\n                };\n                var arr3 = Object.prototype.hasOwnProperty.call(data.k[ind1], \"s\") ? data.k[ind1].s : data.k[ind1 - 1].e;\n                lenKey1 = arr3.length;\n                for(iKey1 = 0; iKey1 < lenKey1; iKey1 += 1){\n                    obKey1[iKey1] = arr3[iKey1];\n                    obKey1.value[iKey1] = arr3[iKey1];\n                }\n                return obKey1;\n            }\n            function framesToTime(fr1, fps1) {\n                if (!fps1) {\n                    fps1 = elem.comp.globalData.frameRate;\n                }\n                return fr1 / fps1;\n            }\n            function timeToFrames(t3, fps1) {\n                if (!t3 && t3 !== 0) {\n                    t3 = time;\n                }\n                if (!fps1) {\n                    fps1 = elem.comp.globalData.frameRate;\n                }\n                return t3 * fps1;\n            }\n            function seedRandom(seed1) {\n                BMMath.seedrandom(randSeed + seed1);\n            }\n            function sourceRectAtTime() {\n                return elem.sourceRectAtTime();\n            }\n            function substring(init1, end3) {\n                if (typeof value === \"string\") {\n                    if (end3 === undefined) {\n                        return value.substring(init1);\n                    }\n                    return value.substring(init1, end3);\n                }\n                return \"\";\n            }\n            function substr(init1, end3) {\n                if (typeof value === \"string\") {\n                    if (end3 === undefined) {\n                        return value.substr(init1);\n                    }\n                    return value.substr(init1, end3);\n                }\n                return \"\";\n            }\n            function posterizeTime(framesPerSecond1) {\n                time = framesPerSecond1 === 0 ? 0 : Math.floor(time * framesPerSecond1) / framesPerSecond1;\n                value = valueAtTime(time);\n            }\n            var time;\n            var velocity;\n            var value;\n            var text;\n            var textIndex;\n            var textTotal;\n            var selectorValue;\n            var index = elem.data.ind;\n            var hasParent = !!(elem.hierarchy && elem.hierarchy.length);\n            var parent;\n            var randSeed = Math.floor(Math.random() * 1000000);\n            var globalData = elem.globalData;\n            function executeExpression(_value1) {\n                // globalData.pushExpression();\n                value = _value1;\n                if (this.frameExpressionId === elem.globalData.frameId && this.propType !== \"textSelector\") {\n                    return value;\n                }\n                if (this.propType === \"textSelector\") {\n                    textIndex = this.textIndex;\n                    textTotal = this.textTotal;\n                    selectorValue = this.selectorValue;\n                }\n                if (!thisLayer) {\n                    text = elem.layerInterface.text;\n                    thisLayer = elem.layerInterface;\n                    thisComp = elem.comp.compInterface;\n                    toWorld = thisLayer.toWorld.bind(thisLayer);\n                    fromWorld = thisLayer.fromWorld.bind(thisLayer);\n                    fromComp = thisLayer.fromComp.bind(thisLayer);\n                    toComp = thisLayer.toComp.bind(thisLayer);\n                    mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;\n                    fromCompToSurface = fromComp;\n                }\n                if (!transform) {\n                    transform = elem.layerInterface(\"ADBE Transform Group\");\n                    $bm_transform = transform;\n                    if (transform) {\n                        anchorPoint = transform.anchorPoint;\n                    /* position = transform.position;\r\n                      rotation = transform.rotation;\r\n                      scale = transform.scale; */ }\n                }\n                if (elemType === 4 && !content) {\n                    content = thisLayer(\"ADBE Root Vectors Group\");\n                }\n                if (!effect) {\n                    effect = thisLayer(4);\n                }\n                hasParent = !!(elem.hierarchy && elem.hierarchy.length);\n                if (hasParent && !parent) {\n                    parent = elem.hierarchy[0].layerInterface;\n                }\n                time = this.comp.renderedFrame / this.comp.globalData.frameRate;\n                if (_needsRandom) {\n                    seedRandom(randSeed + time);\n                }\n                if (needsVelocity) {\n                    velocity = velocityAtTime(time);\n                }\n                expression_function();\n                this.frameExpressionId = elem.globalData.frameId; // TODO: Check if it's possible to return on ShapeInterface the .v value\n                // Changed this to a ternary operation because Rollup failed compiling it correctly\n                scoped_bm_rt = scoped_bm_rt.propType === propTypes.SHAPE ? scoped_bm_rt.v : scoped_bm_rt;\n                return scoped_bm_rt;\n            } // Bundlers will see these as dead code and unless we reference them\n            executeExpression.__preventDeadCodeRemoval = [\n                $bm_transform,\n                anchorPoint,\n                time,\n                velocity,\n                inPoint,\n                outPoint,\n                width,\n                height,\n                name,\n                loop_in,\n                loop_out,\n                smooth,\n                toComp,\n                fromCompToSurface,\n                toWorld,\n                fromWorld,\n                mask,\n                position,\n                rotation,\n                scale,\n                thisComp,\n                numKeys,\n                active,\n                wiggle,\n                loopInDuration,\n                loopOutDuration,\n                comp,\n                lookAt,\n                easeOut,\n                easeIn,\n                ease,\n                nearestKey,\n                key,\n                text,\n                textIndex,\n                textTotal,\n                selectorValue,\n                framesToTime,\n                timeToFrames,\n                sourceRectAtTime,\n                substring,\n                substr,\n                posterizeTime,\n                index,\n                globalData\n            ];\n            return executeExpression;\n        }\n        ob.initiateExpression = initiateExpression;\n        ob.__preventDeadCodeRemoval = [\n            window,\n            document,\n            XMLHttpRequest,\n            fetch,\n            frames,\n            $bm_neg,\n            add,\n            $bm_sum,\n            $bm_sub,\n            $bm_mul,\n            $bm_div,\n            $bm_mod,\n            clamp,\n            radians_to_degrees,\n            degreesToRadians,\n            degrees_to_radians,\n            normalize,\n            rgbToHsl,\n            hslToRgb,\n            linear,\n            random,\n            createPath,\n            _lottieGlobal\n        ];\n        ob.resetFrame = resetFrame;\n        return ob;\n    }();\n    var Expressions = function() {\n        var ob1 = {};\n        ob1.initExpressions = initExpressions1;\n        ob1.resetFrame = ExpressionManager.resetFrame;\n        function initExpressions1(animation1) {\n            var stackCount1 = 0;\n            var registers1 = [];\n            function pushExpression1() {\n                stackCount1 += 1;\n            }\n            function popExpression1() {\n                stackCount1 -= 1;\n                if (stackCount1 === 0) {\n                    releaseInstances1();\n                }\n            }\n            function registerExpressionProperty1(expression1) {\n                if (registers1.indexOf(expression1) === -1) {\n                    registers1.push(expression1);\n                }\n            }\n            function releaseInstances1() {\n                var i3;\n                var len1 = registers1.length;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    registers1[i3].release();\n                }\n                registers1.length = 0;\n            }\n            animation1.renderer.compInterface = CompExpressionInterface(animation1.renderer);\n            animation1.renderer.globalData.projectInterface.registerComposition(animation1.renderer);\n            animation1.renderer.globalData.pushExpression = pushExpression1;\n            animation1.renderer.globalData.popExpression = popExpression1;\n            animation1.renderer.globalData.registerExpressionProperty = registerExpressionProperty1;\n        }\n        return ob1;\n    }();\n    var MaskManagerInterface = function() {\n        function MaskInterface1(mask1, data1) {\n            this._mask = mask1;\n            this._data = data1;\n        }\n        Object.defineProperty(MaskInterface1.prototype, \"maskPath\", {\n            get: function get1() {\n                if (this._mask.prop.k) {\n                    this._mask.prop.getValue();\n                }\n                return this._mask.prop;\n            }\n        });\n        Object.defineProperty(MaskInterface1.prototype, \"maskOpacity\", {\n            get: function get1() {\n                if (this._mask.op.k) {\n                    this._mask.op.getValue();\n                }\n                return this._mask.op.v * 100;\n            }\n        });\n        var MaskManager1 = function MaskManager1(maskManager1) {\n            var _masksInterfaces1 = createSizedArray(maskManager1.viewData.length);\n            var i3;\n            var len1 = maskManager1.viewData.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                _masksInterfaces1[i3] = new MaskInterface1(maskManager1.viewData[i3], maskManager1.masksProperties[i3]);\n            }\n            var maskFunction1 = function maskFunction1(name1) {\n                i3 = 0;\n                while(i3 < len1){\n                    if (maskManager1.masksProperties[i3].nm === name1) {\n                        return _masksInterfaces1[i3];\n                    }\n                    i3 += 1;\n                }\n                return null;\n            };\n            return maskFunction1;\n        };\n        return MaskManager1;\n    }();\n    var ExpressionPropertyInterface = function() {\n        var defaultUnidimensionalValue1 = {\n            pv: 0,\n            v: 0,\n            mult: 1\n        };\n        var defaultMultidimensionalValue1 = {\n            pv: [\n                0,\n                0,\n                0\n            ],\n            v: [\n                0,\n                0,\n                0\n            ],\n            mult: 1\n        };\n        function completeProperty1(expressionValue1, property1, type1) {\n            Object.defineProperty(expressionValue1, \"velocity\", {\n                get: function get1() {\n                    return property1.getVelocityAtTime(property1.comp.currentFrame);\n                }\n            });\n            expressionValue1.numKeys = property1.keyframes ? property1.keyframes.length : 0;\n            expressionValue1.key = function(pos1) {\n                if (!expressionValue1.numKeys) {\n                    return 0;\n                }\n                var value3 = \"\";\n                if (\"s\" in property1.keyframes[pos1 - 1]) {\n                    value3 = property1.keyframes[pos1 - 1].s;\n                } else if (\"e\" in property1.keyframes[pos1 - 2]) {\n                    value3 = property1.keyframes[pos1 - 2].e;\n                } else {\n                    value3 = property1.keyframes[pos1 - 2].s;\n                }\n                var valueProp1 = type1 === \"unidimensional\" ? new Number(value3) : Object.assign({}, value3); // eslint-disable-line no-new-wrappers\n                valueProp1.time = property1.keyframes[pos1 - 1].t / property1.elem.comp.globalData.frameRate;\n                valueProp1.value = type1 === \"unidimensional\" ? value3[0] : value3;\n                return valueProp1;\n            };\n            expressionValue1.valueAtTime = property1.getValueAtTime;\n            expressionValue1.speedAtTime = property1.getSpeedAtTime;\n            expressionValue1.velocityAtTime = property1.getVelocityAtTime;\n            expressionValue1.propertyGroup = property1.propertyGroup;\n        }\n        function UnidimensionalPropertyInterface1(property1) {\n            if (!property1 || !(\"pv\" in property1)) {\n                property1 = defaultUnidimensionalValue1;\n            }\n            var mult1 = 1 / property1.mult;\n            var val3 = property1.pv * mult1;\n            var expressionValue1 = new Number(val3); // eslint-disable-line no-new-wrappers\n            expressionValue1.value = val3;\n            completeProperty1(expressionValue1, property1, \"unidimensional\");\n            return function() {\n                if (property1.k) {\n                    property1.getValue();\n                }\n                val3 = property1.v * mult1;\n                if (expressionValue1.value !== val3) {\n                    expressionValue1 = new Number(val3); // eslint-disable-line no-new-wrappers\n                    expressionValue1.value = val3;\n                    completeProperty1(expressionValue1, property1, \"unidimensional\");\n                }\n                return expressionValue1;\n            };\n        }\n        function MultidimensionalPropertyInterface1(property1) {\n            if (!property1 || !(\"pv\" in property1)) {\n                property1 = defaultMultidimensionalValue1;\n            }\n            var mult1 = 1 / property1.mult;\n            var len1 = property1.data && property1.data.l || property1.pv.length;\n            var expressionValue1 = createTypedArray(\"float32\", len1);\n            var arrValue1 = createTypedArray(\"float32\", len1);\n            expressionValue1.value = arrValue1;\n            completeProperty1(expressionValue1, property1, \"multidimensional\");\n            return function() {\n                if (property1.k) {\n                    property1.getValue();\n                }\n                for(var i3 = 0; i3 < len1; i3 += 1){\n                    arrValue1[i3] = property1.v[i3] * mult1;\n                    expressionValue1[i3] = arrValue1[i3];\n                }\n                return expressionValue1;\n            };\n        } // TODO: try to avoid using this getter\n        function defaultGetter1() {\n            return defaultUnidimensionalValue1;\n        }\n        return function(property1) {\n            if (!property1) {\n                return defaultGetter1;\n            }\n            if (property1.propType === \"unidimensional\") {\n                return UnidimensionalPropertyInterface1(property1);\n            }\n            return MultidimensionalPropertyInterface1(property1);\n        };\n    }();\n    var TransformExpressionInterface = function() {\n        return function(transform1) {\n            function _thisFunction1(name1) {\n                switch(name1){\n                    case \"scale\":\n                    case \"Scale\":\n                    case \"ADBE Scale\":\n                    case 6:\n                        return _thisFunction1.scale;\n                    case \"rotation\":\n                    case \"Rotation\":\n                    case \"ADBE Rotation\":\n                    case \"ADBE Rotate Z\":\n                    case 10:\n                        return _thisFunction1.rotation;\n                    case \"ADBE Rotate X\":\n                        return _thisFunction1.xRotation;\n                    case \"ADBE Rotate Y\":\n                        return _thisFunction1.yRotation;\n                    case \"position\":\n                    case \"Position\":\n                    case \"ADBE Position\":\n                    case 2:\n                        return _thisFunction1.position;\n                    case \"ADBE Position_0\":\n                        return _thisFunction1.xPosition;\n                    case \"ADBE Position_1\":\n                        return _thisFunction1.yPosition;\n                    case \"ADBE Position_2\":\n                        return _thisFunction1.zPosition;\n                    case \"anchorPoint\":\n                    case \"AnchorPoint\":\n                    case \"Anchor Point\":\n                    case \"ADBE AnchorPoint\":\n                    case 1:\n                        return _thisFunction1.anchorPoint;\n                    case \"opacity\":\n                    case \"Opacity\":\n                    case 11:\n                        return _thisFunction1.opacity;\n                    default:\n                        return null;\n                }\n            }\n            Object.defineProperty(_thisFunction1, \"rotation\", {\n                get: ExpressionPropertyInterface(transform1.r || transform1.rz)\n            });\n            Object.defineProperty(_thisFunction1, \"zRotation\", {\n                get: ExpressionPropertyInterface(transform1.rz || transform1.r)\n            });\n            Object.defineProperty(_thisFunction1, \"xRotation\", {\n                get: ExpressionPropertyInterface(transform1.rx)\n            });\n            Object.defineProperty(_thisFunction1, \"yRotation\", {\n                get: ExpressionPropertyInterface(transform1.ry)\n            });\n            Object.defineProperty(_thisFunction1, \"scale\", {\n                get: ExpressionPropertyInterface(transform1.s)\n            });\n            var _px1;\n            var _py1;\n            var _pz1;\n            var _transformFactory1;\n            if (transform1.p) {\n                _transformFactory1 = ExpressionPropertyInterface(transform1.p);\n            } else {\n                _px1 = ExpressionPropertyInterface(transform1.px);\n                _py1 = ExpressionPropertyInterface(transform1.py);\n                if (transform1.pz) {\n                    _pz1 = ExpressionPropertyInterface(transform1.pz);\n                }\n            }\n            Object.defineProperty(_thisFunction1, \"position\", {\n                get: function get1() {\n                    if (transform1.p) {\n                        return _transformFactory1();\n                    }\n                    return [\n                        _px1(),\n                        _py1(),\n                        _pz1 ? _pz1() : 0\n                    ];\n                }\n            });\n            Object.defineProperty(_thisFunction1, \"xPosition\", {\n                get: ExpressionPropertyInterface(transform1.px)\n            });\n            Object.defineProperty(_thisFunction1, \"yPosition\", {\n                get: ExpressionPropertyInterface(transform1.py)\n            });\n            Object.defineProperty(_thisFunction1, \"zPosition\", {\n                get: ExpressionPropertyInterface(transform1.pz)\n            });\n            Object.defineProperty(_thisFunction1, \"anchorPoint\", {\n                get: ExpressionPropertyInterface(transform1.a)\n            });\n            Object.defineProperty(_thisFunction1, \"opacity\", {\n                get: ExpressionPropertyInterface(transform1.o)\n            });\n            Object.defineProperty(_thisFunction1, \"skew\", {\n                get: ExpressionPropertyInterface(transform1.sk)\n            });\n            Object.defineProperty(_thisFunction1, \"skewAxis\", {\n                get: ExpressionPropertyInterface(transform1.sa)\n            });\n            Object.defineProperty(_thisFunction1, \"orientation\", {\n                get: ExpressionPropertyInterface(transform1.or)\n            });\n            return _thisFunction1;\n        };\n    }();\n    var LayerExpressionInterface = function() {\n        function getMatrix1(time1) {\n            var toWorldMat1 = new Matrix();\n            if (time1 !== undefined) {\n                var propMatrix1 = this._elem.finalTransform.mProp.getValueAtTime(time1);\n                propMatrix1.clone(toWorldMat1);\n            } else {\n                var transformMat1 = this._elem.finalTransform.mProp;\n                transformMat1.applyToMatrix(toWorldMat1);\n            }\n            return toWorldMat1;\n        }\n        function toWorldVec1(arr3, time1) {\n            var toWorldMat1 = this.getMatrix(time1);\n            toWorldMat1.props[12] = 0;\n            toWorldMat1.props[13] = 0;\n            toWorldMat1.props[14] = 0;\n            return this.applyPoint(toWorldMat1, arr3);\n        }\n        function toWorld1(arr3, time1) {\n            var toWorldMat1 = this.getMatrix(time1);\n            return this.applyPoint(toWorldMat1, arr3);\n        }\n        function fromWorldVec1(arr3, time1) {\n            var toWorldMat1 = this.getMatrix(time1);\n            toWorldMat1.props[12] = 0;\n            toWorldMat1.props[13] = 0;\n            toWorldMat1.props[14] = 0;\n            return this.invertPoint(toWorldMat1, arr3);\n        }\n        function fromWorld1(arr3, time1) {\n            var toWorldMat1 = this.getMatrix(time1);\n            return this.invertPoint(toWorldMat1, arr3);\n        }\n        function applyPoint1(matrix1, arr3) {\n            if (this._elem.hierarchy && this._elem.hierarchy.length) {\n                var i3;\n                var len1 = this._elem.hierarchy.length;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    this._elem.hierarchy[i3].finalTransform.mProp.applyToMatrix(matrix1);\n                }\n            }\n            return matrix1.applyToPointArray(arr3[0], arr3[1], arr3[2] || 0);\n        }\n        function invertPoint1(matrix1, arr3) {\n            if (this._elem.hierarchy && this._elem.hierarchy.length) {\n                var i3;\n                var len1 = this._elem.hierarchy.length;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    this._elem.hierarchy[i3].finalTransform.mProp.applyToMatrix(matrix1);\n                }\n            }\n            return matrix1.inversePoint(arr3);\n        }\n        function fromComp1(arr3) {\n            var toWorldMat1 = new Matrix();\n            toWorldMat1.reset();\n            this._elem.finalTransform.mProp.applyToMatrix(toWorldMat1);\n            if (this._elem.hierarchy && this._elem.hierarchy.length) {\n                var i3;\n                var len1 = this._elem.hierarchy.length;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    this._elem.hierarchy[i3].finalTransform.mProp.applyToMatrix(toWorldMat1);\n                }\n                return toWorldMat1.inversePoint(arr3);\n            }\n            return toWorldMat1.inversePoint(arr3);\n        }\n        function sampleImage1() {\n            return [\n                1,\n                1,\n                1,\n                1\n            ];\n        }\n        return function(elem3) {\n            var transformInterface1;\n            function _registerMaskInterface1(maskManager1) {\n                _thisLayerFunction1.mask = new MaskManagerInterface(maskManager1, elem3);\n            }\n            function _registerEffectsInterface1(effects1) {\n                _thisLayerFunction1.effect = effects1;\n            }\n            function _thisLayerFunction1(name1) {\n                switch(name1){\n                    case \"ADBE Root Vectors Group\":\n                    case \"Contents\":\n                    case 2:\n                        return _thisLayerFunction1.shapeInterface;\n                    case 1:\n                    case 6:\n                    case \"Transform\":\n                    case \"transform\":\n                    case \"ADBE Transform Group\":\n                        return transformInterface1;\n                    case 4:\n                    case \"ADBE Effect Parade\":\n                    case \"effects\":\n                    case \"Effects\":\n                        return _thisLayerFunction1.effect;\n                    case \"ADBE Text Properties\":\n                        return _thisLayerFunction1.textInterface;\n                    default:\n                        return null;\n                }\n            }\n            _thisLayerFunction1.getMatrix = getMatrix1;\n            _thisLayerFunction1.invertPoint = invertPoint1;\n            _thisLayerFunction1.applyPoint = applyPoint1;\n            _thisLayerFunction1.toWorld = toWorld1;\n            _thisLayerFunction1.toWorldVec = toWorldVec1;\n            _thisLayerFunction1.fromWorld = fromWorld1;\n            _thisLayerFunction1.fromWorldVec = fromWorldVec1;\n            _thisLayerFunction1.toComp = toWorld1;\n            _thisLayerFunction1.fromComp = fromComp1;\n            _thisLayerFunction1.sampleImage = sampleImage1;\n            _thisLayerFunction1.sourceRectAtTime = elem3.sourceRectAtTime.bind(elem3);\n            _thisLayerFunction1._elem = elem3;\n            transformInterface1 = TransformExpressionInterface(elem3.finalTransform.mProp);\n            var anchorPointDescriptor1 = getDescriptor(transformInterface1, \"anchorPoint\");\n            Object.defineProperties(_thisLayerFunction1, {\n                hasParent: {\n                    get: function get1() {\n                        return elem3.hierarchy.length;\n                    }\n                },\n                parent: {\n                    get: function get1() {\n                        return elem3.hierarchy[0].layerInterface;\n                    }\n                },\n                rotation: getDescriptor(transformInterface1, \"rotation\"),\n                scale: getDescriptor(transformInterface1, \"scale\"),\n                position: getDescriptor(transformInterface1, \"position\"),\n                opacity: getDescriptor(transformInterface1, \"opacity\"),\n                anchorPoint: anchorPointDescriptor1,\n                anchor_point: anchorPointDescriptor1,\n                transform: {\n                    get: function get1() {\n                        return transformInterface1;\n                    }\n                },\n                active: {\n                    get: function get1() {\n                        return elem3.isInRange;\n                    }\n                }\n            });\n            _thisLayerFunction1.startTime = elem3.data.st;\n            _thisLayerFunction1.index = elem3.data.ind;\n            _thisLayerFunction1.source = elem3.data.refId;\n            _thisLayerFunction1.height = elem3.data.ty === 0 ? elem3.data.h : 100;\n            _thisLayerFunction1.width = elem3.data.ty === 0 ? elem3.data.w : 100;\n            _thisLayerFunction1.inPoint = elem3.data.ip / elem3.comp.globalData.frameRate;\n            _thisLayerFunction1.outPoint = elem3.data.op / elem3.comp.globalData.frameRate;\n            _thisLayerFunction1._name = elem3.data.nm;\n            _thisLayerFunction1.registerMaskInterface = _registerMaskInterface1;\n            _thisLayerFunction1.registerEffectsInterface = _registerEffectsInterface1;\n            return _thisLayerFunction1;\n        };\n    }();\n    var propertyGroupFactory = function() {\n        return function(interfaceFunction1, parentPropertyGroup1) {\n            return function(val3) {\n                val3 = val3 === undefined ? 1 : val3;\n                if (val3 <= 0) {\n                    return interfaceFunction1;\n                }\n                return parentPropertyGroup1(val3 - 1);\n            };\n        };\n    }();\n    var PropertyInterface = function() {\n        return function(propertyName1, propertyGroup1) {\n            var interfaceFunction1 = {\n                _name: propertyName1\n            };\n            function _propertyGroup1(val3) {\n                val3 = val3 === undefined ? 1 : val3;\n                if (val3 <= 0) {\n                    return interfaceFunction1;\n                }\n                return propertyGroup1(val3 - 1);\n            }\n            return _propertyGroup1;\n        };\n    }();\n    var EffectsExpressionInterface = function() {\n        var ob1 = {\n            createEffectsInterface: createEffectsInterface1\n        };\n        function createEffectsInterface1(elem3, propertyGroup1) {\n            if (elem3.effectsManager) {\n                var effectElements1 = [];\n                var effectsData1 = elem3.data.ef;\n                var i3;\n                var len1 = elem3.effectsManager.effectElements.length;\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    effectElements1.push(createGroupInterface1(effectsData1[i3], elem3.effectsManager.effectElements[i3], propertyGroup1, elem3));\n                }\n                var effects1 = elem3.data.ef || [];\n                var groupInterface1 = function groupInterface1(name1) {\n                    i3 = 0;\n                    len1 = effects1.length;\n                    while(i3 < len1){\n                        if (name1 === effects1[i3].nm || name1 === effects1[i3].mn || name1 === effects1[i3].ix) {\n                            return effectElements1[i3];\n                        }\n                        i3 += 1;\n                    }\n                    return null;\n                };\n                Object.defineProperty(groupInterface1, \"numProperties\", {\n                    get: function get1() {\n                        return effects1.length;\n                    }\n                });\n                return groupInterface1;\n            }\n            return null;\n        }\n        function createGroupInterface1(data1, elements1, propertyGroup1, elem3) {\n            function groupInterface1(name1) {\n                var effects1 = data1.ef;\n                var i3 = 0;\n                var len1 = effects1.length;\n                while(i3 < len1){\n                    if (name1 === effects1[i3].nm || name1 === effects1[i3].mn || name1 === effects1[i3].ix) {\n                        if (effects1[i3].ty === 5) {\n                            return effectElements1[i3];\n                        }\n                        return effectElements1[i3]();\n                    }\n                    i3 += 1;\n                }\n                throw new Error();\n            }\n            var _propertyGroup1 = propertyGroupFactory(groupInterface1, propertyGroup1);\n            var effectElements1 = [];\n            var i3;\n            var len1 = data1.ef.length;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                if (data1.ef[i3].ty === 5) {\n                    effectElements1.push(createGroupInterface1(data1.ef[i3], elements1.effectElements[i3], elements1.effectElements[i3].propertyGroup, elem3));\n                } else {\n                    effectElements1.push(createValueInterface1(elements1.effectElements[i3], data1.ef[i3].ty, elem3, _propertyGroup1));\n                }\n            }\n            if (data1.mn === \"ADBE Color Control\") {\n                Object.defineProperty(groupInterface1, \"color\", {\n                    get: function get1() {\n                        return effectElements1[0]();\n                    }\n                });\n            }\n            Object.defineProperties(groupInterface1, {\n                numProperties: {\n                    get: function get1() {\n                        return data1.np;\n                    }\n                },\n                _name: {\n                    value: data1.nm\n                },\n                propertyGroup: {\n                    value: _propertyGroup1\n                }\n            });\n            groupInterface1.enabled = data1.en !== 0;\n            groupInterface1.active = groupInterface1.enabled;\n            return groupInterface1;\n        }\n        function createValueInterface1(element1, type1, elem3, propertyGroup1) {\n            var expressionProperty1 = ExpressionPropertyInterface(element1.p);\n            function interfaceFunction1() {\n                if (type1 === 10) {\n                    return elem3.comp.compInterface(element1.p.v);\n                }\n                return expressionProperty1();\n            }\n            if (element1.p.setGroupProperty) {\n                element1.p.setGroupProperty(PropertyInterface(\"\", propertyGroup1));\n            }\n            return interfaceFunction1;\n        }\n        return ob1;\n    }();\n    var ShapePathInterface = function() {\n        return function pathInterfaceFactory1(shape3, view1, propertyGroup1) {\n            var prop1 = view1.sh;\n            function interfaceFunction1(val3) {\n                if (val3 === \"Shape\" || val3 === \"shape\" || val3 === \"Path\" || val3 === \"path\" || val3 === \"ADBE Vector Shape\" || val3 === 2) {\n                    return interfaceFunction1.path;\n                }\n                return null;\n            }\n            var _propertyGroup1 = propertyGroupFactory(interfaceFunction1, propertyGroup1);\n            prop1.setGroupProperty(PropertyInterface(\"Path\", _propertyGroup1));\n            Object.defineProperties(interfaceFunction1, {\n                path: {\n                    get: function get1() {\n                        if (prop1.k) {\n                            prop1.getValue();\n                        }\n                        return prop1;\n                    }\n                },\n                shape: {\n                    get: function get1() {\n                        if (prop1.k) {\n                            prop1.getValue();\n                        }\n                        return prop1;\n                    }\n                },\n                _name: {\n                    value: shape3.nm\n                },\n                ix: {\n                    value: shape3.ix\n                },\n                propertyIndex: {\n                    value: shape3.ix\n                },\n                mn: {\n                    value: shape3.mn\n                },\n                propertyGroup: {\n                    value: propertyGroup1\n                }\n            });\n            return interfaceFunction1;\n        };\n    }();\n    var ShapeExpressionInterface = function() {\n        function iterateElements1(shapes1, view1, propertyGroup1) {\n            var arr3 = [];\n            var i3;\n            var len1 = shapes1 ? shapes1.length : 0;\n            for(i3 = 0; i3 < len1; i3 += 1){\n                if (shapes1[i3].ty === \"gr\") {\n                    arr3.push(groupInterfaceFactory1(shapes1[i3], view1[i3], propertyGroup1));\n                } else if (shapes1[i3].ty === \"fl\") {\n                    arr3.push(fillInterfaceFactory1(shapes1[i3], view1[i3], propertyGroup1));\n                } else if (shapes1[i3].ty === \"st\") {\n                    arr3.push(strokeInterfaceFactory1(shapes1[i3], view1[i3], propertyGroup1));\n                } else if (shapes1[i3].ty === \"tm\") {\n                    arr3.push(trimInterfaceFactory1(shapes1[i3], view1[i3], propertyGroup1));\n                } else if (shapes1[i3].ty === \"tr\") {} else if (shapes1[i3].ty === \"el\") {\n                    arr3.push(ellipseInterfaceFactory1(shapes1[i3], view1[i3], propertyGroup1));\n                } else if (shapes1[i3].ty === \"sr\") {\n                    arr3.push(starInterfaceFactory1(shapes1[i3], view1[i3], propertyGroup1));\n                } else if (shapes1[i3].ty === \"sh\") {\n                    arr3.push(ShapePathInterface(shapes1[i3], view1[i3], propertyGroup1));\n                } else if (shapes1[i3].ty === \"rc\") {\n                    arr3.push(rectInterfaceFactory1(shapes1[i3], view1[i3], propertyGroup1));\n                } else if (shapes1[i3].ty === \"rd\") {\n                    arr3.push(roundedInterfaceFactory1(shapes1[i3], view1[i3], propertyGroup1));\n                } else if (shapes1[i3].ty === \"rp\") {\n                    arr3.push(repeaterInterfaceFactory1(shapes1[i3], view1[i3], propertyGroup1));\n                } else if (shapes1[i3].ty === \"gf\") {\n                    arr3.push(gradientFillInterfaceFactory1(shapes1[i3], view1[i3], propertyGroup1));\n                } else {\n                    arr3.push(defaultInterfaceFactory1(shapes1[i3], view1[i3], propertyGroup1));\n                }\n            }\n            return arr3;\n        }\n        function contentsInterfaceFactory1(shape3, view1, propertyGroup1) {\n            var interfaces1;\n            var interfaceFunction1 = function _interfaceFunction1(value3) {\n                var i3 = 0;\n                var len1 = interfaces1.length;\n                while(i3 < len1){\n                    if (interfaces1[i3]._name === value3 || interfaces1[i3].mn === value3 || interfaces1[i3].propertyIndex === value3 || interfaces1[i3].ix === value3 || interfaces1[i3].ind === value3) {\n                        return interfaces1[i3];\n                    }\n                    i3 += 1;\n                }\n                if (typeof value3 === \"number\") {\n                    return interfaces1[value3 - 1];\n                }\n                return null;\n            };\n            interfaceFunction1.propertyGroup = propertyGroupFactory(interfaceFunction1, propertyGroup1);\n            interfaces1 = iterateElements1(shape3.it, view1.it, interfaceFunction1.propertyGroup);\n            interfaceFunction1.numProperties = interfaces1.length;\n            var transformInterface1 = transformInterfaceFactory1(shape3.it[shape3.it.length - 1], view1.it[view1.it.length - 1], interfaceFunction1.propertyGroup);\n            interfaceFunction1.transform = transformInterface1;\n            interfaceFunction1.propertyIndex = shape3.cix;\n            interfaceFunction1._name = shape3.nm;\n            return interfaceFunction1;\n        }\n        function groupInterfaceFactory1(shape3, view1, propertyGroup1) {\n            var interfaceFunction1 = function _interfaceFunction1(value3) {\n                switch(value3){\n                    case \"ADBE Vectors Group\":\n                    case \"Contents\":\n                    case 2:\n                        return interfaceFunction1.content;\n                    // Not necessary for now. Keeping them here in case a new case appears\n                    // case 'ADBE Vector Transform Group':\n                    // case 3:\n                    default:\n                        return interfaceFunction1.transform;\n                }\n            };\n            interfaceFunction1.propertyGroup = propertyGroupFactory(interfaceFunction1, propertyGroup1);\n            var content1 = contentsInterfaceFactory1(shape3, view1, interfaceFunction1.propertyGroup);\n            var transformInterface1 = transformInterfaceFactory1(shape3.it[shape3.it.length - 1], view1.it[view1.it.length - 1], interfaceFunction1.propertyGroup);\n            interfaceFunction1.content = content1;\n            interfaceFunction1.transform = transformInterface1;\n            Object.defineProperty(interfaceFunction1, \"_name\", {\n                get: function get1() {\n                    return shape3.nm;\n                }\n            }); // interfaceFunction.content = interfaceFunction;\n            interfaceFunction1.numProperties = shape3.np;\n            interfaceFunction1.propertyIndex = shape3.ix;\n            interfaceFunction1.nm = shape3.nm;\n            interfaceFunction1.mn = shape3.mn;\n            return interfaceFunction1;\n        }\n        function fillInterfaceFactory1(shape3, view1, propertyGroup1) {\n            function interfaceFunction1(val3) {\n                if (val3 === \"Color\" || val3 === \"color\") {\n                    return interfaceFunction1.color;\n                }\n                if (val3 === \"Opacity\" || val3 === \"opacity\") {\n                    return interfaceFunction1.opacity;\n                }\n                return null;\n            }\n            Object.defineProperties(interfaceFunction1, {\n                color: {\n                    get: ExpressionPropertyInterface(view1.c)\n                },\n                opacity: {\n                    get: ExpressionPropertyInterface(view1.o)\n                },\n                _name: {\n                    value: shape3.nm\n                },\n                mn: {\n                    value: shape3.mn\n                }\n            });\n            view1.c.setGroupProperty(PropertyInterface(\"Color\", propertyGroup1));\n            view1.o.setGroupProperty(PropertyInterface(\"Opacity\", propertyGroup1));\n            return interfaceFunction1;\n        }\n        function gradientFillInterfaceFactory1(shape3, view1, propertyGroup1) {\n            function interfaceFunction1(val3) {\n                if (val3 === \"Start Point\" || val3 === \"start point\") {\n                    return interfaceFunction1.startPoint;\n                }\n                if (val3 === \"End Point\" || val3 === \"end point\") {\n                    return interfaceFunction1.endPoint;\n                }\n                if (val3 === \"Opacity\" || val3 === \"opacity\") {\n                    return interfaceFunction1.opacity;\n                }\n                return null;\n            }\n            Object.defineProperties(interfaceFunction1, {\n                startPoint: {\n                    get: ExpressionPropertyInterface(view1.s)\n                },\n                endPoint: {\n                    get: ExpressionPropertyInterface(view1.e)\n                },\n                opacity: {\n                    get: ExpressionPropertyInterface(view1.o)\n                },\n                type: {\n                    get: function get1() {\n                        return \"a\";\n                    }\n                },\n                _name: {\n                    value: shape3.nm\n                },\n                mn: {\n                    value: shape3.mn\n                }\n            });\n            view1.s.setGroupProperty(PropertyInterface(\"Start Point\", propertyGroup1));\n            view1.e.setGroupProperty(PropertyInterface(\"End Point\", propertyGroup1));\n            view1.o.setGroupProperty(PropertyInterface(\"Opacity\", propertyGroup1));\n            return interfaceFunction1;\n        }\n        function defaultInterfaceFactory1() {\n            function interfaceFunction1() {\n                return null;\n            }\n            return interfaceFunction1;\n        }\n        function strokeInterfaceFactory1(shape3, view1, propertyGroup1) {\n            var _propertyGroup1 = propertyGroupFactory(interfaceFunction1, propertyGroup1);\n            var _dashPropertyGroup1 = propertyGroupFactory(dashOb1, _propertyGroup1);\n            function addPropertyToDashOb1(i3) {\n                Object.defineProperty(dashOb1, shape3.d[i3].nm, {\n                    get: ExpressionPropertyInterface(view1.d.dataProps[i3].p)\n                });\n            }\n            var i3;\n            var len1 = shape3.d ? shape3.d.length : 0;\n            var dashOb1 = {};\n            for(i3 = 0; i3 < len1; i3 += 1){\n                addPropertyToDashOb1(i3);\n                view1.d.dataProps[i3].p.setGroupProperty(_dashPropertyGroup1);\n            }\n            function interfaceFunction1(val3) {\n                if (val3 === \"Color\" || val3 === \"color\") {\n                    return interfaceFunction1.color;\n                }\n                if (val3 === \"Opacity\" || val3 === \"opacity\") {\n                    return interfaceFunction1.opacity;\n                }\n                if (val3 === \"Stroke Width\" || val3 === \"stroke width\") {\n                    return interfaceFunction1.strokeWidth;\n                }\n                return null;\n            }\n            Object.defineProperties(interfaceFunction1, {\n                color: {\n                    get: ExpressionPropertyInterface(view1.c)\n                },\n                opacity: {\n                    get: ExpressionPropertyInterface(view1.o)\n                },\n                strokeWidth: {\n                    get: ExpressionPropertyInterface(view1.w)\n                },\n                dash: {\n                    get: function get1() {\n                        return dashOb1;\n                    }\n                },\n                _name: {\n                    value: shape3.nm\n                },\n                mn: {\n                    value: shape3.mn\n                }\n            });\n            view1.c.setGroupProperty(PropertyInterface(\"Color\", _propertyGroup1));\n            view1.o.setGroupProperty(PropertyInterface(\"Opacity\", _propertyGroup1));\n            view1.w.setGroupProperty(PropertyInterface(\"Stroke Width\", _propertyGroup1));\n            return interfaceFunction1;\n        }\n        function trimInterfaceFactory1(shape3, view1, propertyGroup1) {\n            function interfaceFunction1(val3) {\n                if (val3 === shape3.e.ix || val3 === \"End\" || val3 === \"end\") {\n                    return interfaceFunction1.end;\n                }\n                if (val3 === shape3.s.ix) {\n                    return interfaceFunction1.start;\n                }\n                if (val3 === shape3.o.ix) {\n                    return interfaceFunction1.offset;\n                }\n                return null;\n            }\n            var _propertyGroup1 = propertyGroupFactory(interfaceFunction1, propertyGroup1);\n            interfaceFunction1.propertyIndex = shape3.ix;\n            view1.s.setGroupProperty(PropertyInterface(\"Start\", _propertyGroup1));\n            view1.e.setGroupProperty(PropertyInterface(\"End\", _propertyGroup1));\n            view1.o.setGroupProperty(PropertyInterface(\"Offset\", _propertyGroup1));\n            interfaceFunction1.propertyIndex = shape3.ix;\n            interfaceFunction1.propertyGroup = propertyGroup1;\n            Object.defineProperties(interfaceFunction1, {\n                start: {\n                    get: ExpressionPropertyInterface(view1.s)\n                },\n                end: {\n                    get: ExpressionPropertyInterface(view1.e)\n                },\n                offset: {\n                    get: ExpressionPropertyInterface(view1.o)\n                },\n                _name: {\n                    value: shape3.nm\n                }\n            });\n            interfaceFunction1.mn = shape3.mn;\n            return interfaceFunction1;\n        }\n        function transformInterfaceFactory1(shape3, view1, propertyGroup1) {\n            function interfaceFunction1(value3) {\n                if (shape3.a.ix === value3 || value3 === \"Anchor Point\") {\n                    return interfaceFunction1.anchorPoint;\n                }\n                if (shape3.o.ix === value3 || value3 === \"Opacity\") {\n                    return interfaceFunction1.opacity;\n                }\n                if (shape3.p.ix === value3 || value3 === \"Position\") {\n                    return interfaceFunction1.position;\n                }\n                if (shape3.r.ix === value3 || value3 === \"Rotation\" || value3 === \"ADBE Vector Rotation\") {\n                    return interfaceFunction1.rotation;\n                }\n                if (shape3.s.ix === value3 || value3 === \"Scale\") {\n                    return interfaceFunction1.scale;\n                }\n                if (shape3.sk && shape3.sk.ix === value3 || value3 === \"Skew\") {\n                    return interfaceFunction1.skew;\n                }\n                if (shape3.sa && shape3.sa.ix === value3 || value3 === \"Skew Axis\") {\n                    return interfaceFunction1.skewAxis;\n                }\n                return null;\n            }\n            var _propertyGroup1 = propertyGroupFactory(interfaceFunction1, propertyGroup1);\n            view1.transform.mProps.o.setGroupProperty(PropertyInterface(\"Opacity\", _propertyGroup1));\n            view1.transform.mProps.p.setGroupProperty(PropertyInterface(\"Position\", _propertyGroup1));\n            view1.transform.mProps.a.setGroupProperty(PropertyInterface(\"Anchor Point\", _propertyGroup1));\n            view1.transform.mProps.s.setGroupProperty(PropertyInterface(\"Scale\", _propertyGroup1));\n            view1.transform.mProps.r.setGroupProperty(PropertyInterface(\"Rotation\", _propertyGroup1));\n            if (view1.transform.mProps.sk) {\n                view1.transform.mProps.sk.setGroupProperty(PropertyInterface(\"Skew\", _propertyGroup1));\n                view1.transform.mProps.sa.setGroupProperty(PropertyInterface(\"Skew Angle\", _propertyGroup1));\n            }\n            view1.transform.op.setGroupProperty(PropertyInterface(\"Opacity\", _propertyGroup1));\n            Object.defineProperties(interfaceFunction1, {\n                opacity: {\n                    get: ExpressionPropertyInterface(view1.transform.mProps.o)\n                },\n                position: {\n                    get: ExpressionPropertyInterface(view1.transform.mProps.p)\n                },\n                anchorPoint: {\n                    get: ExpressionPropertyInterface(view1.transform.mProps.a)\n                },\n                scale: {\n                    get: ExpressionPropertyInterface(view1.transform.mProps.s)\n                },\n                rotation: {\n                    get: ExpressionPropertyInterface(view1.transform.mProps.r)\n                },\n                skew: {\n                    get: ExpressionPropertyInterface(view1.transform.mProps.sk)\n                },\n                skewAxis: {\n                    get: ExpressionPropertyInterface(view1.transform.mProps.sa)\n                },\n                _name: {\n                    value: shape3.nm\n                }\n            });\n            interfaceFunction1.ty = \"tr\";\n            interfaceFunction1.mn = shape3.mn;\n            interfaceFunction1.propertyGroup = propertyGroup1;\n            return interfaceFunction1;\n        }\n        function ellipseInterfaceFactory1(shape3, view1, propertyGroup1) {\n            function interfaceFunction1(value3) {\n                if (shape3.p.ix === value3) {\n                    return interfaceFunction1.position;\n                }\n                if (shape3.s.ix === value3) {\n                    return interfaceFunction1.size;\n                }\n                return null;\n            }\n            var _propertyGroup1 = propertyGroupFactory(interfaceFunction1, propertyGroup1);\n            interfaceFunction1.propertyIndex = shape3.ix;\n            var prop1 = view1.sh.ty === \"tm\" ? view1.sh.prop : view1.sh;\n            prop1.s.setGroupProperty(PropertyInterface(\"Size\", _propertyGroup1));\n            prop1.p.setGroupProperty(PropertyInterface(\"Position\", _propertyGroup1));\n            Object.defineProperties(interfaceFunction1, {\n                size: {\n                    get: ExpressionPropertyInterface(prop1.s)\n                },\n                position: {\n                    get: ExpressionPropertyInterface(prop1.p)\n                },\n                _name: {\n                    value: shape3.nm\n                }\n            });\n            interfaceFunction1.mn = shape3.mn;\n            return interfaceFunction1;\n        }\n        function starInterfaceFactory1(shape3, view1, propertyGroup1) {\n            function interfaceFunction1(value3) {\n                if (shape3.p.ix === value3) {\n                    return interfaceFunction1.position;\n                }\n                if (shape3.r.ix === value3) {\n                    return interfaceFunction1.rotation;\n                }\n                if (shape3.pt.ix === value3) {\n                    return interfaceFunction1.points;\n                }\n                if (shape3.or.ix === value3 || value3 === \"ADBE Vector Star Outer Radius\") {\n                    return interfaceFunction1.outerRadius;\n                }\n                if (shape3.os.ix === value3) {\n                    return interfaceFunction1.outerRoundness;\n                }\n                if (shape3.ir && (shape3.ir.ix === value3 || value3 === \"ADBE Vector Star Inner Radius\")) {\n                    return interfaceFunction1.innerRadius;\n                }\n                if (shape3.is && shape3.is.ix === value3) {\n                    return interfaceFunction1.innerRoundness;\n                }\n                return null;\n            }\n            var _propertyGroup1 = propertyGroupFactory(interfaceFunction1, propertyGroup1);\n            var prop1 = view1.sh.ty === \"tm\" ? view1.sh.prop : view1.sh;\n            interfaceFunction1.propertyIndex = shape3.ix;\n            prop1.or.setGroupProperty(PropertyInterface(\"Outer Radius\", _propertyGroup1));\n            prop1.os.setGroupProperty(PropertyInterface(\"Outer Roundness\", _propertyGroup1));\n            prop1.pt.setGroupProperty(PropertyInterface(\"Points\", _propertyGroup1));\n            prop1.p.setGroupProperty(PropertyInterface(\"Position\", _propertyGroup1));\n            prop1.r.setGroupProperty(PropertyInterface(\"Rotation\", _propertyGroup1));\n            if (shape3.ir) {\n                prop1.ir.setGroupProperty(PropertyInterface(\"Inner Radius\", _propertyGroup1));\n                prop1.is.setGroupProperty(PropertyInterface(\"Inner Roundness\", _propertyGroup1));\n            }\n            Object.defineProperties(interfaceFunction1, {\n                position: {\n                    get: ExpressionPropertyInterface(prop1.p)\n                },\n                rotation: {\n                    get: ExpressionPropertyInterface(prop1.r)\n                },\n                points: {\n                    get: ExpressionPropertyInterface(prop1.pt)\n                },\n                outerRadius: {\n                    get: ExpressionPropertyInterface(prop1.or)\n                },\n                outerRoundness: {\n                    get: ExpressionPropertyInterface(prop1.os)\n                },\n                innerRadius: {\n                    get: ExpressionPropertyInterface(prop1.ir)\n                },\n                innerRoundness: {\n                    get: ExpressionPropertyInterface(prop1.is)\n                },\n                _name: {\n                    value: shape3.nm\n                }\n            });\n            interfaceFunction1.mn = shape3.mn;\n            return interfaceFunction1;\n        }\n        function rectInterfaceFactory1(shape3, view1, propertyGroup1) {\n            function interfaceFunction1(value3) {\n                if (shape3.p.ix === value3) {\n                    return interfaceFunction1.position;\n                }\n                if (shape3.r.ix === value3) {\n                    return interfaceFunction1.roundness;\n                }\n                if (shape3.s.ix === value3 || value3 === \"Size\" || value3 === \"ADBE Vector Rect Size\") {\n                    return interfaceFunction1.size;\n                }\n                return null;\n            }\n            var _propertyGroup1 = propertyGroupFactory(interfaceFunction1, propertyGroup1);\n            var prop1 = view1.sh.ty === \"tm\" ? view1.sh.prop : view1.sh;\n            interfaceFunction1.propertyIndex = shape3.ix;\n            prop1.p.setGroupProperty(PropertyInterface(\"Position\", _propertyGroup1));\n            prop1.s.setGroupProperty(PropertyInterface(\"Size\", _propertyGroup1));\n            prop1.r.setGroupProperty(PropertyInterface(\"Rotation\", _propertyGroup1));\n            Object.defineProperties(interfaceFunction1, {\n                position: {\n                    get: ExpressionPropertyInterface(prop1.p)\n                },\n                roundness: {\n                    get: ExpressionPropertyInterface(prop1.r)\n                },\n                size: {\n                    get: ExpressionPropertyInterface(prop1.s)\n                },\n                _name: {\n                    value: shape3.nm\n                }\n            });\n            interfaceFunction1.mn = shape3.mn;\n            return interfaceFunction1;\n        }\n        function roundedInterfaceFactory1(shape3, view1, propertyGroup1) {\n            function interfaceFunction1(value3) {\n                if (shape3.r.ix === value3 || value3 === \"Round Corners 1\") {\n                    return interfaceFunction1.radius;\n                }\n                return null;\n            }\n            var _propertyGroup1 = propertyGroupFactory(interfaceFunction1, propertyGroup1);\n            var prop1 = view1;\n            interfaceFunction1.propertyIndex = shape3.ix;\n            prop1.rd.setGroupProperty(PropertyInterface(\"Radius\", _propertyGroup1));\n            Object.defineProperties(interfaceFunction1, {\n                radius: {\n                    get: ExpressionPropertyInterface(prop1.rd)\n                },\n                _name: {\n                    value: shape3.nm\n                }\n            });\n            interfaceFunction1.mn = shape3.mn;\n            return interfaceFunction1;\n        }\n        function repeaterInterfaceFactory1(shape3, view1, propertyGroup1) {\n            function interfaceFunction1(value3) {\n                if (shape3.c.ix === value3 || value3 === \"Copies\") {\n                    return interfaceFunction1.copies;\n                }\n                if (shape3.o.ix === value3 || value3 === \"Offset\") {\n                    return interfaceFunction1.offset;\n                }\n                return null;\n            }\n            var _propertyGroup1 = propertyGroupFactory(interfaceFunction1, propertyGroup1);\n            var prop1 = view1;\n            interfaceFunction1.propertyIndex = shape3.ix;\n            prop1.c.setGroupProperty(PropertyInterface(\"Copies\", _propertyGroup1));\n            prop1.o.setGroupProperty(PropertyInterface(\"Offset\", _propertyGroup1));\n            Object.defineProperties(interfaceFunction1, {\n                copies: {\n                    get: ExpressionPropertyInterface(prop1.c)\n                },\n                offset: {\n                    get: ExpressionPropertyInterface(prop1.o)\n                },\n                _name: {\n                    value: shape3.nm\n                }\n            });\n            interfaceFunction1.mn = shape3.mn;\n            return interfaceFunction1;\n        }\n        return function(shapes1, view1, propertyGroup1) {\n            var interfaces1;\n            function _interfaceFunction1(value3) {\n                if (typeof value3 === \"number\") {\n                    value3 = value3 === undefined ? 1 : value3;\n                    if (value3 === 0) {\n                        return propertyGroup1;\n                    }\n                    return interfaces1[value3 - 1];\n                }\n                var i3 = 0;\n                var len1 = interfaces1.length;\n                while(i3 < len1){\n                    if (interfaces1[i3]._name === value3) {\n                        return interfaces1[i3];\n                    }\n                    i3 += 1;\n                }\n                return null;\n            }\n            function parentGroupWrapper1() {\n                return propertyGroup1;\n            }\n            _interfaceFunction1.propertyGroup = propertyGroupFactory(_interfaceFunction1, parentGroupWrapper1);\n            interfaces1 = iterateElements1(shapes1, view1, _interfaceFunction1.propertyGroup);\n            _interfaceFunction1.numProperties = interfaces1.length;\n            _interfaceFunction1._name = \"Contents\";\n            return _interfaceFunction1;\n        };\n    }();\n    var TextExpressionInterface = function() {\n        return function(elem3) {\n            var _sourceText1;\n            function _thisLayerFunction1(name1) {\n                switch(name1){\n                    case \"ADBE Text Document\":\n                        return _thisLayerFunction1.sourceText;\n                    default:\n                        return null;\n                }\n            }\n            Object.defineProperty(_thisLayerFunction1, \"sourceText\", {\n                get: function get1() {\n                    elem3.textProperty.getValue();\n                    var stringValue1 = elem3.textProperty.currentData.t;\n                    if (!_sourceText1 || stringValue1 !== _sourceText1.value) {\n                        _sourceText1 = new String(stringValue1); // eslint-disable-line no-new-wrappers\n                        // If stringValue is an empty string, eval returns undefined, so it has to be returned as a String primitive\n                        _sourceText1.value = stringValue1 || new String(stringValue1); // eslint-disable-line no-new-wrappers\n                        Object.defineProperty(_sourceText1, \"style\", {\n                            get: function get1() {\n                                return {\n                                    fillColor: elem3.textProperty.currentData.fc\n                                };\n                            }\n                        });\n                    }\n                    return _sourceText1;\n                }\n            });\n            return _thisLayerFunction1;\n        };\n    }();\n    function _typeof(obj1) {\n        \"@babel/helpers - typeof\";\n        if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof1(obj1) {\n                return typeof obj1;\n            };\n        } else {\n            _typeof = function _typeof1(obj1) {\n                return obj1 && typeof Symbol === \"function\" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? \"symbol\" : typeof obj1;\n            };\n        }\n        return _typeof(obj1);\n    }\n    var FootageInterface = function() {\n        var outlineInterfaceFactory1 = function outlineInterfaceFactory1(elem3) {\n            var currentPropertyName1 = \"\";\n            var currentProperty1 = elem3.getFootageData();\n            function init1() {\n                currentPropertyName1 = \"\";\n                currentProperty1 = elem3.getFootageData();\n                return searchProperty1;\n            }\n            function searchProperty1(value3) {\n                if (currentProperty1[value3]) {\n                    currentPropertyName1 = value3;\n                    currentProperty1 = currentProperty1[value3];\n                    if (_typeof(currentProperty1) === \"object\") {\n                        return searchProperty1;\n                    }\n                    return currentProperty1;\n                }\n                var propertyNameIndex1 = value3.indexOf(currentPropertyName1);\n                if (propertyNameIndex1 !== -1) {\n                    var index1 = parseInt(value3.substr(propertyNameIndex1 + currentPropertyName1.length), 10);\n                    currentProperty1 = currentProperty1[index1];\n                    if (_typeof(currentProperty1) === \"object\") {\n                        return searchProperty1;\n                    }\n                    return currentProperty1;\n                }\n                return \"\";\n            }\n            return init1;\n        };\n        var dataInterfaceFactory1 = function dataInterfaceFactory1(elem3) {\n            function interfaceFunction1(value3) {\n                if (value3 === \"Outline\") {\n                    return interfaceFunction1.outlineInterface();\n                }\n                return null;\n            }\n            interfaceFunction1._name = \"Outline\";\n            interfaceFunction1.outlineInterface = outlineInterfaceFactory1(elem3);\n            return interfaceFunction1;\n        };\n        return function(elem3) {\n            function _interfaceFunction1(value3) {\n                if (value3 === \"Data\") {\n                    return _interfaceFunction1.dataInterface;\n                }\n                return null;\n            }\n            _interfaceFunction1._name = \"Data\";\n            _interfaceFunction1.dataInterface = dataInterfaceFactory1(elem3);\n            return _interfaceFunction1;\n        };\n    }();\n    var interfaces = {\n        layer: LayerExpressionInterface,\n        effects: EffectsExpressionInterface,\n        comp: CompExpressionInterface,\n        shape: ShapeExpressionInterface,\n        text: TextExpressionInterface,\n        footage: FootageInterface\n    };\n    function getInterface(type1) {\n        return interfaces[type1] || null;\n    }\n    var expressionHelpers = function() {\n        function searchExpressions1(elem3, data1, prop1) {\n            if (data1.x) {\n                prop1.k = true;\n                prop1.x = true;\n                prop1.initiateExpression = ExpressionManager.initiateExpression;\n                prop1.effectsSequence.push(prop1.initiateExpression(elem3, data1, prop1).bind(prop1));\n            }\n        }\n        function getValueAtTime1(frameNum1) {\n            frameNum1 *= this.elem.globalData.frameRate;\n            frameNum1 -= this.offsetTime;\n            if (frameNum1 !== this._cachingAtTime.lastFrame) {\n                this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum1 ? this._cachingAtTime.lastIndex : 0;\n                this._cachingAtTime.value = this.interpolateValue(frameNum1, this._cachingAtTime);\n                this._cachingAtTime.lastFrame = frameNum1;\n            }\n            return this._cachingAtTime.value;\n        }\n        function getSpeedAtTime1(frameNum1) {\n            var delta1 = -0.01;\n            var v11 = this.getValueAtTime(frameNum1);\n            var v21 = this.getValueAtTime(frameNum1 + delta1);\n            var speed1 = 0;\n            if (v11.length) {\n                var i3;\n                for(i3 = 0; i3 < v11.length; i3 += 1){\n                    speed1 += Math.pow(v21[i3] - v11[i3], 2);\n                }\n                speed1 = Math.sqrt(speed1) * 100;\n            } else {\n                speed1 = 0;\n            }\n            return speed1;\n        }\n        function getVelocityAtTime1(frameNum1) {\n            if (this.vel !== undefined) {\n                return this.vel;\n            }\n            var delta1 = -0.001; // frameNum += this.elem.data.st;\n            var v11 = this.getValueAtTime(frameNum1);\n            var v21 = this.getValueAtTime(frameNum1 + delta1);\n            var velocity1;\n            if (v11.length) {\n                velocity1 = createTypedArray(\"float32\", v11.length);\n                var i3;\n                for(i3 = 0; i3 < v11.length; i3 += 1){\n                    // removing frameRate\n                    // if needed, don't add it here\n                    // velocity[i] = this.elem.globalData.frameRate*((v2[i] - v1[i])/delta);\n                    velocity1[i3] = (v21[i3] - v11[i3]) / delta1;\n                }\n            } else {\n                velocity1 = (v21 - v11) / delta1;\n            }\n            return velocity1;\n        }\n        function getStaticValueAtTime1() {\n            return this.pv;\n        }\n        function setGroupProperty1(propertyGroup1) {\n            this.propertyGroup = propertyGroup1;\n        }\n        return {\n            searchExpressions: searchExpressions1,\n            getSpeedAtTime: getSpeedAtTime1,\n            getVelocityAtTime: getVelocityAtTime1,\n            getValueAtTime: getValueAtTime1,\n            getStaticValueAtTime: getStaticValueAtTime1,\n            setGroupProperty: setGroupProperty1\n        };\n    }();\n    function addPropertyDecorator() {\n        function loopOut1(type1, duration1, durationFlag1) {\n            if (!this.k || !this.keyframes) {\n                return this.pv;\n            }\n            type1 = type1 ? type1.toLowerCase() : \"\";\n            var currentFrame1 = this.comp.renderedFrame;\n            var keyframes1 = this.keyframes;\n            var lastKeyFrame1 = keyframes1[keyframes1.length - 1].t;\n            if (currentFrame1 <= lastKeyFrame1) {\n                return this.pv;\n            }\n            var cycleDuration1;\n            var firstKeyFrame1;\n            if (!durationFlag1) {\n                if (!duration1 || duration1 > keyframes1.length - 1) {\n                    duration1 = keyframes1.length - 1;\n                }\n                firstKeyFrame1 = keyframes1[keyframes1.length - 1 - duration1].t;\n                cycleDuration1 = lastKeyFrame1 - firstKeyFrame1;\n            } else {\n                if (!duration1) {\n                    cycleDuration1 = Math.max(0, lastKeyFrame1 - this.elem.data.ip);\n                } else {\n                    cycleDuration1 = Math.abs(lastKeyFrame1 - this.elem.comp.globalData.frameRate * duration1);\n                }\n                firstKeyFrame1 = lastKeyFrame1 - cycleDuration1;\n            }\n            var i3;\n            var len1;\n            var ret1;\n            if (type1 === \"pingpong\") {\n                var iterations1 = Math.floor((currentFrame1 - firstKeyFrame1) / cycleDuration1);\n                if (iterations1 % 2 !== 0) {\n                    return this.getValueAtTime((cycleDuration1 - (currentFrame1 - firstKeyFrame1) % cycleDuration1 + firstKeyFrame1) / this.comp.globalData.frameRate, 0); // eslint-disable-line\n                }\n            } else if (type1 === \"offset\") {\n                var initV1 = this.getValueAtTime(firstKeyFrame1 / this.comp.globalData.frameRate, 0);\n                var endV1 = this.getValueAtTime(lastKeyFrame1 / this.comp.globalData.frameRate, 0);\n                var current1 = this.getValueAtTime(((currentFrame1 - firstKeyFrame1) % cycleDuration1 + firstKeyFrame1) / this.comp.globalData.frameRate, 0); // eslint-disable-line\n                var repeats1 = Math.floor((currentFrame1 - firstKeyFrame1) / cycleDuration1);\n                if (this.pv.length) {\n                    ret1 = new Array(initV1.length);\n                    len1 = ret1.length;\n                    for(i3 = 0; i3 < len1; i3 += 1){\n                        ret1[i3] = (endV1[i3] - initV1[i3]) * repeats1 + current1[i3];\n                    }\n                    return ret1;\n                }\n                return (endV1 - initV1) * repeats1 + current1;\n            } else if (type1 === \"continue\") {\n                var lastValue1 = this.getValueAtTime(lastKeyFrame1 / this.comp.globalData.frameRate, 0);\n                var nextLastValue1 = this.getValueAtTime((lastKeyFrame1 - 0.001) / this.comp.globalData.frameRate, 0);\n                if (this.pv.length) {\n                    ret1 = new Array(lastValue1.length);\n                    len1 = ret1.length;\n                    for(i3 = 0; i3 < len1; i3 += 1){\n                        ret1[i3] = lastValue1[i3] + (lastValue1[i3] - nextLastValue1[i3]) * ((currentFrame1 - lastKeyFrame1) / this.comp.globalData.frameRate) / 0.0005; // eslint-disable-line\n                    }\n                    return ret1;\n                }\n                return lastValue1 + (lastValue1 - nextLastValue1) * ((currentFrame1 - lastKeyFrame1) / 0.001);\n            }\n            return this.getValueAtTime(((currentFrame1 - firstKeyFrame1) % cycleDuration1 + firstKeyFrame1) / this.comp.globalData.frameRate, 0); // eslint-disable-line\n        }\n        function loopIn1(type1, duration1, durationFlag1) {\n            if (!this.k) {\n                return this.pv;\n            }\n            type1 = type1 ? type1.toLowerCase() : \"\";\n            var currentFrame1 = this.comp.renderedFrame;\n            var keyframes1 = this.keyframes;\n            var firstKeyFrame1 = keyframes1[0].t;\n            if (currentFrame1 >= firstKeyFrame1) {\n                return this.pv;\n            }\n            var cycleDuration1;\n            var lastKeyFrame1;\n            if (!durationFlag1) {\n                if (!duration1 || duration1 > keyframes1.length - 1) {\n                    duration1 = keyframes1.length - 1;\n                }\n                lastKeyFrame1 = keyframes1[duration1].t;\n                cycleDuration1 = lastKeyFrame1 - firstKeyFrame1;\n            } else {\n                if (!duration1) {\n                    cycleDuration1 = Math.max(0, this.elem.data.op - firstKeyFrame1);\n                } else {\n                    cycleDuration1 = Math.abs(this.elem.comp.globalData.frameRate * duration1);\n                }\n                lastKeyFrame1 = firstKeyFrame1 + cycleDuration1;\n            }\n            var i3;\n            var len1;\n            var ret1;\n            if (type1 === \"pingpong\") {\n                var iterations1 = Math.floor((firstKeyFrame1 - currentFrame1) / cycleDuration1);\n                if (iterations1 % 2 === 0) {\n                    return this.getValueAtTime(((firstKeyFrame1 - currentFrame1) % cycleDuration1 + firstKeyFrame1) / this.comp.globalData.frameRate, 0); // eslint-disable-line\n                }\n            } else if (type1 === \"offset\") {\n                var initV1 = this.getValueAtTime(firstKeyFrame1 / this.comp.globalData.frameRate, 0);\n                var endV1 = this.getValueAtTime(lastKeyFrame1 / this.comp.globalData.frameRate, 0);\n                var current1 = this.getValueAtTime((cycleDuration1 - (firstKeyFrame1 - currentFrame1) % cycleDuration1 + firstKeyFrame1) / this.comp.globalData.frameRate, 0);\n                var repeats1 = Math.floor((firstKeyFrame1 - currentFrame1) / cycleDuration1) + 1;\n                if (this.pv.length) {\n                    ret1 = new Array(initV1.length);\n                    len1 = ret1.length;\n                    for(i3 = 0; i3 < len1; i3 += 1){\n                        ret1[i3] = current1[i3] - (endV1[i3] - initV1[i3]) * repeats1;\n                    }\n                    return ret1;\n                }\n                return current1 - (endV1 - initV1) * repeats1;\n            } else if (type1 === \"continue\") {\n                var firstValue1 = this.getValueAtTime(firstKeyFrame1 / this.comp.globalData.frameRate, 0);\n                var nextFirstValue1 = this.getValueAtTime((firstKeyFrame1 + 0.001) / this.comp.globalData.frameRate, 0);\n                if (this.pv.length) {\n                    ret1 = new Array(firstValue1.length);\n                    len1 = ret1.length;\n                    for(i3 = 0; i3 < len1; i3 += 1){\n                        ret1[i3] = firstValue1[i3] + (firstValue1[i3] - nextFirstValue1[i3]) * (firstKeyFrame1 - currentFrame1) / 0.001;\n                    }\n                    return ret1;\n                }\n                return firstValue1 + (firstValue1 - nextFirstValue1) * (firstKeyFrame1 - currentFrame1) / 0.001;\n            }\n            return this.getValueAtTime((cycleDuration1 - ((firstKeyFrame1 - currentFrame1) % cycleDuration1 + firstKeyFrame1)) / this.comp.globalData.frameRate, 0); // eslint-disable-line\n        }\n        function smooth1(width1, samples1) {\n            if (!this.k) {\n                return this.pv;\n            }\n            width1 = (width1 || 0.4) * 0.5;\n            samples1 = Math.floor(samples1 || 5);\n            if (samples1 <= 1) {\n                return this.pv;\n            }\n            var currentTime1 = this.comp.renderedFrame / this.comp.globalData.frameRate;\n            var initFrame1 = currentTime1 - width1;\n            var endFrame1 = currentTime1 + width1;\n            var sampleFrequency1 = samples1 > 1 ? (endFrame1 - initFrame1) / (samples1 - 1) : 1;\n            var i3 = 0;\n            var j3 = 0;\n            var value3;\n            if (this.pv.length) {\n                value3 = createTypedArray(\"float32\", this.pv.length);\n            } else {\n                value3 = 0;\n            }\n            var sampleValue1;\n            while(i3 < samples1){\n                sampleValue1 = this.getValueAtTime(initFrame1 + i3 * sampleFrequency1);\n                if (this.pv.length) {\n                    for(j3 = 0; j3 < this.pv.length; j3 += 1){\n                        value3[j3] += sampleValue1[j3];\n                    }\n                } else {\n                    value3 += sampleValue1;\n                }\n                i3 += 1;\n            }\n            if (this.pv.length) {\n                for(j3 = 0; j3 < this.pv.length; j3 += 1){\n                    value3[j3] /= samples1;\n                }\n            } else {\n                value3 /= samples1;\n            }\n            return value3;\n        }\n        function getTransformValueAtTime1(time1) {\n            if (!this._transformCachingAtTime) {\n                this._transformCachingAtTime = {\n                    v: new Matrix()\n                };\n            } /// /\n            var matrix1 = this._transformCachingAtTime.v;\n            matrix1.cloneFromProps(this.pre.props);\n            if (this.appliedTransformations < 1) {\n                var anchor1 = this.a.getValueAtTime(time1);\n                matrix1.translate(-anchor1[0] * this.a.mult, -anchor1[1] * this.a.mult, anchor1[2] * this.a.mult);\n            }\n            if (this.appliedTransformations < 2) {\n                var scale2 = this.s.getValueAtTime(time1);\n                matrix1.scale(scale2[0] * this.s.mult, scale2[1] * this.s.mult, scale2[2] * this.s.mult);\n            }\n            if (this.sk && this.appliedTransformations < 3) {\n                var skew1 = this.sk.getValueAtTime(time1);\n                var skewAxis1 = this.sa.getValueAtTime(time1);\n                matrix1.skewFromAxis(-skew1 * this.sk.mult, skewAxis1 * this.sa.mult);\n            }\n            if (this.r && this.appliedTransformations < 4) {\n                var rotation1 = this.r.getValueAtTime(time1);\n                matrix1.rotate(-rotation1 * this.r.mult);\n            } else if (!this.r && this.appliedTransformations < 4) {\n                var rotationZ1 = this.rz.getValueAtTime(time1);\n                var rotationY1 = this.ry.getValueAtTime(time1);\n                var rotationX1 = this.rx.getValueAtTime(time1);\n                var orientation1 = this.or.getValueAtTime(time1);\n                matrix1.rotateZ(-rotationZ1 * this.rz.mult).rotateY(rotationY1 * this.ry.mult).rotateX(rotationX1 * this.rx.mult).rotateZ(-orientation1[2] * this.or.mult).rotateY(orientation1[1] * this.or.mult).rotateX(orientation1[0] * this.or.mult);\n            }\n            if (this.data.p && this.data.p.s) {\n                var positionX1 = this.px.getValueAtTime(time1);\n                var positionY1 = this.py.getValueAtTime(time1);\n                if (this.data.p.z) {\n                    var positionZ1 = this.pz.getValueAtTime(time1);\n                    matrix1.translate(positionX1 * this.px.mult, positionY1 * this.py.mult, -positionZ1 * this.pz.mult);\n                } else {\n                    matrix1.translate(positionX1 * this.px.mult, positionY1 * this.py.mult, 0);\n                }\n            } else {\n                var position1 = this.p.getValueAtTime(time1);\n                matrix1.translate(position1[0] * this.p.mult, position1[1] * this.p.mult, -position1[2] * this.p.mult);\n            }\n            return matrix1; /// /\n        }\n        function getTransformStaticValueAtTime1() {\n            return this.v.clone(new Matrix());\n        }\n        var getTransformProperty1 = TransformPropertyFactory.getTransformProperty;\n        TransformPropertyFactory.getTransformProperty = function(elem3, data1, container1) {\n            var prop1 = getTransformProperty1(elem3, data1, container1);\n            if (prop1.dynamicProperties.length) {\n                prop1.getValueAtTime = getTransformValueAtTime1.bind(prop1);\n            } else {\n                prop1.getValueAtTime = getTransformStaticValueAtTime1.bind(prop1);\n            }\n            prop1.setGroupProperty = expressionHelpers.setGroupProperty;\n            return prop1;\n        };\n        var propertyGetProp1 = PropertyFactory.getProp;\n        PropertyFactory.getProp = function(elem3, data1, type1, mult1, container1) {\n            var prop1 = propertyGetProp1(elem3, data1, type1, mult1, container1); // prop.getVelocityAtTime = getVelocityAtTime;\n            // prop.loopOut = loopOut;\n            // prop.loopIn = loopIn;\n            if (prop1.kf) {\n                prop1.getValueAtTime = expressionHelpers.getValueAtTime.bind(prop1);\n            } else {\n                prop1.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(prop1);\n            }\n            prop1.setGroupProperty = expressionHelpers.setGroupProperty;\n            prop1.loopOut = loopOut1;\n            prop1.loopIn = loopIn1;\n            prop1.smooth = smooth1;\n            prop1.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(prop1);\n            prop1.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(prop1);\n            prop1.numKeys = data1.a === 1 ? data1.k.length : 0;\n            prop1.propertyIndex = data1.ix;\n            var value3 = 0;\n            if (type1 !== 0) {\n                value3 = createTypedArray(\"float32\", data1.a === 1 ? data1.k[0].s.length : data1.k.length);\n            }\n            prop1._cachingAtTime = {\n                lastFrame: initialDefaultFrame,\n                lastIndex: 0,\n                value: value3\n            };\n            expressionHelpers.searchExpressions(elem3, data1, prop1);\n            if (prop1.k) {\n                container1.addDynamicProperty(prop1);\n            }\n            return prop1;\n        };\n        function getShapeValueAtTime1(frameNum1) {\n            // For now this caching object is created only when needed instead of creating it when the shape is initialized.\n            if (!this._cachingAtTime) {\n                this._cachingAtTime = {\n                    shapeValue: shapePool.clone(this.pv),\n                    lastIndex: 0,\n                    lastTime: initialDefaultFrame\n                };\n            }\n            frameNum1 *= this.elem.globalData.frameRate;\n            frameNum1 -= this.offsetTime;\n            if (frameNum1 !== this._cachingAtTime.lastTime) {\n                this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < frameNum1 ? this._caching.lastIndex : 0;\n                this._cachingAtTime.lastTime = frameNum1;\n                this.interpolateShape(frameNum1, this._cachingAtTime.shapeValue, this._cachingAtTime);\n            }\n            return this._cachingAtTime.shapeValue;\n        }\n        var ShapePropertyConstructorFunction1 = ShapePropertyFactory.getConstructorFunction();\n        var KeyframedShapePropertyConstructorFunction1 = ShapePropertyFactory.getKeyframedConstructorFunction();\n        function ShapeExpressions1() {}\n        ShapeExpressions1.prototype = {\n            vertices: function vertices1(prop1, time1) {\n                if (this.k) {\n                    this.getValue();\n                }\n                var shapePath1 = this.v;\n                if (time1 !== undefined) {\n                    shapePath1 = this.getValueAtTime(time1, 0);\n                }\n                var i3;\n                var len1 = shapePath1._length;\n                var vertices1 = shapePath1[prop1];\n                var points1 = shapePath1.v;\n                var arr3 = createSizedArray(len1);\n                for(i3 = 0; i3 < len1; i3 += 1){\n                    if (prop1 === \"i\" || prop1 === \"o\") {\n                        arr3[i3] = [\n                            vertices1[i3][0] - points1[i3][0],\n                            vertices1[i3][1] - points1[i3][1]\n                        ];\n                    } else {\n                        arr3[i3] = [\n                            vertices1[i3][0],\n                            vertices1[i3][1]\n                        ];\n                    }\n                }\n                return arr3;\n            },\n            points: function points1(time1) {\n                return this.vertices(\"v\", time1);\n            },\n            inTangents: function inTangents1(time1) {\n                return this.vertices(\"i\", time1);\n            },\n            outTangents: function outTangents1(time1) {\n                return this.vertices(\"o\", time1);\n            },\n            isClosed: function isClosed1() {\n                return this.v.c;\n            },\n            pointOnPath: function pointOnPath1(perc1, time1) {\n                var shapePath1 = this.v;\n                if (time1 !== undefined) {\n                    shapePath1 = this.getValueAtTime(time1, 0);\n                }\n                if (!this._segmentsLength) {\n                    this._segmentsLength = bez.getSegmentsLength(shapePath1);\n                }\n                var segmentsLength1 = this._segmentsLength;\n                var lengths1 = segmentsLength1.lengths;\n                var lengthPos1 = segmentsLength1.totalLength * perc1;\n                var i3 = 0;\n                var len1 = lengths1.length;\n                var accumulatedLength1 = 0;\n                var pt5;\n                while(i3 < len1){\n                    if (accumulatedLength1 + lengths1[i3].addedLength > lengthPos1) {\n                        var initIndex1 = i3;\n                        var endIndex1 = shapePath1.c && i3 === len1 - 1 ? 0 : i3 + 1;\n                        var segmentPerc1 = (lengthPos1 - accumulatedLength1) / lengths1[i3].addedLength;\n                        pt5 = bez.getPointInSegment(shapePath1.v[initIndex1], shapePath1.v[endIndex1], shapePath1.o[initIndex1], shapePath1.i[endIndex1], segmentPerc1, lengths1[i3]);\n                        break;\n                    } else {\n                        accumulatedLength1 += lengths1[i3].addedLength;\n                    }\n                    i3 += 1;\n                }\n                if (!pt5) {\n                    pt5 = shapePath1.c ? [\n                        shapePath1.v[0][0],\n                        shapePath1.v[0][1]\n                    ] : [\n                        shapePath1.v[shapePath1._length - 1][0],\n                        shapePath1.v[shapePath1._length - 1][1]\n                    ];\n                }\n                return pt5;\n            },\n            vectorOnPath: function vectorOnPath1(perc1, time1, vectorType1) {\n                // perc doesn't use triple equality because it can be a Number object as well as a primitive.\n                if (perc1 == 1) {\n                    // eslint-disable-line eqeqeq\n                    perc1 = this.v.c;\n                } else if (perc1 == 0) {\n                    // eslint-disable-line eqeqeq\n                    perc1 = 0.999;\n                }\n                var pt11 = this.pointOnPath(perc1, time1);\n                var pt21 = this.pointOnPath(perc1 + 0.001, time1);\n                var xLength1 = pt21[0] - pt11[0];\n                var yLength1 = pt21[1] - pt11[1];\n                var magnitude1 = Math.sqrt(Math.pow(xLength1, 2) + Math.pow(yLength1, 2));\n                if (magnitude1 === 0) {\n                    return [\n                        0,\n                        0\n                    ];\n                }\n                var unitVector1 = vectorType1 === \"tangent\" ? [\n                    xLength1 / magnitude1,\n                    yLength1 / magnitude1\n                ] : [\n                    -yLength1 / magnitude1,\n                    xLength1 / magnitude1\n                ];\n                return unitVector1;\n            },\n            tangentOnPath: function tangentOnPath1(perc1, time1) {\n                return this.vectorOnPath(perc1, time1, \"tangent\");\n            },\n            normalOnPath: function normalOnPath1(perc1, time1) {\n                return this.vectorOnPath(perc1, time1, \"normal\");\n            },\n            setGroupProperty: expressionHelpers.setGroupProperty,\n            getValueAtTime: expressionHelpers.getStaticValueAtTime\n        };\n        extendPrototype([\n            ShapeExpressions1\n        ], ShapePropertyConstructorFunction1);\n        extendPrototype([\n            ShapeExpressions1\n        ], KeyframedShapePropertyConstructorFunction1);\n        KeyframedShapePropertyConstructorFunction1.prototype.getValueAtTime = getShapeValueAtTime1;\n        KeyframedShapePropertyConstructorFunction1.prototype.initiateExpression = ExpressionManager.initiateExpression;\n        var propertyGetShapeProp1 = ShapePropertyFactory.getShapeProp;\n        ShapePropertyFactory.getShapeProp = function(elem3, data1, type1, arr3, trims1) {\n            var prop1 = propertyGetShapeProp1(elem3, data1, type1, arr3, trims1);\n            prop1.propertyIndex = data1.ix;\n            prop1.lock = false;\n            if (type1 === 3) {\n                expressionHelpers.searchExpressions(elem3, data1.pt, prop1);\n            } else if (type1 === 4) {\n                expressionHelpers.searchExpressions(elem3, data1.ks, prop1);\n            }\n            if (prop1.k) {\n                elem3.addDynamicProperty(prop1);\n            }\n            return prop1;\n        };\n    }\n    function initialize$1() {\n        addPropertyDecorator();\n    }\n    function addDecorator() {\n        function searchExpressions1() {\n            if (this.data.d.x) {\n                this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this);\n                this.addEffect(this.getExpressionValue.bind(this));\n                return true;\n            }\n            return null;\n        }\n        TextProperty.prototype.getExpressionValue = function(currentValue1, text1) {\n            var newValue1 = this.calculateExpression(text1);\n            if (currentValue1.t !== newValue1) {\n                var newData1 = {};\n                this.copyData(newData1, currentValue1);\n                newData1.t = newValue1.toString();\n                newData1.__complete = false;\n                return newData1;\n            }\n            return currentValue1;\n        };\n        TextProperty.prototype.searchProperty = function() {\n            var isKeyframed1 = this.searchKeyframes();\n            var hasExpressions1 = this.searchExpressions();\n            this.kf = isKeyframed1 || hasExpressions1;\n            return this.kf;\n        };\n        TextProperty.prototype.searchExpressions = searchExpressions1;\n    }\n    function initialize() {\n        addDecorator();\n    }\n    function SVGComposableEffect() {}\n    SVGComposableEffect.prototype = {\n        createMergeNode: function createMergeNode1(resultId1, ins1) {\n            var feMerge1 = createNS(\"feMerge\");\n            feMerge1.setAttribute(\"result\", resultId1);\n            var feMergeNode1;\n            var i3;\n            for(i3 = 0; i3 < ins1.length; i3 += 1){\n                feMergeNode1 = createNS(\"feMergeNode\");\n                feMergeNode1.setAttribute(\"in\", ins1[i3]);\n                feMerge1.appendChild(feMergeNode1);\n                feMerge1.appendChild(feMergeNode1);\n            }\n            return feMerge1;\n        }\n    };\n    var linearFilterValue = \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0\";\n    function SVGTintFilter(filter1, filterManager1, elem3, id1, source1) {\n        this.filterManager = filterManager1;\n        var feColorMatrix1 = createNS(\"feColorMatrix\");\n        feColorMatrix1.setAttribute(\"type\", \"matrix\");\n        feColorMatrix1.setAttribute(\"color-interpolation-filters\", \"linearRGB\");\n        feColorMatrix1.setAttribute(\"values\", linearFilterValue + \" 1 0\");\n        this.linearFilter = feColorMatrix1;\n        feColorMatrix1.setAttribute(\"result\", id1 + \"_tint_1\");\n        filter1.appendChild(feColorMatrix1);\n        feColorMatrix1 = createNS(\"feColorMatrix\");\n        feColorMatrix1.setAttribute(\"type\", \"matrix\");\n        feColorMatrix1.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n        feColorMatrix1.setAttribute(\"values\", \"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0\");\n        feColorMatrix1.setAttribute(\"result\", id1 + \"_tint_2\");\n        filter1.appendChild(feColorMatrix1);\n        this.matrixFilter = feColorMatrix1;\n        var feMerge1 = this.createMergeNode(id1, [\n            source1,\n            id1 + \"_tint_1\",\n            id1 + \"_tint_2\"\n        ]);\n        filter1.appendChild(feMerge1);\n    }\n    extendPrototype([\n        SVGComposableEffect\n    ], SVGTintFilter);\n    SVGTintFilter.prototype.renderFrame = function(forceRender1) {\n        if (forceRender1 || this.filterManager._mdf) {\n            var colorBlack1 = this.filterManager.effectElements[0].p.v;\n            var colorWhite1 = this.filterManager.effectElements[1].p.v;\n            var opacity1 = this.filterManager.effectElements[2].p.v / 100;\n            this.linearFilter.setAttribute(\"values\", linearFilterValue + \" \" + opacity1 + \" 0\");\n            this.matrixFilter.setAttribute(\"values\", colorWhite1[0] - colorBlack1[0] + \" 0 0 0 \" + colorBlack1[0] + \" \" + (colorWhite1[1] - colorBlack1[1]) + \" 0 0 0 \" + colorBlack1[1] + \" \" + (colorWhite1[2] - colorBlack1[2]) + \" 0 0 0 \" + colorBlack1[2] + \" 0 0 0 1 0\");\n        }\n    };\n    function SVGFillFilter(filter1, filterManager1, elem3, id1) {\n        this.filterManager = filterManager1;\n        var feColorMatrix1 = createNS(\"feColorMatrix\");\n        feColorMatrix1.setAttribute(\"type\", \"matrix\");\n        feColorMatrix1.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n        feColorMatrix1.setAttribute(\"values\", \"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0\");\n        feColorMatrix1.setAttribute(\"result\", id1);\n        filter1.appendChild(feColorMatrix1);\n        this.matrixFilter = feColorMatrix1;\n    }\n    SVGFillFilter.prototype.renderFrame = function(forceRender1) {\n        if (forceRender1 || this.filterManager._mdf) {\n            var color4 = this.filterManager.effectElements[2].p.v;\n            var opacity1 = this.filterManager.effectElements[6].p.v;\n            this.matrixFilter.setAttribute(\"values\", \"0 0 0 0 \" + color4[0] + \" 0 0 0 0 \" + color4[1] + \" 0 0 0 0 \" + color4[2] + \" 0 0 0 \" + opacity1 + \" 0\");\n        }\n    };\n    function SVGStrokeEffect(fil1, filterManager1, elem3) {\n        this.initialized = false;\n        this.filterManager = filterManager1;\n        this.elem = elem3;\n        this.paths = [];\n    }\n    SVGStrokeEffect.prototype.initialize = function() {\n        var elemChildren1 = this.elem.layerElement.children || this.elem.layerElement.childNodes;\n        var path1;\n        var groupPath1;\n        var i3;\n        var len1;\n        if (this.filterManager.effectElements[1].p.v === 1) {\n            len1 = this.elem.maskManager.masksProperties.length;\n            i3 = 0;\n        } else {\n            i3 = this.filterManager.effectElements[0].p.v - 1;\n            len1 = i3 + 1;\n        }\n        groupPath1 = createNS(\"g\");\n        groupPath1.setAttribute(\"fill\", \"none\");\n        groupPath1.setAttribute(\"stroke-linecap\", \"round\");\n        groupPath1.setAttribute(\"stroke-dashoffset\", 1);\n        for(i3; i3 < len1; i3 += 1){\n            path1 = createNS(\"path\");\n            groupPath1.appendChild(path1);\n            this.paths.push({\n                p: path1,\n                m: i3\n            });\n        }\n        if (this.filterManager.effectElements[10].p.v === 3) {\n            var mask1 = createNS(\"mask\");\n            var id1 = createElementID();\n            mask1.setAttribute(\"id\", id1);\n            mask1.setAttribute(\"mask-type\", \"alpha\");\n            mask1.appendChild(groupPath1);\n            this.elem.globalData.defs.appendChild(mask1);\n            var g3 = createNS(\"g\");\n            g3.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + id1 + \")\");\n            while(elemChildren1[0]){\n                g3.appendChild(elemChildren1[0]);\n            }\n            this.elem.layerElement.appendChild(g3);\n            this.masker = mask1;\n            groupPath1.setAttribute(\"stroke\", \"#fff\");\n        } else if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {\n            if (this.filterManager.effectElements[10].p.v === 2) {\n                elemChildren1 = this.elem.layerElement.children || this.elem.layerElement.childNodes;\n                while(elemChildren1.length){\n                    this.elem.layerElement.removeChild(elemChildren1[0]);\n                }\n            }\n            this.elem.layerElement.appendChild(groupPath1);\n            this.elem.layerElement.removeAttribute(\"mask\");\n            groupPath1.setAttribute(\"stroke\", \"#fff\");\n        }\n        this.initialized = true;\n        this.pathMasker = groupPath1;\n    };\n    SVGStrokeEffect.prototype.renderFrame = function(forceRender1) {\n        if (!this.initialized) {\n            this.initialize();\n        }\n        var i3;\n        var len1 = this.paths.length;\n        var mask1;\n        var path1;\n        for(i3 = 0; i3 < len1; i3 += 1){\n            if (this.paths[i3].m !== -1) {\n                mask1 = this.elem.maskManager.viewData[this.paths[i3].m];\n                path1 = this.paths[i3].p;\n                if (forceRender1 || this.filterManager._mdf || mask1.prop._mdf) {\n                    path1.setAttribute(\"d\", mask1.lastPath);\n                }\n                if (forceRender1 || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask1.prop._mdf) {\n                    var dasharrayValue1;\n                    if (this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100) {\n                        var s4 = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;\n                        var e3 = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;\n                        var l3 = path1.getTotalLength();\n                        dasharrayValue1 = \"0 0 0 \" + l3 * s4 + \" \";\n                        var lineLength1 = l3 * (e3 - s4);\n                        var segment1 = 1 + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;\n                        var units1 = Math.floor(lineLength1 / segment1);\n                        var j3;\n                        for(j3 = 0; j3 < units1; j3 += 1){\n                            dasharrayValue1 += \"1 \" + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01 + \" \";\n                        }\n                        dasharrayValue1 += \"0 \" + l3 * 10 + \" 0 0\";\n                    } else {\n                        dasharrayValue1 = \"1 \" + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;\n                    }\n                    path1.setAttribute(\"stroke-dasharray\", dasharrayValue1);\n                }\n            }\n        }\n        if (forceRender1 || this.filterManager.effectElements[4].p._mdf) {\n            this.pathMasker.setAttribute(\"stroke-width\", this.filterManager.effectElements[4].p.v * 2);\n        }\n        if (forceRender1 || this.filterManager.effectElements[6].p._mdf) {\n            this.pathMasker.setAttribute(\"opacity\", this.filterManager.effectElements[6].p.v);\n        }\n        if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {\n            if (forceRender1 || this.filterManager.effectElements[3].p._mdf) {\n                var color4 = this.filterManager.effectElements[3].p.v;\n                this.pathMasker.setAttribute(\"stroke\", \"rgb(\" + bmFloor(color4[0] * 255) + \",\" + bmFloor(color4[1] * 255) + \",\" + bmFloor(color4[2] * 255) + \")\");\n            }\n        }\n    };\n    function SVGTritoneFilter(filter1, filterManager1, elem3, id1) {\n        this.filterManager = filterManager1;\n        var feColorMatrix1 = createNS(\"feColorMatrix\");\n        feColorMatrix1.setAttribute(\"type\", \"matrix\");\n        feColorMatrix1.setAttribute(\"color-interpolation-filters\", \"linearRGB\");\n        feColorMatrix1.setAttribute(\"values\", \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\");\n        filter1.appendChild(feColorMatrix1);\n        var feComponentTransfer1 = createNS(\"feComponentTransfer\");\n        feComponentTransfer1.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n        feComponentTransfer1.setAttribute(\"result\", id1);\n        this.matrixFilter = feComponentTransfer1;\n        var feFuncR1 = createNS(\"feFuncR\");\n        feFuncR1.setAttribute(\"type\", \"table\");\n        feComponentTransfer1.appendChild(feFuncR1);\n        this.feFuncR = feFuncR1;\n        var feFuncG1 = createNS(\"feFuncG\");\n        feFuncG1.setAttribute(\"type\", \"table\");\n        feComponentTransfer1.appendChild(feFuncG1);\n        this.feFuncG = feFuncG1;\n        var feFuncB1 = createNS(\"feFuncB\");\n        feFuncB1.setAttribute(\"type\", \"table\");\n        feComponentTransfer1.appendChild(feFuncB1);\n        this.feFuncB = feFuncB1;\n        filter1.appendChild(feComponentTransfer1);\n    }\n    SVGTritoneFilter.prototype.renderFrame = function(forceRender1) {\n        if (forceRender1 || this.filterManager._mdf) {\n            var color11 = this.filterManager.effectElements[0].p.v;\n            var color21 = this.filterManager.effectElements[1].p.v;\n            var color31 = this.filterManager.effectElements[2].p.v;\n            var tableR1 = color31[0] + \" \" + color21[0] + \" \" + color11[0];\n            var tableG1 = color31[1] + \" \" + color21[1] + \" \" + color11[1];\n            var tableB1 = color31[2] + \" \" + color21[2] + \" \" + color11[2];\n            this.feFuncR.setAttribute(\"tableValues\", tableR1);\n            this.feFuncG.setAttribute(\"tableValues\", tableG1);\n            this.feFuncB.setAttribute(\"tableValues\", tableB1);\n        }\n    };\n    function SVGProLevelsFilter(filter1, filterManager1, elem3, id1) {\n        this.filterManager = filterManager1;\n        var effectElements1 = this.filterManager.effectElements;\n        var feComponentTransfer1 = createNS(\"feComponentTransfer\"); // Red\n        if (effectElements1[10].p.k || effectElements1[10].p.v !== 0 || effectElements1[11].p.k || effectElements1[11].p.v !== 1 || effectElements1[12].p.k || effectElements1[12].p.v !== 1 || effectElements1[13].p.k || effectElements1[13].p.v !== 0 || effectElements1[14].p.k || effectElements1[14].p.v !== 1) {\n            this.feFuncR = this.createFeFunc(\"feFuncR\", feComponentTransfer1);\n        } // Green\n        if (effectElements1[17].p.k || effectElements1[17].p.v !== 0 || effectElements1[18].p.k || effectElements1[18].p.v !== 1 || effectElements1[19].p.k || effectElements1[19].p.v !== 1 || effectElements1[20].p.k || effectElements1[20].p.v !== 0 || effectElements1[21].p.k || effectElements1[21].p.v !== 1) {\n            this.feFuncG = this.createFeFunc(\"feFuncG\", feComponentTransfer1);\n        } // Blue\n        if (effectElements1[24].p.k || effectElements1[24].p.v !== 0 || effectElements1[25].p.k || effectElements1[25].p.v !== 1 || effectElements1[26].p.k || effectElements1[26].p.v !== 1 || effectElements1[27].p.k || effectElements1[27].p.v !== 0 || effectElements1[28].p.k || effectElements1[28].p.v !== 1) {\n            this.feFuncB = this.createFeFunc(\"feFuncB\", feComponentTransfer1);\n        } // Alpha\n        if (effectElements1[31].p.k || effectElements1[31].p.v !== 0 || effectElements1[32].p.k || effectElements1[32].p.v !== 1 || effectElements1[33].p.k || effectElements1[33].p.v !== 1 || effectElements1[34].p.k || effectElements1[34].p.v !== 0 || effectElements1[35].p.k || effectElements1[35].p.v !== 1) {\n            this.feFuncA = this.createFeFunc(\"feFuncA\", feComponentTransfer1);\n        } // RGB\n        if (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) {\n            feComponentTransfer1.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n            filter1.appendChild(feComponentTransfer1);\n        }\n        if (effectElements1[3].p.k || effectElements1[3].p.v !== 0 || effectElements1[4].p.k || effectElements1[4].p.v !== 1 || effectElements1[5].p.k || effectElements1[5].p.v !== 1 || effectElements1[6].p.k || effectElements1[6].p.v !== 0 || effectElements1[7].p.k || effectElements1[7].p.v !== 1) {\n            feComponentTransfer1 = createNS(\"feComponentTransfer\");\n            feComponentTransfer1.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n            feComponentTransfer1.setAttribute(\"result\", id1);\n            filter1.appendChild(feComponentTransfer1);\n            this.feFuncRComposed = this.createFeFunc(\"feFuncR\", feComponentTransfer1);\n            this.feFuncGComposed = this.createFeFunc(\"feFuncG\", feComponentTransfer1);\n            this.feFuncBComposed = this.createFeFunc(\"feFuncB\", feComponentTransfer1);\n        }\n    }\n    SVGProLevelsFilter.prototype.createFeFunc = function(type1, feComponentTransfer1) {\n        var feFunc1 = createNS(type1);\n        feFunc1.setAttribute(\"type\", \"table\");\n        feComponentTransfer1.appendChild(feFunc1);\n        return feFunc1;\n    };\n    SVGProLevelsFilter.prototype.getTableValue = function(inputBlack1, inputWhite1, gamma1, outputBlack1, outputWhite1) {\n        var cnt1 = 0;\n        var segments1 = 256;\n        var perc1;\n        var min1 = Math.min(inputBlack1, inputWhite1);\n        var max1 = Math.max(inputBlack1, inputWhite1);\n        var table1 = Array.call(null, {\n            length: segments1\n        });\n        var colorValue1;\n        var pos1 = 0;\n        var outputDelta1 = outputWhite1 - outputBlack1;\n        var inputDelta1 = inputWhite1 - inputBlack1;\n        while(cnt1 <= 256){\n            perc1 = cnt1 / 256;\n            if (perc1 <= min1) {\n                colorValue1 = inputDelta1 < 0 ? outputWhite1 : outputBlack1;\n            } else if (perc1 >= max1) {\n                colorValue1 = inputDelta1 < 0 ? outputBlack1 : outputWhite1;\n            } else {\n                colorValue1 = outputBlack1 + outputDelta1 * Math.pow((perc1 - inputBlack1) / inputDelta1, 1 / gamma1);\n            }\n            table1[pos1] = colorValue1;\n            pos1 += 1;\n            cnt1 += 256 / (segments1 - 1);\n        }\n        return table1.join(\" \");\n    };\n    SVGProLevelsFilter.prototype.renderFrame = function(forceRender1) {\n        if (forceRender1 || this.filterManager._mdf) {\n            var val3;\n            var effectElements1 = this.filterManager.effectElements;\n            if (this.feFuncRComposed && (forceRender1 || effectElements1[3].p._mdf || effectElements1[4].p._mdf || effectElements1[5].p._mdf || effectElements1[6].p._mdf || effectElements1[7].p._mdf)) {\n                val3 = this.getTableValue(effectElements1[3].p.v, effectElements1[4].p.v, effectElements1[5].p.v, effectElements1[6].p.v, effectElements1[7].p.v);\n                this.feFuncRComposed.setAttribute(\"tableValues\", val3);\n                this.feFuncGComposed.setAttribute(\"tableValues\", val3);\n                this.feFuncBComposed.setAttribute(\"tableValues\", val3);\n            }\n            if (this.feFuncR && (forceRender1 || effectElements1[10].p._mdf || effectElements1[11].p._mdf || effectElements1[12].p._mdf || effectElements1[13].p._mdf || effectElements1[14].p._mdf)) {\n                val3 = this.getTableValue(effectElements1[10].p.v, effectElements1[11].p.v, effectElements1[12].p.v, effectElements1[13].p.v, effectElements1[14].p.v);\n                this.feFuncR.setAttribute(\"tableValues\", val3);\n            }\n            if (this.feFuncG && (forceRender1 || effectElements1[17].p._mdf || effectElements1[18].p._mdf || effectElements1[19].p._mdf || effectElements1[20].p._mdf || effectElements1[21].p._mdf)) {\n                val3 = this.getTableValue(effectElements1[17].p.v, effectElements1[18].p.v, effectElements1[19].p.v, effectElements1[20].p.v, effectElements1[21].p.v);\n                this.feFuncG.setAttribute(\"tableValues\", val3);\n            }\n            if (this.feFuncB && (forceRender1 || effectElements1[24].p._mdf || effectElements1[25].p._mdf || effectElements1[26].p._mdf || effectElements1[27].p._mdf || effectElements1[28].p._mdf)) {\n                val3 = this.getTableValue(effectElements1[24].p.v, effectElements1[25].p.v, effectElements1[26].p.v, effectElements1[27].p.v, effectElements1[28].p.v);\n                this.feFuncB.setAttribute(\"tableValues\", val3);\n            }\n            if (this.feFuncA && (forceRender1 || effectElements1[31].p._mdf || effectElements1[32].p._mdf || effectElements1[33].p._mdf || effectElements1[34].p._mdf || effectElements1[35].p._mdf)) {\n                val3 = this.getTableValue(effectElements1[31].p.v, effectElements1[32].p.v, effectElements1[33].p.v, effectElements1[34].p.v, effectElements1[35].p.v);\n                this.feFuncA.setAttribute(\"tableValues\", val3);\n            }\n        }\n    };\n    function SVGDropShadowEffect(filter1, filterManager1, elem3, id1, source1) {\n        var globalFilterSize1 = filterManager1.container.globalData.renderConfig.filterSize;\n        var filterSize1 = filterManager1.data.fs || globalFilterSize1;\n        filter1.setAttribute(\"x\", filterSize1.x || globalFilterSize1.x);\n        filter1.setAttribute(\"y\", filterSize1.y || globalFilterSize1.y);\n        filter1.setAttribute(\"width\", filterSize1.width || globalFilterSize1.width);\n        filter1.setAttribute(\"height\", filterSize1.height || globalFilterSize1.height);\n        this.filterManager = filterManager1;\n        var feGaussianBlur1 = createNS(\"feGaussianBlur\");\n        feGaussianBlur1.setAttribute(\"in\", \"SourceAlpha\");\n        feGaussianBlur1.setAttribute(\"result\", id1 + \"_drop_shadow_1\");\n        feGaussianBlur1.setAttribute(\"stdDeviation\", \"0\");\n        this.feGaussianBlur = feGaussianBlur1;\n        filter1.appendChild(feGaussianBlur1);\n        var feOffset1 = createNS(\"feOffset\");\n        feOffset1.setAttribute(\"dx\", \"25\");\n        feOffset1.setAttribute(\"dy\", \"0\");\n        feOffset1.setAttribute(\"in\", id1 + \"_drop_shadow_1\");\n        feOffset1.setAttribute(\"result\", id1 + \"_drop_shadow_2\");\n        this.feOffset = feOffset1;\n        filter1.appendChild(feOffset1);\n        var feFlood1 = createNS(\"feFlood\");\n        feFlood1.setAttribute(\"flood-color\", \"#00ff00\");\n        feFlood1.setAttribute(\"flood-opacity\", \"1\");\n        feFlood1.setAttribute(\"result\", id1 + \"_drop_shadow_3\");\n        this.feFlood = feFlood1;\n        filter1.appendChild(feFlood1);\n        var feComposite1 = createNS(\"feComposite\");\n        feComposite1.setAttribute(\"in\", id1 + \"_drop_shadow_3\");\n        feComposite1.setAttribute(\"in2\", id1 + \"_drop_shadow_2\");\n        feComposite1.setAttribute(\"operator\", \"in\");\n        feComposite1.setAttribute(\"result\", id1 + \"_drop_shadow_4\");\n        filter1.appendChild(feComposite1);\n        var feMerge1 = this.createMergeNode(id1, [\n            id1 + \"_drop_shadow_4\",\n            source1\n        ]);\n        filter1.appendChild(feMerge1); //\n    }\n    extendPrototype([\n        SVGComposableEffect\n    ], SVGDropShadowEffect);\n    SVGDropShadowEffect.prototype.renderFrame = function(forceRender1) {\n        if (forceRender1 || this.filterManager._mdf) {\n            if (forceRender1 || this.filterManager.effectElements[4].p._mdf) {\n                this.feGaussianBlur.setAttribute(\"stdDeviation\", this.filterManager.effectElements[4].p.v / 4);\n            }\n            if (forceRender1 || this.filterManager.effectElements[0].p._mdf) {\n                var col1 = this.filterManager.effectElements[0].p.v;\n                this.feFlood.setAttribute(\"flood-color\", rgbToHex(Math.round(col1[0] * 255), Math.round(col1[1] * 255), Math.round(col1[2] * 255)));\n            }\n            if (forceRender1 || this.filterManager.effectElements[1].p._mdf) {\n                this.feFlood.setAttribute(\"flood-opacity\", this.filterManager.effectElements[1].p.v / 255);\n            }\n            if (forceRender1 || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {\n                var distance1 = this.filterManager.effectElements[3].p.v;\n                var angle1 = (this.filterManager.effectElements[2].p.v - 90) * degToRads;\n                var x4 = distance1 * Math.cos(angle1);\n                var y4 = distance1 * Math.sin(angle1);\n                this.feOffset.setAttribute(\"dx\", x4);\n                this.feOffset.setAttribute(\"dy\", y4);\n            }\n        }\n    };\n    var _svgMatteSymbols = [];\n    function SVGMatte3Effect(filterElem1, filterManager1, elem3) {\n        this.initialized = false;\n        this.filterManager = filterManager1;\n        this.filterElem = filterElem1;\n        this.elem = elem3;\n        elem3.matteElement = createNS(\"g\");\n        elem3.matteElement.appendChild(elem3.layerElement);\n        elem3.matteElement.appendChild(elem3.transformedElement);\n        elem3.baseElement = elem3.matteElement;\n    }\n    SVGMatte3Effect.prototype.findSymbol = function(mask1) {\n        var i3 = 0;\n        var len1 = _svgMatteSymbols.length;\n        while(i3 < len1){\n            if (_svgMatteSymbols[i3] === mask1) {\n                return _svgMatteSymbols[i3];\n            }\n            i3 += 1;\n        }\n        return null;\n    };\n    SVGMatte3Effect.prototype.replaceInParent = function(mask1, symbolId1) {\n        var parentNode1 = mask1.layerElement.parentNode;\n        if (!parentNode1) {\n            return;\n        }\n        var children1 = parentNode1.children;\n        var i3 = 0;\n        var len1 = children1.length;\n        while(i3 < len1){\n            if (children1[i3] === mask1.layerElement) {\n                break;\n            }\n            i3 += 1;\n        }\n        var nextChild1;\n        if (i3 <= len1 - 2) {\n            nextChild1 = children1[i3 + 1];\n        }\n        var useElem1 = createNS(\"use\");\n        useElem1.setAttribute(\"href\", \"#\" + symbolId1);\n        if (nextChild1) {\n            parentNode1.insertBefore(useElem1, nextChild1);\n        } else {\n            parentNode1.appendChild(useElem1);\n        }\n    };\n    SVGMatte3Effect.prototype.setElementAsMask = function(elem3, mask1) {\n        if (!this.findSymbol(mask1)) {\n            var symbolId1 = createElementID();\n            var masker1 = createNS(\"mask\");\n            masker1.setAttribute(\"id\", mask1.layerId);\n            masker1.setAttribute(\"mask-type\", \"alpha\");\n            _svgMatteSymbols.push(mask1);\n            var defs1 = elem3.globalData.defs;\n            defs1.appendChild(masker1);\n            var symbol1 = createNS(\"symbol\");\n            symbol1.setAttribute(\"id\", symbolId1);\n            this.replaceInParent(mask1, symbolId1);\n            symbol1.appendChild(mask1.layerElement);\n            defs1.appendChild(symbol1);\n            var useElem1 = createNS(\"use\");\n            useElem1.setAttribute(\"href\", \"#\" + symbolId1);\n            masker1.appendChild(useElem1);\n            mask1.data.hd = false;\n            mask1.show();\n        }\n        elem3.setMatte(mask1.layerId);\n    };\n    SVGMatte3Effect.prototype.initialize = function() {\n        var ind1 = this.filterManager.effectElements[0].p.v;\n        var elements1 = this.elem.comp.elements;\n        var i3 = 0;\n        var len1 = elements1.length;\n        while(i3 < len1){\n            if (elements1[i3] && elements1[i3].data.ind === ind1) {\n                this.setElementAsMask(this.elem, elements1[i3]);\n            }\n            i3 += 1;\n        }\n        this.initialized = true;\n    };\n    SVGMatte3Effect.prototype.renderFrame = function() {\n        if (!this.initialized) {\n            this.initialize();\n        }\n    };\n    function SVGGaussianBlurEffect(filter1, filterManager1, elem3, id1) {\n        // Outset the filter region by 100% on all sides to accommodate blur expansion.\n        filter1.setAttribute(\"x\", \"-100%\");\n        filter1.setAttribute(\"y\", \"-100%\");\n        filter1.setAttribute(\"width\", \"300%\");\n        filter1.setAttribute(\"height\", \"300%\");\n        this.filterManager = filterManager1;\n        var feGaussianBlur1 = createNS(\"feGaussianBlur\");\n        feGaussianBlur1.setAttribute(\"result\", id1);\n        filter1.appendChild(feGaussianBlur1);\n        this.feGaussianBlur = feGaussianBlur1;\n    }\n    SVGGaussianBlurEffect.prototype.renderFrame = function(forceRender1) {\n        if (forceRender1 || this.filterManager._mdf) {\n            // Empirical value, matching AE's blur appearance.\n            var kBlurrinessToSigma1 = 0.3;\n            var sigma1 = this.filterManager.effectElements[0].p.v * kBlurrinessToSigma1; // Dimensions mapping:\n            //\n            //   1 -> horizontal & vertical\n            //   2 -> horizontal only\n            //   3 -> vertical only\n            //\n            var dimensions1 = this.filterManager.effectElements[1].p.v;\n            var sigmaX1 = dimensions1 == 3 ? 0 : sigma1; // eslint-disable-line eqeqeq\n            var sigmaY1 = dimensions1 == 2 ? 0 : sigma1; // eslint-disable-line eqeqeq\n            this.feGaussianBlur.setAttribute(\"stdDeviation\", sigmaX1 + \" \" + sigmaY1); // Repeat edges mapping:\n            //\n            //   0 -> off -> duplicate\n            //   1 -> on  -> wrap\n            var edgeMode1 = this.filterManager.effectElements[2].p.v == 1 ? \"wrap\" : \"duplicate\"; // eslint-disable-line eqeqeq\n            this.feGaussianBlur.setAttribute(\"edgeMode\", edgeMode1);\n        }\n    };\n    function TransformEffect() {}\n    TransformEffect.prototype.init = function(effectsManager1) {\n        this.effectsManager = effectsManager1;\n        this.type = effectTypes.TRANSFORM_EFFECT;\n        this.matrix = new Matrix();\n        this.opacity = -1;\n        this._mdf = false;\n        this._opMdf = false;\n    };\n    TransformEffect.prototype.renderFrame = function(forceFrame1) {\n        this._opMdf = false;\n        this._mdf = false;\n        if (forceFrame1 || this.effectsManager._mdf) {\n            var effectElements1 = this.effectsManager.effectElements;\n            var anchor1 = effectElements1[0].p.v;\n            var position1 = effectElements1[1].p.v;\n            var isUniformScale1 = effectElements1[2].p.v === 1;\n            var scaleHeight1 = effectElements1[3].p.v;\n            var scaleWidth1 = isUniformScale1 ? scaleHeight1 : effectElements1[4].p.v;\n            var skew1 = effectElements1[5].p.v;\n            var skewAxis1 = effectElements1[6].p.v;\n            var rotation1 = effectElements1[7].p.v;\n            this.matrix.reset();\n            this.matrix.translate(-anchor1[0], -anchor1[1], anchor1[2]);\n            this.matrix.scale(scaleWidth1 * 0.01, scaleHeight1 * 0.01, 1);\n            this.matrix.rotate(-rotation1 * degToRads);\n            this.matrix.skewFromAxis(-skew1 * degToRads, (skewAxis1 + 90) * degToRads);\n            this.matrix.translate(position1[0], position1[1], 0);\n            this._mdf = true;\n            if (this.opacity !== effectElements1[8].p.v) {\n                this.opacity = effectElements1[8].p.v;\n                this._opMdf = true;\n            }\n        }\n    };\n    function SVGTransformEffect(_1, filterManager1) {\n        this.init(filterManager1);\n    }\n    extendPrototype([\n        TransformEffect\n    ], SVGTransformEffect);\n    function CVTransformEffect(effectsManager1) {\n        this.init(effectsManager1);\n    }\n    extendPrototype([\n        TransformEffect\n    ], CVTransformEffect);\n    registerRenderer(\"canvas\", CanvasRenderer);\n    registerRenderer(\"html\", HybridRenderer);\n    registerRenderer(\"svg\", SVGRenderer); // Registering shape modifiers\n    ShapeModifiers.registerModifier(\"tm\", TrimModifier);\n    ShapeModifiers.registerModifier(\"pb\", PuckerAndBloatModifier);\n    ShapeModifiers.registerModifier(\"rp\", RepeaterModifier);\n    ShapeModifiers.registerModifier(\"rd\", RoundCornersModifier);\n    ShapeModifiers.registerModifier(\"zz\", ZigZagModifier);\n    ShapeModifiers.registerModifier(\"op\", OffsetPathModifier); // Registering expression plugin\n    setExpressionsPlugin(Expressions);\n    setExpressionInterfaces(getInterface);\n    initialize$1();\n    initialize(); // Registering svg effects\n    registerEffect$1(20, SVGTintFilter, true);\n    registerEffect$1(21, SVGFillFilter, true);\n    registerEffect$1(22, SVGStrokeEffect, false);\n    registerEffect$1(23, SVGTritoneFilter, true);\n    registerEffect$1(24, SVGProLevelsFilter, true);\n    registerEffect$1(25, SVGDropShadowEffect, true);\n    registerEffect$1(28, SVGMatte3Effect, false);\n    registerEffect$1(29, SVGGaussianBlurEffect, true);\n    registerEffect$1(35, SVGTransformEffect, false);\n    registerEffect(35, CVTransformEffect);\n    return lottie;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lottie-web/build/player/lottie.js\n");

/***/ })

};
;